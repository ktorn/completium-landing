(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{205:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(3),i=(n(0),n(235)),r=n(236);const o={id:"verification2",title:"Tools",sidebar_label:"Tools",slug:"/verification/tools",hide_title:!1},c={unversionedId:"verification/verification2",id:"verification/verification2",isDocsHomePage:!1,title:"Tools",description:"The Tezos community provides a rich technical and human eco-system regarding formal verification:",source:"@site/docs/verification/verification2.md",slug:"/verification/tools",permalink:"/docs/verification/tools",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/verification/verification2.md",version:"current",sidebar_label:"Tools",sidebar:"verification",previous:{title:"Formal Verification",permalink:"/docs/verification"},next:{title:"Introduction",permalink:"/docs/verification/specification"}},s=[{value:"Archetype",id:"archetype",children:[{value:"Specification language",id:"specification-language",children:[]},{value:"Whyml",id:"whyml",children:[]}]}],l={toc:s};function p({components:e,...t}){return Object(i.b)("wrapper",Object(a.a)({},l,t,{components:e,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The ",Object(i.b)(r.a,{to:"/docs/dapp-tools/tezos",mdxType:"Link"},"Tezos")," community provides a rich technical and human eco-system regarding formal verification:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Tools"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",{href:"https://gitlab.com/nomadic-labs/mi-cho-coq/",target:"_blank"},"Michocoq")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"A specification of Michelson in ",Object(i.b)(r.a,{to:"https://coq.inria.fr/",mdxType:"Link"},"Coq")," to prove properties about smart contracts in Tezos.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",{href:"https://archetype-lang.org/"},"Archetype")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Archetype provides a specification language for contract invariant and entry point postconditions. It generates the contract in the ",Object(i.b)(r.a,{to:"http://why3.lri.fr/",mdxType:"Link"},"Why3")," language for verification")))),Object(i.b)(r.a,{to:"https://coq.inria.fr/",mdxType:"Link"},"Coq")," is an interactive proof assistant. The user sends instructions to the proof engine to build up the proof step by step: apply a theorem to justify a proposition, rewrite a term by another and so on. It is possible to program macros for automation purpose. Proving a program in Coq requires the language semantic in Coq theory (provided by Michocoq for Michelson) used to prove the correctness of the program.",Object(i.b)("p",null),Object(i.b)(r.a,{to:"http://why3.lri.fr/",mdxType:"Link"},"Why3")," is a plateform dedicated to program verification: it translates the program and specification into SMT problems (called proof obligation) for ",Object(i.b)(r.a,{to:"https://en.wikipedia.org/wiki/Satisfiability_modulo_theories#Solver_approaches",mdxType:"Link"},"SMT solvers")," to solve. When solvers succeed, the verification is automatic. When solvers fail, it is necessary to help them by providing intermediate properties about the program, that they can solve, and that they can use to solve the problem.",Object(i.b)("h2",{id:"archetype"},"Archetype"),Object(i.b)("p",null,"The Completium ",Object(i.b)(r.a,{to:"/docs/templates",mdxType:"Link"},"contract templates")," have been formally specified with Archetype."),Object(i.b)("h3",{id:"specification-language"},"Specification language"),Object(i.b)("p",null,"The Archetype specification language documentation is available ",Object(i.b)(r.a,{to:"https://docs.archetype-lang.org/archetype-language/contract-specification",mdxType:"Link"},"here"),"."),Object(i.b)("p",null,"In a nutshell, what can you specify with it?"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"entrypoints' postconditions: a ",Object(i.b)(r.a,{to:"/docs/verification/postcondition",mdxType:"Link"},"postcondition")," is a property about what the execution of the entrypoint changes in the contract's storage."),Object(i.b)("li",{parentName:"ul"},"entrypoints' fail conditions: a ",Object(i.b)(r.a,{to:"/docs/verification/fail",mdxType:"Link"},"fail condition")," is a property that holds true when the entrypoint is fails"),Object(i.b)("li",{parentName:"ul"},"contract invariants: an ",Object(i.b)(r.a,{to:"/docs/verification/invariant",mdxType:"Link"},"invariant")," is a property about the contract's storage that is always true, regardless of the transactions history.")),Object(i.b)("h3",{id:"whyml"},"Whyml"),Object(i.b)("p",null,"Archetype generates the contract's code and specification in whyml, the ",Object(i.b)("a",{href:"http://why3.lri.fr/",target:"_blank"},"Why3")," language."),Object(i.b)("p",null,"The following ",Object(i.b)(r.a,{to:"/docs/cli",mdxType:"Link"},"Completium CLI")," command:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"completium-cli generate whyml elementary.arl\n")),Object(i.b)("p",null,"generates the whyml version of this elementary archetype contract:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-archetype",metastring:'title="elementary.arl"',title:'"elementary.arl"'}),'archetype js\n\nvariable str : string = ""\n\nentry default(v : string) { str := v }\n\nspecification entry default(v :string) {\n    postcondition p {\n        str = v\n    }\n}\n')),Object(i.b)("p",null,"The generated whyml program has two modules: ",Object(i.b)("inlineCode",{parentName:"p"},"Elementary_storage")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Elementary"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ocaml",metastring:'{6,37-42} title="elementary.mlw"',"{6,37-42}":!0,title:'"elementary.mlw"'}),'module Elementary_storage\n  use archetype.Lib\n  use list.List as L\n\n  type _storage = {\n    mutable str : arstring;\n    mutable _ops : L.list operation;\n    mutable _balance : tez;\n    _transferred : tez;\n    _caller : address;\n    _source : address;\n    _now : date;\n    _chainid : chain_id;\n    _selfaddress : address;\n  } by {\n    str = "";\n    _ops = L.Nil;\n    _balance = 0;\n    _transferred = 0;\n    _caller = "";\n    _source = "";\n    _now = 0;\n    _chainid = 0;\n    _selfaddress = "";\n    _entry = None;\n    _tr = L.Nil\n  }\n\n  val ref _s : _storage\n\nend\n\nmodule Elementary\n  use archetype.Lib\n  use Js_storage\n\n  let default (v : arstring) : unit\n  ensures {\n    [@expl:p]\n    _s.str = v\n  }\n  = _s.str <- v\n\nend\n')),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Elementary_storage")," defines the contract storage and all variables available to entrypoints (",Object(i.b)("inlineCode",{parentName:"p"},"caller"),", ",Object(i.b)("inlineCode",{parentName:"p"},"transferred"),", ...). ",Object(i.b)("inlineCode",{parentName:"p"},"Elementary")," defines entrypoints and their postconditions."),Object(i.b)("p",null,"The postcondition ",Object(i.b)("inlineCode",{parentName:"p"},"p")," is declared in whyml with the ",Object(i.b)("inlineCode",{parentName:"p"},"ensures")," keyword."))}p.isMDXComponent=!0}}]);