(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{146:function(r,n,e){"use strict";e.r(n),e.d(n,"frontMatter",(function(){return l})),e.d(n,"metadata",(function(){return g})),e.d(n,"toc",(function(){return c})),e.d(n,"default",(function(){return d}));var i=e(3),t=e(7),a=(e(0),e(224)),p=e(225),m=e(240),s=e(241),o=e(418),l={id:"template1",title:"FA 1.2",sidebar_label:"FA 1.2",slug:"/templates/fa12"},g={unversionedId:"templates/template1",id:"templates/template1",isDocsHomePage:!1,title:"FA 1.2",description:"Introduction",source:"@site/docs/templates/template1.md",slug:"/templates/fa12",permalink:"/docs/templates/fa12",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/templates/template1.md",version:"current",sidebar_label:"FA 1.2",sidebar:"templates",previous:{title:"Presentation",permalink:"/docs/templates"},next:{title:"ERC20",permalink:"/docs/templates/erc20"}},c=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Originate",id:"originate",children:[{value:"Command line",id:"command-line",children:[]}]},{value:"Code",id:"code",children:[]}],D={toc:c};function d(r){var n=r.components,e=Object(t.a)(r,["components"]);return Object(a.b)("wrapper",Object(i.a)({},D,e,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"introduction"},"Introduction"),Object(a.b)("p",null,"A fungible token is basically an association table between the token owner (the account address) and the amount of tokens (a natural integer). It is possible to allow another account to transfer tokens on your behalf."),Object(a.b)("p",null,"This contract follows the ",Object(a.b)("a",{href:"https://assets.tqtezos.com/docs/token-contracts/fa12/1-fa12-intro/"},"Financial Asset 1.2")," (FA 1.2) ",Object(a.b)("a",{href:"https://gitlab.com/tzip/tzip/blob/master/proposals/tzip-7/tzip-7.md"},"TZIP 7")," specification for fungible token on Tezos."),Object(a.b)("h2",{id:"api"},"API"),Object(a.b)("h3",{id:"storage"},"Storage"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Name"),Object(a.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Type"),Object(a.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Desc"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"totalsupply")),Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"nat")),Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Total number of tokens.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"ledger")),Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"collection")),Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Association between token holder and number of tokens.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"allowance")),Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"collection")),Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Association between the pair owner and spender and the allowed amount.")))),Object(a.b)("h3",{id:"entrypoints"},"Entrypoints"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Name"),Object(a.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Parameters"),Object(a.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Desc"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"transfer")),Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"from"),", ",Object(a.b)("inlineCode",{parentName:"td"},"to"),", ",Object(a.b)("inlineCode",{parentName:"td"},"value")),Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Transfers ",Object(a.b)("inlineCode",{parentName:"td"},"value")," tokens from ",Object(a.b)("inlineCode",{parentName:"td"},"from")," to ",Object(a.b)("inlineCode",{parentName:"td"},"to"),". If the ",Object(a.b)("em",{parentName:"td"},"caller")," is not equal to ",Object(a.b)("inlineCode",{parentName:"td"},"from"),", then ",Object(a.b)("em",{parentName:"td"},"caller")," must have been allowed by ",Object(a.b)("inlineCode",{parentName:"td"},"from")," to transfer this amount to ",Object(a.b)("inlineCode",{parentName:"td"},"to"),".")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"approve")),Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"spender"),", ",Object(a.b)("inlineCode",{parentName:"td"},"value")),Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Approves ",Object(a.b)("inlineCode",{parentName:"td"},"spender")," to transfer ",Object(a.b)("inlineCode",{parentName:"td"},"value")," tokens from ",Object(a.b)("em",{parentName:"td"},"caller"),".")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"getAllowance")),Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"owner"),", ",Object(a.b)("inlineCode",{parentName:"td"},"spender")),Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Getter for the allowed value for ",Object(a.b)("inlineCode",{parentName:"td"},"owner")," and ",Object(a.b)("inlineCode",{parentName:"td"},"spender"),".")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"getBalance")),Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"owner")),Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Getter for the number of tokens owned by ",Object(a.b)("inlineCode",{parentName:"td"},"owner"),".")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"getTotalSupply")),Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null})),Object(a.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Getter for ",Object(a.b)("inlineCode",{parentName:"td"},"totalsupply"))))),Object(a.b)("h2",{id:"originate"},"Originate"),Object(a.b)("p",null,"Originate a FA 1.2 contract with the widget below."),Object(a.b)("p",null,'Click "Connect to Wallet" button, fill the fields "Initial Holder" and "Total Supply", and click "Originate".'),Object(a.b)(o.a,{mdxType:"Deploy"}),Object(a.b)("h3",{id:"command-line"},"Command line"),Object(a.b)("p",null,"Originate the contract from ",Object(a.b)("a",{href:"https://archetype-lang.org/"},"Archetype")," code below with the following ",Object(a.b)(p.a,{to:"/docs/cli",mdxType:"Link"},"Completium CLI")," example command:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{}),"completium-cli deploy fa12.arl --init '(@tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG, 10_000_000)'\n")),Object(a.b)("p",null,"The command sets:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"initialholder")," constant to ",Object(a.b)("inlineCode",{parentName:"li"},"tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"totalsupply")," variable to 10 millions")),Object(a.b)("h2",{id:"code"},"Code"),Object(a.b)("div",{className:"admonition admonition-info alert alert--info"},Object(a.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(i.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(i.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(a.b)("path",Object(i.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(a.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},"The Archetype FA 1.2 code has been ",Object(a.b)(p.a,{to:"https://assets.tqtezos.com/docs/token-contracts/fa12/4-fa12-archetype/",mdxType:"Link"},"verified")," towards the formal specification presented below."))),Object(a.b)(m.a,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"},{label:"Specification",value:"specification"}],mdxType:"Tabs"},Object(a.b)(s.a,{value:"archetype",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-archetype",metastring:'title="fa12.arl"',title:'"fa12.arl"'}),'archetype fa12(const initialholder: address, totalsupply : nat)\n\nasset allowance identified by addr_owner addr_spender to big_map {\n  addr_owner       : address;\n  addr_spender     : address;\n  amount           : nat;\n}\n\nasset ledger identified by holder to big_map {\n  holder     : address;\n  tokens     : nat = 0;\n} initialized by {\n  { holder = initialholder; tokens = totalsupply }\n}\n\nentry %transfer (%from : address, %to : address, value : nat) {\n  require {\n    r1 otherwise "NotEnoughBalance" : ledger[%from].tokens >= value;\n  }\n  effect {\n    if caller <> %from then (\n      var current = allowance[(%from, caller)].amount;\n      dofailif(current < value, ("NotEnoughAllowance", ((value, current))));\n      allowance.update((%from, caller), { amount -=  value });\n    );\n    ledger.update(%from, { tokens -= value });\n    ledger.addupdate(%to, { tokens += value });\n  }\n}\n\nentry approve(spender : address, value : nat) {\n  var k = (caller, spender);\n  if allowance.contains(k) then (\n    var previous = allowance[k].amount;\n    dofailif(previous > 0 and value > 0, (("UnsafeAllowanceChange", previous)));\n  );\n  allowance.addupdate( k, { amount = value });\n}\n\ngetter getAllowance (owner : address, spender : address) : nat {\n  return (allowance[(owner, spender)].amount)\n}\n\ngetter getBalance (owner : address) : nat {\n  return (if (ledger.contains(owner)) then ledger[owner].tokens else 0)\n}\n\ngetter getTotalSupply () : nat {\n  return totalsupply\n}\n'))),Object(a.b)(s.a,{value:"michelson",mdxType:"TabItem"},Object(a.b)("p",null,"The ",Object(a.b)(p.a,{to:"/docs/contract/programming-language#micheslon",mdxType:"Link"},"Michelson")," code is generated with version 1.2.3 of Archetype."),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),'# (Pair 10000000 (Pair {  } { Elt "tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG" 10000000 }))\n{\n  storage (pair (nat %totalsupply) (pair (big_map %allowance (pair address address) nat) (big_map %ledger address nat)));\n  parameter (or (pair %getAllowance (pair (address %owner) (address %spender)) (contract nat)) (or (pair %getBalance (address %owner) (contract nat)) (or (pair %getTotalSupply unit (contract nat)) (or (pair %transfer (address %from) (pair (address %to) (nat %value))) (pair %approve (address %spender) (nat %value))))));\n  code { NIL operation;\n         DIG 1;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { UNPAIR;\n             UNPAIR;\n             SWAP;\n             DIG 6;\n             DUP;\n             DUG 7;\n             DIG 3;\n             DUP;\n             DUG 4;\n             AMOUNT;\n             DIG 7;\n             DUP;\n             DUG 8;\n             DIG 4;\n             DUP;\n             DUG 5;\n             DIG 6;\n             DUP;\n             DUG 7;\n             PAIR;\n             GET;\n             IF_NONE\n               { PUSH string "GetNoneValue";\n                 FAILWITH }\n               {  };\n             TRANSFER_TOKENS;\n             CONS;\n             DIP { DIG 6; DROP };\n             DUG 6;\n             DROP 3;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { UNPAIR;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 AMOUNT;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 MEM;\n                 IF\n                   { DIG 5;\n                     DUP;\n                     DUG 6;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  } }\n                   { PUSH nat 0 };\n                 TRANSFER_TOKENS;\n                 CONS;\n                 DIP { DIG 5; DROP };\n                 DUG 5;\n                 DROP 2;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { IF_LEFT\n                   { UNPAIR;\n                     DROP;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     AMOUNT;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     TRANSFER_TOKENS;\n                     CONS;\n                     DIP { DIG 4; DROP };\n                     DUG 4;\n                     DROP;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR }\n                   { IF_LEFT\n                       { UNPAIR;\n                         SWAP;\n                         UNPAIR;\n                         SWAP;\n                         DUP;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         COMPARE;\n                         GE;\n                         NOT;\n                         IF\n                           { PUSH string "NotEnoughBalance";\n                             FAILWITH }\n                           {  };\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         SENDER;\n                         COMPARE;\n                         NEQ;\n                         IF\n                           { DIG 4;\n                             DUP;\n                             DUG 5;\n                             SENDER;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             PAIR;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             COMPARE;\n                             LT;\n                             IF\n                               { DUP;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 PAIR;\n                                 PUSH string "NotEnoughAllowance";\n                                 PAIR;\n                                 FAILWITH }\n                               {  };\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             SENDER;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             PAIR;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             PUSH int 0;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             INT;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             SUB;\n                             COMPARE;\n                             GE;\n                             IF\n                               { DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 INT;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 SUB;\n                                 ABS }\n                               { PUSH string "AssignNat";\n                                 FAILWITH };\n                             SOME;\n                             SENDER;\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             PAIR;\n                             UPDATE;\n                             DIP { DIG 6; DROP };\n                             DUG 6;\n                             DROP 2 }\n                           {  };\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         PUSH int 0;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         INT;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         SUB;\n                         COMPARE;\n                         GE;\n                         IF\n                           { DIG 2;\n                             DUP;\n                             DUG 3;\n                             INT;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             SUB;\n                             ABS }\n                           { PUSH string "AssignNat";\n                             FAILWITH };\n                         SOME;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         UPDATE;\n                         DIP { DIG 4; DROP };\n                         DUG 4;\n                         DROP;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         MEM;\n                         IF\n                           { DIG 3;\n                             DUP;\n                             DUG 4;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             ADD;\n                             SOME;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             UPDATE;\n                             DIP { DIG 4; DROP };\n                             DUG 4;\n                             DROP }\n                           { DIG 3;\n                             DUP;\n                             DUG 4;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             MEM;\n                             IF\n                               { PUSH string "KeyAlreadyExists";\n                                 FAILWITH }\n                               { DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 PUSH nat 0;\n                                 ADD;\n                                 SOME;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 UPDATE;\n                                 DIP { DIG 3; DROP };\n                                 DUG 3 } };\n                         DROP 3;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         DIG 1;\n                         PAIR }\n                       { UNPAIR;\n                         SWAP;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         SENDER;\n                         PAIR;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         MEM;\n                         IF\n                           { DIG 4;\n                             DUP;\n                             DUG 5;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             PUSH nat 0;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             COMPARE;\n                             GT;\n                             PUSH nat 0;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             COMPARE;\n                             GT;\n                             AND;\n                             IF\n                               { DUP;\n                                 PUSH string "UnsafeAllowanceChange";\n                                 PAIR;\n                                 FAILWITH }\n                               {  };\n                             DROP }\n                           {  };\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         SOME;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         UPDATE;\n                         DIP { DIG 4; DROP };\n                         DUG 4;\n                         DROP 3;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         DIG 1;\n                         PAIR } } } } };\n}\n'))),Object(a.b)(s.a,{value:"specification",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-archetype",metastring:'title="fa12.arl"',title:'"fa12.arl"'}),'specification {\n  s1: ledger.sum(tokens) = totalsupply;\n}\n\nspecification entry %transfer (%from : address, %to : address, value : nat) {\n  fails {\n    f0 with (msg : string) :\n      let some after_ledger_from = ledger[%from] in\n        msg = "NotEnoughBalance" and\n        after_ledger_from.tokens < value\n      otherwise true;\n    f1 with (msg : string * (nat * nat)) :\n      let some after_allowance_from_caller = allowance[(%from,caller)] in\n        msg = ("NotEnoughAllowance", ((value, after_allowance_from_caller.amount))) and\n        caller <> %from and\n        after_allowance_from_caller.amount < value\n      otherwise false;\n  }\n\n  (* LEDGER ASSET *)\n  postcondition transfer_p1 { (* effect on %from nbtokens *)\n    %from <> %to ->\n    let some before_ledger_from = before.ledger[%from] in\n    let some after_ledger_from  = ledger[%from] in\n    after_ledger_from = { before_ledger_from with\n      tokens = abs (before_ledger_from.tokens - value)\n    }\n    otherwise false otherwise false\n  }\n\n  postcondition transfer_p2 { (* effect on %to nbtokens *)\n    %from <> %to ->\n    let some after_ledger_to = ledger[%to] in\n    let some before_ledger_to = before.ledger[%to] in\n      after_ledger_to = { before_ledger_to with\n        tokens = (before_ledger_to.tokens + value)\n      }\n    otherwise\n      after_ledger_to = { holder = %to; tokens = value }\n    otherwise false (* %to ledger asset exists after transfer *) r\n  }\n\n  postcondition transfer_p3 {\n    %from = %to -> ledger = before.ledger\n  }\n\n  postcondition transfer_p4 { (* other ledger assets are unchanged *)\n    forall tokenholder in ledger,\n      tokenholder.holder <> %from ->\n      tokenholder.holder <> %to ->\n      before.ledger[tokenholder.holder] = some(tokenholder)\n  }\n\n  postcondition transfer_p5 { (* no ledger asset is removed *)\n    removed.ledger.isempty()\n  }\n\n  postcondition transfer_p6 { (* number of added asset may be one *)\n    let some before_to = before.ledger[%to] in\n      added.ledger.isempty()\n    otherwise\n      added.ledger = [ { holder = %to; tokens = value } ]\n  }\n\n  (* ALLOWANCE ASSET *)\n  postcondition transfer_p7 { (* effect on allowance *)\n    caller <> %from ->\n    let some before_from_caller = before.allowance[(%from,caller)] in\n    let some after_from_caller = allowance[(%from,caller)] in\n      before_from_caller.amount > value ->\n      after_from_caller = { before_from_caller with\n        amount = abs (before_from_caller.amount - value)\n      }\n    otherwise false\n    otherwise true\n  }\n\n  postcondition transfer_p8 { (* effect on allowance *)\n    caller = %from -> allowance = before.allowance\n  }\n\n  postcondition transfer_p9 { (* other allowance assets are unchanged *)\n    forall a in allowance,\n      a.addr_owner <> %from and a.addr_spender <> caller ->\n      before.allowance[(a.addr_owner, a.addr_spender)] = some(a)\n  }\n\n  postcondition transfer_p10 { (* no allowance is added or removed *)\n    removed.allowance.isempty() and added.allowance.isempty()\n  }\n\n  postcondition transfer_p11 { (* no operation generated *)\n    length (operations) = 0\n  }\n}\n\nspecification entry approve(spender : address, value : nat) {\n  fails {\n    f2 with (msg : (string * nat)) :\n      let some allowance_caller_spender = allowance[(caller, spender)] in\n        msg = ("UnsafeAllowanceChange", allowance_caller_spender.amount) and\n        value > 0 and\n        allowance_caller_spender.amount > 0\n      otherwise false;\n  }\n\n  postcondition approve_p1 { (* effect on allowance asset *)\n    let some after_allowance_caller_spender = allowance[(caller,spender)] in\n    let some before_allowance_caller_spender = before.allowance[(caller,spender)] in\n      after_allowance_caller_spender = { before_allowance_caller_spender with\n        amount = value\n      }\n    otherwise\n      after_allowance_caller_spender = { addr_owner = caller; addr_spender = spender; amount = value }\n    otherwise false\n  }\n\n  postcondition approve_p2 { (* other allowance assets are unchanged *)\n    forall a in allowance,\n      (a.addr_owner, a.addr_spender) <> (caller, spender) ->\n      before.allowance[(a.addr_owner, a.addr_spender)] = some(a)\n  }\n\n  postcondition approve_p3 { (* added allowance *)\n    let some allowance_caller_spender = before.allowance[(caller, spender)] in\n      added.allowance.isempty()\n    otherwise\n      added.allowance = [ { addr_owner = caller; addr_spender = spender; amount = value } ]\n  }\n\n  postcondition approve_p4 { (* no allowance asset is removed *)\n    removed.allowance.isempty()\n  }\n\n  postcondition approve_p5 {\n    ledger = before.ledger\n  }\n\n  postcondition approve_p6 { (*  no operation generated *)\n    length (operations) = 0\n  }\n}\n\nspecification getter getAllowance (owner : address, spender : address) {\n  postcondition getallowance_p1 { (* creates one op *)\n    length (operations) = 1\n  }\n\n  postcondition getallowance_p2 { (* assets are unchanged *)\n    ledger = before.ledger and allowance = before.allowance\n  }\n}\n\nspecification getter getBalance (owner : address) {\n  postcondition getbalance_p1 { (* creates one op *)\n    length (operations) = 1\n  }\n\n  postcondition getbalance_p2 { (* assets are unchanged *)\n    ledger = before.ledger and allowance = before.allowance\n  }\n}\n\nspecification getter getTotalSupply () {\n  postcondition gettotalsupply_p1 { (* creates one op *)\n    length (operations) = 1\n  }\n\n  postcondition gettotalsupply_p2 { (* assets are unchanged *)\n    ledger = before.ledger and allowance = before.allowance\n  }\n}\n')))))}d.isMDXComponent=!0},364:function(r,n,e){"use strict";e.d(n,"a",(function(){return m})),e.d(n,"f",(function(){return s})),e.d(n,"e",(function(){return o})),e.d(n,"b",(function(){return l})),e.d(n,"d",(function(){return g})),e.d(n,"c",(function(){return c}));var i=e(0),t=e.n(i),a=e(395),p=e(538);const[m,s,o,l,g,c]=Object(a.a)((function({appName:r}){const[{wallet:n,tezos:e,accountPkh:i},a]=t.a.useState((()=>({wallet:null,tezos:null,accountPkh:null}))),m=Boolean(e);t.a.useEffect((()=>p.a.onAvailabilityChange((n=>{a({wallet:n?new p.a(r):null,tezos:null,accountPkh:null})}))),[a,r]);const s=t.a.useCallback((async(r,e)=>{try{if(!n)throw new Error("Thanos Wallet not available");await n.connect(r,e);const i=n.toTezos(),t=await i.wallet.pkh();a({wallet:n,tezos:i,accountPkh:t})}catch(i){alert(`Failed to connect ThanosWallet: ${i.message}`)}}),[a,n]);return{wallet:n,tezos:e,accountPkh:i,ready:m,connect:s}}),(r=>r.wallet),(r=>r.tezos),(r=>r.accountPkh),(r=>r.ready),(r=>r.connect))},396:function(r,n,e){"use strict";e.d(n,"a",(function(){return a})),e.d(n,"b",(function(){return p}));var i=e(0),t=e(395);const[a,p]=Object(t.a)((function(){const[r,n]=Object(i.useState)({show:!1,severity:"info",msg:""});return{snackState:r,setInfoSnack:r=>{n({show:!0,severity:"info",msg:r})},setErrorSnack:r=>{n({show:!0,severity:"error",msg:r})},hideSnack:()=>{n((r=>({...r,show:!1})))}}}))},418:function(r,n,e){"use strict";(function(r){var i=e(421),t=e.n(i),a=e(423),p=e(0),m=e.n(p),s=e(360),o=e(362),l=e(598),g=e(363),c=e(585),D=e(539),d=e(583),P=e(364),I=e(527),U=e(396),G=e(540),b=e(528),u=e(225),O=e(605),A=e(602),f=e(593),N=e(592),E=e(529),S=e.n(E),h=function(r){if(Object(P.d)()){var n=Object(P.b)();return m.a.createElement(o.a,{container:!0,direction:"column",justify:"center",alignItems:"center"},m.a.createElement(g.a,{variant:"subtitle2"},"Connected with:"),m.a.createElement(g.a,{variant:"subtitle2",style:{fontFamily:"Courier Prime, monospace"}},n))}return m.a.createElement(o.a,{container:!0},m.a.createElement(o.a,{item:!0,xs:8},m.a.createElement(G.a,{main:r.main})),m.a.createElement(o.a,{item:!0,xs:2},m.a.createElement(O.a,{checked:r.main,onChange:function(n){r.setMain(n.target.checked)},name:"checkedB",color:"primary"})),m.a.createElement(o.a,{item:!0,xs:2},m.a.createElement(g.a,{variant:"subtitle2",style:{marginTop:"8px"}},"Mainnet")))};var R=function(r){return m.a.createElement(o.a,{container:!0,direction:"column",justify:"center",alignItems:"center"},m.a.createElement(g.a,{variant:"subtitle2"},"Contract available at:"),m.a.createElement(g.a,{component:u.a,to:"https://better-call.dev/"+(r.main?"mainnet":"edo2net")+"/"+r.contract+"/operations",variant:"subtitle2",style:{fontFamily:"Courier Prime, monospace"}},r.contract))};function T(n,e,i,t,a){var p={symbol:n,name:e,decimals:i,description:t,thumbnailUri:a};return r.from(JSON.stringify(p)).toString("hex")}var j=function(){var r=m.a.useState(""),n=r[0],e=r[1],i=m.a.useState(1e7),p=i[0],D=i[1],d=m.a.useState(""),I=d[0],G=d[1],u=m.a.useState(!1),O=u[0],E=u[1],j=m.a.useState("CMPL"),w=j[0],_=j[1],v=m.a.useState("Completium Token"),F=v[0],y=v[1],H=m.a.useState(1),W=H[0],C=H[1],M=m.a.useState("https://completium.com/img/logo_completium_128.png"),k=M[0],L=M[1],x=m.a.useState(!1),B=x[0],z=x[1],V=Object(U.b)(),K=V.setInfoSnack,q=V.setErrorSnack,J=V.hideSnack,Q=Object(P.e)(),Y=Object(P.d)(),X=function(){return n.length>0&(36!==(r=n).length|!r.startsWith("tz1"));var r},Z=function(){return!(Math.round(p)==p&p>0)},$=function(){var r=Object(a.a)(t.a.mark((function r(){var e,i,a;return t.a.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.prev=0,r.next=3,Q.wallet.originate({code:O?b.b:b.a,init:O?Object(b.d)(n,p,T(w,F,W,"",k)):Object(b.c)(n,p)}).send();case 3:return e=r.sent,i=e.opHash.substring(0,10)+"...",K("waiting for "+i+" to be confirmed ..."),r.next=8,e.contract();case 8:a=r.sent,J(),console.log("Origination completed for "+a.address+"."),setTimeout((function(){return G(a.address)}),5e3),r.next=19;break;case 14:r.prev=14,r.t0=r.catch(0),console.log(r.t0),q(r.t0.message),setTimeout(J,4e3);case 19:case"end":return r.stop()}}),r,null,[[0,14]])})));return function(){return r.apply(this,arguments)}}();return m.a.createElement(s.a,{style:{backgroundColor:"transparent",border:"1px solid #606770",marginTop:"20px",marginBottom:"20px"},raised:!1},m.a.createElement(o.a,{container:!0,style:{padding:22},spacing:3},m.a.createElement(o.a,{item:!0,xs:6},m.a.createElement(l.a,{onChange:function(r){e(r.target.value)},value:n,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"initalholder",label:"Initial Holder",error:X(),helperText:X()?"Invalid address format":""})),m.a.createElement(o.a,{item:!0,xs:6,style:{textAlign:"center",marginTop:"10px"}},m.a.createElement(h,{main:B,setMain:z})),m.a.createElement(o.a,{item:!0,xs:6},m.a.createElement(l.a,{type:"number",onChange:function(r){D(r.target.value)},error:Z(),helperText:Z()?"Invalid Natural Integer":"",value:p,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"totalsupply",label:"Total Supply"})),m.a.createElement(o.a,{item:!0,xs:6,style:{textAlign:"center",marginTop:"10px"}},""!==I?m.a.createElement(R,{contract:I,main:B}):m.a.createElement(c.a,{variant:"contained",color:"primary",disableElevation:!0,disabled:!Y|Z()|X()|0==n.length,onClick:$},"originate"))),m.a.createElement(A.a,{expanded:O,onChange:function(r,n){E(n)},style:{backgroundColor:"transparent"}},m.a.createElement(N.a,{expandIcon:m.a.createElement(S.a,null),"aria-controls":"panel4bh-content",id:"panel4bh-header"},m.a.createElement(g.a,{style:{marginLeft:"10px"}},"Metadata")),m.a.createElement(f.a,null,m.a.createElement(o.a,{container:!0,spacing:3,style:{marginLeft:"0px"}},m.a.createElement(o.a,{item:!0,xs:6},m.a.createElement(l.a,{onChange:function(r){_(r.target.value)},error:!1,helperText:"Token symbol, like 'USD' for United States Dollar.",value:w,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"symbol",label:"Symbol"})),m.a.createElement(o.a,{item:!0,xs:6},m.a.createElement(l.a,{onChange:function(r){y(r.target.value)},error:!1,helperText:"Token name, like 'Bitcoin' for BTC asset.",value:F,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"name",label:"Name"})),m.a.createElement(o.a,{item:!0,xs:6},m.a.createElement(l.a,{type:"number",onChange:function(r){C(r.target.value)},error:!1,helperText:"A number of decimal places after point.",value:W,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"decimals",label:"Decimals"})),m.a.createElement(o.a,{item:!0,xs:6},m.a.createElement(l.a,{onChange:function(r){L(r.target.value)},error:!1,helperText:"Image URL for token logo.",value:k,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"url",label:"Icon URL"}))))))};n.a=function(r){var n=m.a.useMemo((function(){return Object(D.a)({palette:{type:"dark",primary:{light:"#1dc5ff",main:"#00ACE7",dark:"#0a90bf",contrastText:"#fff"}}})}),[!0]);return m.a.createElement(P.a,{appName:"Completium FA 1.2"},m.a.createElement(U.a,null,m.a.createElement(d.a,{theme:n},m.a.createElement(j,null),m.a.createElement(I.a,null))))}}).call(this,e(243).Buffer)},427:function(r,n){},429:function(r,n){},498:function(r,n){},500:function(r,n){},513:function(r,n){},515:function(r,n){},527:function(r,n,e){"use strict";var i=e(3),t=e(0),a=e.n(t),p=e(603),m=e(600),s=e(301),o=e(396);function l(r){return a.a.createElement(m.a,Object(i.a)({elevation:6,variant:"filled"},r))}n.a=()=>{const{snackState:r}=Object(o.b)();Object(s.a)();return a.a.createElement(p.a,{open:r.show},a.a.createElement(l,{severity:r.severity},r.msg))}},528:function(r,n,e){"use strict";e.d(n,"a",(function(){return i})),e.d(n,"c",(function(){return t})),e.d(n,"b",(function(){return a})),e.d(n,"d",(function(){return p}));var i=[{prim:"storage",args:[{prim:"pair",args:[{prim:"nat",annots:["%totalsupply"]},{prim:"pair",args:[{prim:"big_map",args:[{prim:"pair",args:[{prim:"address"},{prim:"address"}]},{prim:"nat"}],annots:["%allowance"]},{prim:"big_map",args:[{prim:"address"},{prim:"nat"}],annots:["%ledger"]}]}]}]},{prim:"parameter",args:[{prim:"or",args:[{prim:"pair",args:[{prim:"pair",args:[{prim:"address",annots:["%owner"]},{prim:"address",annots:["%spender"]}]},{prim:"contract",args:[{prim:"nat"}]}],annots:["%getAllowance"]},{prim:"or",args:[{prim:"pair",args:[{prim:"address",annots:["%owner"]},{prim:"contract",args:[{prim:"nat"}]}],annots:["%getBalance"]},{prim:"or",args:[{prim:"pair",args:[{prim:"unit"},{prim:"contract",args:[{prim:"nat"}]}],annots:["%getTotalSupply"]},{prim:"or",args:[{prim:"pair",args:[{prim:"address",annots:["%from"]},{prim:"pair",args:[{prim:"address",annots:["%to"]},{prim:"nat",annots:["%value"]}]}],annots:["%transfer"]},{prim:"pair",args:[{prim:"address",annots:["%spender"]},{prim:"nat",annots:["%value"]}],annots:["%approve"]}]}]}]}]}]},{prim:"code",args:[[{prim:"NIL",args:[{prim:"operation"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"}]]},{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"AMOUNT"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"PAIR"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"AMOUNT"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]}],[{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]}]]},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"2"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"AMOUNT"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DUP"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"COMPARE"},{prim:"GE"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"NotEnoughBalance"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SENDER"},{prim:"COMPARE"},{prim:"NEQ"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"SENDER"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"PAIR"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"COMPARE"},{prim:"LT"},{prim:"IF",args:[[{prim:"DUP"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"PAIR"},{prim:"PUSH",args:[{prim:"string"},{string:"NotEnoughAllowance"}]},{prim:"PAIR"},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"SENDER"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"PAIR"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"INT"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SUB"},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"INT"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SUB"},{prim:"ABS"}],[{prim:"PUSH",args:[{prim:"string"},{string:"AssignNat"}]},{prim:"FAILWITH"}]]},{prim:"SOME"},{prim:"SENDER"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"PAIR"},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"2"}]}],[]]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"INT"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SUB"},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"INT"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SUB"},{prim:"ABS"}],[{prim:"PUSH",args:[{prim:"string"},{string:"AssignNat"}]},{prim:"FAILWITH"}]]},{prim:"SOME"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"ADD"},{prim:"SOME"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}],[{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"KeyAlreadyExists"}]},{prim:"FAILWITH"}],[{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"ADD"},{prim:"SOME"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"3"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"3"}]}]]}]]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"SENDER"},{prim:"PAIR"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"COMPARE"},{prim:"GT"},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"COMPARE"},{prim:"GT"},{prim:"AND"},{prim:"IF",args:[[{prim:"DUP"},{prim:"PUSH",args:[{prim:"string"},{string:"UnsafeAllowanceChange"}]},{prim:"PAIR"},{prim:"FAILWITH"}],[]]},{prim:"DROP",args:[{int:"1"}]}],[]]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SOME"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}]]}]]}]]}]]}]]}],t=function(r,n){return{prim:"Pair",args:[{int:n.toString()},{prim:"Pair",args:[[],[{prim:"Elt",args:[{string:r},{int:n.toString()}]}]]}]}},a=[{prim:"storage",args:[{prim:"pair",args:[{prim:"nat",annots:["%totalsupply"]},{prim:"pair",args:[{prim:"big_map",args:[{prim:"pair",args:[{prim:"address"},{prim:"address"}]},{prim:"nat"}],annots:["%allowance"]},{prim:"pair",args:[{prim:"big_map",args:[{prim:"address"},{prim:"nat"}],annots:["%ledger"]},{prim:"big_map",args:[{prim:"string"},{prim:"bytes"}],annots:["%metadata"]}]}]}]}]},{prim:"parameter",args:[{prim:"or",args:[{prim:"pair",args:[{prim:"pair",args:[{prim:"address",annots:["%owner"]},{prim:"address",annots:["%spender"]}]},{prim:"contract",args:[{prim:"nat"}]}],annots:["%getAllowance"]},{prim:"or",args:[{prim:"pair",args:[{prim:"address",annots:["%owner"]},{prim:"contract",args:[{prim:"nat"}]}],annots:["%getBalance"]},{prim:"or",args:[{prim:"pair",args:[{prim:"unit"},{prim:"contract",args:[{prim:"nat"}]}],annots:["%getTotalSupply"]},{prim:"or",args:[{prim:"pair",args:[{prim:"address",annots:["%from"]},{prim:"pair",args:[{prim:"address",annots:["%to"]},{prim:"nat",annots:["%value"]}]}],annots:["%transfer"]},{prim:"pair",args:[{prim:"address",annots:["%spender"]},{prim:"nat",annots:["%value"]}],annots:["%approve"]}]}]}]}]}]},{prim:"code",args:[[{prim:"NIL",args:[{prim:"operation"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"}]]},{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"AMOUNT"},{prim:"DIG",args:[{int:"8"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"9"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"PAIR"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"7"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"7"}]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"AMOUNT"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]}],[{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]}]]},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"2"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"AMOUNT"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DUP"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"COMPARE"},{prim:"GE"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"NotEnoughBalance"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SENDER"},{prim:"COMPARE"},{prim:"NEQ"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"SENDER"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"PAIR"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"COMPARE"},{prim:"LT"},{prim:"IF",args:[[{prim:"DUP"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"PAIR"},{prim:"PUSH",args:[{prim:"string"},{string:"NotEnoughAllowance"}]},{prim:"PAIR"},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"SENDER"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"PAIR"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"INT"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SUB"},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"INT"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SUB"},{prim:"ABS"}],[{prim:"PUSH",args:[{prim:"string"},{string:"AssignNat"}]},{prim:"FAILWITH"}]]},{prim:"SOME"},{prim:"SENDER"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"PAIR"},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"7"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"7"}]},{prim:"DROP",args:[{int:"2"}]}],[]]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"INT"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SUB"},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"INT"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SUB"},{prim:"ABS"}],[{prim:"PUSH",args:[{prim:"string"},{string:"AssignNat"}]},{prim:"FAILWITH"}]]},{prim:"SOME"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"ADD"},{prim:"SOME"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}],[{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"KeyAlreadyExists"}]},{prim:"FAILWITH"}],[{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"ADD"},{prim:"SOME"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]}]]}]]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"SENDER"},{prim:"PAIR"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"COMPARE"},{prim:"GT"},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"COMPARE"},{prim:"GT"},{prim:"AND"},{prim:"IF",args:[[{prim:"DUP"},{prim:"PUSH",args:[{prim:"string"},{string:"UnsafeAllowanceChange"}]},{prim:"PAIR"},{prim:"FAILWITH"}],[]]},{prim:"DROP",args:[{int:"1"}]}],[]]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SOME"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}]]}]]}]]}]]}]]}],p=function(r,n,e){return{prim:"Pair",args:[{int:n.toString()},{prim:"Pair",args:[[],{prim:"Pair",args:[[{prim:"Elt",args:[{string:r},{int:n.toString()}]}],[{prim:"Elt",args:[{string:""},{bytes:"74657a6f732d73746f726167653a68657265"}]},{prim:"Elt",args:[{string:"here"},{bytes:e}]}]]}]}]}}},540:function(r,n,e){"use strict";var i=e(0),t=e.n(i),a=e(364);var p=e(585),m=e(591),s=e(301);n.a=r=>{const n=Object(s.a)(),e=Object(a.d)(),i=Object(a.f)(),o=Object(a.c)(),l=t.a.useCallback((r=>async()=>{try{await o(r?"mainnet":"edo2net")}catch(n){alert(n.message)}}),[o]);return e?t.a.createElement("div",null):i?t.a.createElement(p.a,{variant:"outlined",color:n.palette.text.primary,onClick:l(r.main)},"connect to wallet"):t.a.createElement(m.a,{href:"https://templewallet.com/",rel:"noopener",underline:"none"},t.a.createElement(p.a,{variant:"contained",disableElevation:!0,style:{backgroundColor:"#ed8936",color:"white",fontWeight:"bold"}},"install Temple"))}}}]);