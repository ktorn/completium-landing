"use strict";(self.webpackChunkcompletium_landing=self.webpackChunkcompletium_landing||[]).push([[3951],{8215:function(n,e,t){var a=t(7294);e.Z=function(n){var e=n.children,t=n.hidden,r=n.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:r},e)}},6396:function(n,e,t){t.d(e,{Z:function(){return U}});var a=t(7462),r=t(7294),D=t(2389),i=t(9443);var l=function(){var n=(0,r.useContext)(i.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},s=t(1968),o=t(6010),I="tabItem_1uMI";function P(n){var e,t,a,D=n.lazy,i=n.block,P=n.defaultValue,U=n.values,d=n.groupId,G=n.className,u=r.Children.map(n.children,(function(n){if((0,r.isValidElement)(n)&&void 0!==n.props.value)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),N=null!=U?U:u.map((function(n){var e=n.props;return{value:e.value,label:e.label}})),m=(0,s.lx)(N,(function(n,e){return n.value===e.value}));if(m.length>0)throw new Error('Docusaurus error: Duplicate values "'+m.map((function(n){return n.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var p=null===P?P:null!=(e=null!=P?P:null==(t=u.find((function(n){return n.props.default})))?void 0:t.props.value)?e:null==(a=u[0])?void 0:a.props.value;if(null!==p&&!N.some((function(n){return n.value===p})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+p+'" but none of its children has the corresponding value. Available values are: '+N.map((function(n){return n.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var c=l(),R=c.tabGroupChoices,A=c.setTabGroupChoices,C=(0,r.useState)(p),S=C[0],O=C[1],E=[],k=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var g=R[d];null!=g&&g!==S&&N.some((function(n){return n.value===g}))&&O(g)}var T=function(n){var e=n.currentTarget,t=E.indexOf(e),a=N[t].value;a!==S&&(k(e),O(a),null!=d&&A(d,a))},f=function(n){var e,t=null;switch(n.key){case"ArrowRight":var a=E.indexOf(n.currentTarget)+1;t=E[a]||E[0];break;case"ArrowLeft":var r=E.indexOf(n.currentTarget)-1;t=E[r]||E[E.length-1]}null==(e=t)||e.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":i},G)},N.map((function(n){var e=n.value,t=n.label;return r.createElement("li",{role:"tab",tabIndex:S===e?0:-1,"aria-selected":S===e,className:(0,o.Z)("tabs__item",I,{"tabs__item--active":S===e}),key:e,ref:function(n){return E.push(n)},onKeyDown:f,onFocus:T,onClick:T},null!=t?t:e)}))),D?(0,r.cloneElement)(u.filter((function(n){return n.props.value===S}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},u.map((function(n,e){return(0,r.cloneElement)(n,{key:e,hidden:n.props.value!==S})}))))}function U(n){var e=(0,D.Z)();return r.createElement(P,(0,a.Z)({key:String(e)},n))}},1633:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return I},contentTitle:function(){return P},metadata:function(){return U},toc:function(){return d},default:function(){return u}});var a=t(7462),r=t(3366),D=(t(7294),t(3905)),i=t(9960),l=t(6396),s=t(8215),o=["components"],I={id:"template9",title:"Competition",sidebar_label:"Competition",slug:"/templates/competition"},P=void 0,U={unversionedId:"templates/template9",id:"templates/template9",title:"Competition",description:"Introduction",source:"@site/docs/templates/template9.md",sourceDirName:"templates",slug:"/templates/competition",permalink:"/docs/templates/competition",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template9.md",tags:[],version:"current",frontMatter:{id:"template9",title:"Competition",sidebar_label:"Competition",slug:"/templates/competition"},sidebar:"templates",previous:{title:"Idea box",permalink:"/docs/templates/ideabox"},next:{title:"Auction",permalink:"/docs/templates/auction"}},d=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[],level:3},{value:"Entrypoints",id:"entrypoints",children:[],level:3}],level:2},{value:"Code",id:"code",children:[],level:2}],G={toc:d};function u(n){var e=n.components,t=(0,r.Z)(n,o);return(0,D.kt)("wrapper",(0,a.Z)({},G,t,{components:e,mdxType:"MDXLayout"}),(0,D.kt)("h2",{id:"introduction"},"Introduction"),(0,D.kt)("p",null,"This contract collects competitors' scores, and distribute prize to top scores. Submitted scores must be signed by an external oracle to be registered."),(0,D.kt)("p",null,"You may see this contract in action in the ",(0,D.kt)(i.Z,{to:"/docs/dapp-game/",mdxType:"Link"},"2048 competition")," DApp example."),(0,D.kt)("h2",{id:"api"},"API"),(0,D.kt)("h3",{id:"storage"},"Storage"),(0,D.kt)("table",null,(0,D.kt)("thead",{parentName:"table"},(0,D.kt)("tr",{parentName:"thead"},(0,D.kt)("th",{parentName:"tr",align:null},"Name"),(0,D.kt)("th",{parentName:"tr",align:null},"Type"),(0,D.kt)("th",{parentName:"tr",align:null},"Description"))),(0,D.kt)("tbody",{parentName:"table"},(0,D.kt)("tr",{parentName:"tbody"},(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"organizer")),(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"address")),(0,D.kt)("td",{parentName:"tr",align:null},"Address of the organizer.")),(0,D.kt)("tr",{parentName:"tbody"},(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"prize")),(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"tez")),(0,D.kt)("td",{parentName:"tr",align:null},"Prize value in tez.")),(0,D.kt)("tr",{parentName:"tbody"},(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"oracle")),(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"key")),(0,D.kt)("td",{parentName:"tr",align:null},"Key of the score oracle.")),(0,D.kt)("tr",{parentName:"tbody"},(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"submission")),(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"collection")),(0,D.kt)("td",{parentName:"tr",align:null},"A submission is defined by:",(0,D.kt)("ul",null,(0,D.kt)("li",null,"a competitor address"),(0,D.kt)("li",null,"a score"),(0,D.kt)("li",null,"a timestamp")))),(0,D.kt)("tr",{parentName:"tbody"},(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"_state")),(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"states")),(0,D.kt)("td",{parentName:"tr",align:null},"Contract state, one of ",(0,D.kt)("inlineCode",{parentName:"td"},"Created"),", ",(0,D.kt)("inlineCode",{parentName:"td"},"InProgress"),", ",(0,D.kt)("inlineCode",{parentName:"td"},"Closed"),".")))),(0,D.kt)("h3",{id:"entrypoints"},"Entrypoints"),(0,D.kt)("table",null,(0,D.kt)("thead",{parentName:"table"},(0,D.kt)("tr",{parentName:"thead"},(0,D.kt)("th",{parentName:"tr",align:null},"Name"),(0,D.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,D.kt)("th",{parentName:"tr",align:null},"Description"))),(0,D.kt)("tbody",{parentName:"table"},(0,D.kt)("tr",{parentName:"tbody"},(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"confirmed")),(0,D.kt)("td",{parentName:"tr",align:null}),(0,D.kt)("td",{parentName:"tr",align:null},"Called by ",(0,D.kt)("inlineCode",{parentName:"td"},"organizer")," to open the competition. Prize must be transferred.")),(0,D.kt)("tr",{parentName:"tbody"},(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"submit")),(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"packed_score"),", ",(0,D.kt)("inlineCode",{parentName:"td"},"signed_score")),(0,D.kt)("td",{parentName:"tr",align:null},"Adds a submission; ",(0,D.kt)("inlineCode",{parentName:"td"},"packed_score")," is packed version of the pair ",(0,D.kt)("em",{parentName:"td"},"competitor address")," and ",(0,D.kt)("em",{parentName:"td"},"score"),"; ",(0,D.kt)("inlineCode",{parentName:"td"},"signed_score")," is this packed data signed by ",(0,D.kt)("inlineCode",{parentName:"td"},"oracle"),". ",(0,D.kt)("p",null),"It fails if the data is not signed by ",(0,D.kt)("inlineCode",{parentName:"td"},"oracle"),"; it updates the score of the competitor if score already exists.")),(0,D.kt)("tr",{parentName:"tbody"},(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"close")),(0,D.kt)("td",{parentName:"tr",align:null}),(0,D.kt)("td",{parentName:"tr",align:null},"Sets contract state to ",(0,D.kt)("inlineCode",{parentName:"td"},"Closed")," and distribute prize to top scores: ",(0,D.kt)("ul",null,(0,D.kt)("li",null,(0,D.kt)("em",{parentName:"td"},"50%"),", ",(0,D.kt)("em",{parentName:"td"},"30%"),", ",(0,D.kt)("em",{parentName:"td"},"20%")," if more than 3 submissions"),(0,D.kt)("li",null,(0,D.kt)("em",{parentName:"td"},"60%"),", ",(0,D.kt)("em",{parentName:"td"},"40%")," if 2 submissions"),(0,D.kt)("li",null,(0,D.kt)("em",{parentName:"td"},"100%")," if only one submission")))))),(0,D.kt)("h2",{id:"code"},"Code"),(0,D.kt)(l.Z,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"}],mdxType:"Tabs"},(0,D.kt)(s.Z,{value:"archetype",mdxType:"TabItem"},(0,D.kt)("pre",null,(0,D.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="competition.arl"',title:'"competition.arl"'},'archetype competition(\n  organizer   : address,\n  prize       : tez,\n  oracle      : key,\n)\n\nasset submission {\n  competitor : address;\n  score      : nat;\n  timestamp  : date;\n}\n\n(* state machine *)\nstates =\n | Created     initial\n | InProgress\n | Closed\n\ntransition confirm () {\n  called by organizer\n  from Created to InProgress\n  when { transferred = prize }\n}\n\nentry submit (packed_score : bytes, signed_score : signature) {\n  require {\n    c1 : state = InProgress;\n  }\n  effect {\n    if check_signature(oracle, signed_score, packed_score) then (\n      match unpack<address * nat>(packed_score) with\n      | some(s) ->\n        submission.addupdate(s[0], {\n          score = s[1];\n          timestamp = now\n        })\n      | none -> fail("CANNOT_UNPACK_SCORE")\n      end\n    ) else fail("NOT_SIGNED_BY_ORACLE");\n  }\n}\n\ntransition close () {\n  called by organizer\n  from InProgress to Closed\n  with effect {\n    var submissions = submission.sort(desc(score), timestamp);\n    if submissions.count() >= 3 then begin\n      var first  = submissions.nth(0);\n      var second = submissions.nth(1);\n      var third  = submissions.nth(2);\n      var q1 = 50% * prize;\n      var q2 = 30% * prize;\n      var q3 = 20% * prize;\n      transfer q1 to first;\n      transfer q2 to second;\n      transfer q3 to third;\n      transfer (prize - q1 - q2 - q3) to organizer\n    end else if submissions.count() >= 2 then begin\n      var first  = submissions.nth(0);\n      var second = submissions.nth(1);\n      var q1 = 60% * prize;\n      var q2 = 40% * prize;\n      transfer q1 to first;\n      transfer q2 to second;\n      transfer (prize - q1 - q2) to organizer\n    end else if submissions.count() >= 1 then begin\n      var first = submissions.nth(0);\n      transfer prize to first\n    end else transfer prize to organizer\n  }\n}\n'))),(0,D.kt)(s.Z,{value:"michelson",mdxType:"TabItem"},(0,D.kt)("pre",null,(0,D.kt)("code",{parentName:"pre",className:"language-js"},'# (Pair organizer (Pair prize (Pair oracle (Pair 0 {  }))))\n{\n  storage (pair (address %organizer) (pair (mutez %prize) (pair (key %oracle) (pair (nat %_state) (map %submission address (pair (nat %score) (timestamp %timestamp)))))));\n  parameter (or (unit %confirm) (or (pair %submit (bytes %packed_score) (signature %signed_score)) (unit %close)));\n  code { NIL operation;\n         DIG 1;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { DROP;\n             DIG 4;\n             DUP;\n             DUG 5;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             DIG 1;\n             DUP;\n             DUG 2;\n             DUP;\n             PUSH nat 0;\n             COMPARE;\n             EQ;\n             IF\n               { DIG 4;\n                 DUP;\n                 DUG 5;\n                 AMOUNT;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { PUSH nat 1;\n                     DIP { DIG 2; DROP };\n                     DUG 2 }\n                   {  } }\n               { PUSH string "InvalidState";\n                 FAILWITH };\n             DROP;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { UNPAIR;\n                 SWAP;\n                 PUSH nat 1;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCondition: c1";\n                     FAILWITH }\n                   {  };\n                 DIG 1;\n                 DUP;\n                 DUG 2;\n                 DIG 1;\n                 DUP;\n                 DUG 2;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 CHECK_SIGNATURE;\n                 IF\n                   { DIG 1;\n                     DUP;\n                     DUG 2;\n                     UNPACK (pair address nat);\n                     IF_NONE\n                       { PUSH string "CANNOT_UNPACK_SCORE";\n                         FAILWITH }\n                       { DIG 3;\n                         DUP;\n                         DUG 4;\n                         NOW;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         CDR;\n                         PAIR;\n                         SOME;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         CAR;\n                         UPDATE;\n                         DIP { DIG 3; DROP };\n                         DUG 3;\n                         DROP } }\n                   { PUSH string "NOT_SIGNED_BY_ORACLE";\n                     FAILWITH };\n                 DROP 2;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { DROP;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 SENDER;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCaller";\n                     FAILWITH }\n                   {  };\n                 DIG 1;\n                 DUP;\n                 DUG 2;\n                 DUP;\n                 PUSH nat 1;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { NIL address;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     ITER { UNPAIR;\n                            NIL address;\n                            DIG 1;\n                            DUP;\n                            DUG 2;\n                            SOME;\n                            PAIR;\n                            DIG 3;\n                            DUP;\n                            DUG 4;\n                            ITER { DIG 1;\n                                   DUP;\n                                   DUG 2;\n                                   CAR;\n                                   DIG 2;\n                                   DUP;\n                                   DUG 3;\n                                   CDR;\n                                   DIG 1;\n                                   DUP;\n                                   DUG 2;\n                                   IF_NONE\n                                     { DUP;\n                                       DIG 3;\n                                       DUP;\n                                       DUG 4;\n                                       CONS;\n                                       DIG 2;\n                                       DUP;\n                                       DUG 3;\n                                       PAIR }\n                                     { PUSH int 0;\n                                       DIG 10;\n                                       DUP;\n                                       DUG 11;\n                                       DIG 5;\n                                       DUP;\n                                       DUG 6;\n                                       GET;\n                                       IF_NONE\n                                         { PUSH string "GetNoneValue";\n                                           FAILWITH }\n                                         {  };\n                                       DIG 8;\n                                       DUP;\n                                       DUG 9;\n                                       CAR;\n                                       DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       CAR;\n                                       COMPARE;\n                                       LT;\n                                       IF\n                                         { PUSH int 1 }\n                                         { DIG 8;\n                                           DUP;\n                                           DUG 9;\n                                           CDR;\n                                           DIG 1;\n                                           DUP;\n                                           DUG 2;\n                                           CDR;\n                                           COMPARE;\n                                           GT;\n                                           IF\n                                             { PUSH int 1 }\n                                             { PUSH int 0 } };\n                                       DIP { DROP };\n                                       COMPARE;\n                                       GT;\n                                       IF\n                                         { DIG 1;\n                                           DUP;\n                                           DUG 2;\n                                           DIG 6;\n                                           DUP;\n                                           DUG 7;\n                                           CONS;\n                                           DIG 4;\n                                           DUP;\n                                           DUG 5;\n                                           CONS;\n                                           NONE address;\n                                           PAIR }\n                                         { DIG 1;\n                                           DUP;\n                                           DUG 2;\n                                           DIG 4;\n                                           DUP;\n                                           DUG 5;\n                                           CONS;\n                                           DIG 3;\n                                           DUP;\n                                           DUG 4;\n                                           PAIR };\n                                       SWAP;\n                                       DROP };\n                                   DIP { DROP };\n                                   DIP { DROP };\n                                   DIP { DIG 1; DROP };\n                                   DUG 1;\n                                   DROP };\n                            DUP;\n                            CAR;\n                            DIG 1;\n                            DUP;\n                            DUG 2;\n                            CDR;\n                            NIL address;\n                            DIG 2;\n                            DUP;\n                            DUG 3;\n                            IF_NONE\n                              { DIG 1;\n                                DUP;\n                                DUG 2 }\n                              { DIG 2;\n                                DUP;\n                                DUG 3;\n                                DIG 6;\n                                DUP;\n                                DUG 7;\n                                CONS;\n                                SWAP;\n                                DROP };\n                            ITER { DIG 1;\n                                   DUP;\n                                   DUG 2;\n                                   DIG 1;\n                                   DUP;\n                                   DUG 2;\n                                   CONS;\n                                   DIP { DIG 1; DROP };\n                                   DUG 1;\n                                   DROP };\n                            DIP { DROP };\n                            DIP { DROP };\n                            DIP { DROP };\n                            DIP { DIG 2; DROP };\n                            DUG 2;\n                            DROP 2 };\n                     PUSH nat 3;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     SIZE;\n                     COMPARE;\n                     GE;\n                     IF\n                       { NONE address;\n                         PUSH nat 0;\n                         PAIR;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         ITER { PUSH nat 0;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                CAR;\n                                COMPARE;\n                                EQ;\n                                IF\n                                  { DUP;\n                                    SOME;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR }\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CDR;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR };\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         CDR;\n                         IF_NONE\n                           { PUSH string "NoneValue";\n                             FAILWITH }\n                           {  };\n                         NONE address;\n                         PUSH nat 0;\n                         PAIR;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         ITER { PUSH nat 1;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                CAR;\n                                COMPARE;\n                                EQ;\n                                IF\n                                  { DUP;\n                                    SOME;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR }\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CDR;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR };\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         CDR;\n                         IF_NONE\n                           { PUSH string "NoneValue";\n                             FAILWITH }\n                           {  };\n                         NONE address;\n                         PUSH nat 0;\n                         PAIR;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         ITER { PUSH nat 2;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                CAR;\n                                COMPARE;\n                                EQ;\n                                IF\n                                  { DUP;\n                                    SOME;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR }\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CDR;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR };\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         CDR;\n                         IF_NONE\n                           { PUSH string "NoneValue";\n                             FAILWITH }\n                           {  };\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         PUSH nat 2;\n                         PUSH int 1;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         DIG 9;\n                         DUP;\n                         DUG 10;\n                         PUSH nat 10;\n                         PUSH int 3;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         DIG 10;\n                         DUP;\n                         DUG 11;\n                         PUSH nat 5;\n                         PUSH int 1;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         DIG 13;\n                         DUP;\n                         DUG 14;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 13; DROP };\n                         DUG 13;\n                         DIG 13;\n                         DUP;\n                         DUG 14;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 13; DROP };\n                         DUG 13;\n                         DIG 13;\n                         DUP;\n                         DUG 14;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 13; DROP };\n                         DUG 13;\n                         DIG 13;\n                         DUP;\n                         DUG 14;\n                         DIG 13;\n                         DUP;\n                         DUG 14;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 16;\n                         DUP;\n                         DUG 17;\n                         SUB;\n                         SUB;\n                         SUB;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 13; DROP };\n                         DUG 13;\n                         DROP 6 }\n                       { PUSH nat 2;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         SIZE;\n                         COMPARE;\n                         GE;\n                         IF\n                           { NONE address;\n                             PUSH nat 0;\n                             PAIR;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             ITER { PUSH nat 0;\n                                    DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    CAR;\n                                    COMPARE;\n                                    EQ;\n                                    IF\n                                      { DUP;\n                                        SOME;\n                                        PUSH nat 1;\n                                        DIG 3;\n                                        DUP;\n                                        DUG 4;\n                                        CAR;\n                                        ADD;\n                                        PAIR }\n                                      { DIG 1;\n                                        DUP;\n                                        DUG 2;\n                                        CDR;\n                                        PUSH nat 1;\n                                        DIG 3;\n                                        DUP;\n                                        DUG 4;\n                                        CAR;\n                                        ADD;\n                                        PAIR };\n                                    DIP { DIG 1; DROP };\n                                    DUG 1;\n                                    DROP };\n                             CDR;\n                             IF_NONE\n                               { PUSH string "NoneValue";\n                                 FAILWITH }\n                               {  };\n                             NONE address;\n                             PUSH nat 0;\n                             PAIR;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             ITER { PUSH nat 1;\n                                    DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    CAR;\n                                    COMPARE;\n                                    EQ;\n                                    IF\n                                      { DUP;\n                                        SOME;\n                                        PUSH nat 1;\n                                        DIG 3;\n                                        DUP;\n                                        DUG 4;\n                                        CAR;\n                                        ADD;\n                                        PAIR }\n                                      { DIG 1;\n                                        DUP;\n                                        DUG 2;\n                                        CDR;\n                                        PUSH nat 1;\n                                        DIG 3;\n                                        DUP;\n                                        DUG 4;\n                                        CAR;\n                                        ADD;\n                                        PAIR };\n                                    DIP { DIG 1; DROP };\n                                    DUG 1;\n                                    DROP };\n                             CDR;\n                             IF_NONE\n                               { PUSH string "NoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             PUSH nat 5;\n                             PUSH int 3;\n                             PAIR;\n                             PAIR;\n                             UNPAIR;\n                             UNPAIR;\n                             ABS;\n                             DIG 2;\n                             MUL;\n                             EDIV;\n                             IF_NONE\n                               { PUSH string "DivByZero";\n                                 FAILWITH }\n                               {  };\n                             CAR;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             PUSH nat 5;\n                             PUSH int 2;\n                             PAIR;\n                             PAIR;\n                             UNPAIR;\n                             UNPAIR;\n                             ABS;\n                             DIG 2;\n                             MUL;\n                             EDIV;\n                             IF_NONE\n                               { PUSH string "DivByZero";\n                                 FAILWITH }\n                               {  };\n                             CAR;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             CONTRACT unit;\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             UNIT;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 11; DROP };\n                             DUG 11;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             CONTRACT unit;\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             UNIT;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 11; DROP };\n                             DUG 11;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             CONTRACT unit;\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             DIG 13;\n                             DUP;\n                             DUG 14;\n                             SUB;\n                             SUB;\n                             UNIT;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 11; DROP };\n                             DUG 11;\n                             DROP 4 }\n                           { PUSH nat 1;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             SIZE;\n                             COMPARE;\n                             GE;\n                             IF\n                               { NONE address;\n                                 PUSH nat 0;\n                                 PAIR;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 ITER { PUSH nat 0;\n                                        DIG 2;\n                                        DUP;\n                                        DUG 3;\n                                        CAR;\n                                        COMPARE;\n                                        EQ;\n                                        IF\n                                          { DUP;\n                                            SOME;\n                                            PUSH nat 1;\n                                            DIG 3;\n                                            DUP;\n                                            DUG 4;\n                                            CAR;\n                                            ADD;\n                                            PAIR }\n                                          { DIG 1;\n                                            DUP;\n                                            DUG 2;\n                                            CDR;\n                                            PUSH nat 1;\n                                            DIG 3;\n                                            DUP;\n                                            DUG 4;\n                                            CAR;\n                                            ADD;\n                                            PAIR };\n                                        DIP { DIG 1; DROP };\n                                        DUG 1;\n                                        DROP };\n                                 CDR;\n                                 IF_NONE\n                                   { PUSH string "NoneValue";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 8;\n                                 DUP;\n                                 DUG 9;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 CONTRACT unit;\n                                 IF_NONE\n                                   { PUSH string "BadContract";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 8;\n                                 DUP;\n                                 DUG 9;\n                                 UNIT;\n                                 TRANSFER_TOKENS;\n                                 CONS;\n                                 DIP { DIG 8; DROP };\n                                 DUG 8;\n                                 DROP }\n                               { DIG 7;\n                                 DUP;\n                                 DUG 8;\n                                 DIG 7;\n                                 DUP;\n                                 DUG 8;\n                                 CONTRACT unit;\n                                 IF_NONE\n                                   { PUSH string "BadContract";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 7;\n                                 DUP;\n                                 DUG 8;\n                                 UNIT;\n                                 TRANSFER_TOKENS;\n                                 CONS;\n                                 DIP { DIG 7; DROP };\n                                 DUG 7 } } };\n                     DROP;\n                     PUSH nat 2;\n                     DIP { DIG 2; DROP };\n                     DUG 2 }\n                   { PUSH string "InvalidState";\n                     FAILWITH };\n                 DROP;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR } } };\n}\n')))))}u.isMDXComponent=!0}}]);