(self.webpackChunkcompletium_landing=self.webpackChunkcompletium_landing||[]).push([[8669],{8215:function(n,e,t){"use strict";var a=t(7294);e.Z=function(n){var e=n.children,t=n.hidden,i=n.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:i},e)}},5064:function(n,e,t){"use strict";t.d(e,{Z:function(){return I}});var a=t(7294),i=t(9443);var D=function(){var n=(0,a.useContext)(i.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},r=t(6010),l="tabItem_1uMI",o="tabItemActive_2DSg";var U=37,G=39;var I=function(n){var e=n.lazy,t=n.block,i=n.defaultValue,I=n.values,P=n.groupId,m=n.className,d=D(),s=d.tabGroupChoices,u=d.setTabGroupChoices,p=(0,a.useState)(i),c=p[0],N=p[1],E=a.Children.toArray(n.children),A=[];if(null!=P){var R=s[P];null!=R&&R!==c&&I.some((function(n){return n.value===R}))&&N(R)}var k=function(n){var e=n.currentTarget,t=A.indexOf(e),a=I[t].value;N(a),null!=P&&(u(P,a),setTimeout((function(){var n,t,a,i,D,r,l,U;(n=e.getBoundingClientRect(),t=n.top,a=n.left,i=n.bottom,D=n.right,r=window,l=r.innerHeight,U=r.innerWidth,t>=0&&D<=U&&i<=l&&a>=0)||(e.scrollIntoView({block:"center",behavior:"smooth"}),e.classList.add(o),setTimeout((function(){return e.classList.remove(o)}),2e3))}),150))},g=function(n){var e,t;switch(n.keyCode){case G:var a=A.indexOf(n.target)+1;t=A[a]||A[0];break;case U:var i=A.indexOf(n.target)-1;t=A[i]||A[A.length-1]}null==(e=t)||e.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},m)},I.map((function(n){var e=n.value,t=n.label;return a.createElement("li",{role:"tab",tabIndex:c===e?0:-1,"aria-selected":c===e,className:(0,r.Z)("tabs__item",l,{"tabs__item--active":c===e}),key:e,ref:function(n){return A.push(n)},onKeyDown:g,onFocus:k,onClick:k},t)}))),e?(0,a.cloneElement)(E.filter((function(n){return n.props.value===c}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},E.map((function(n,e){return(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==c})}))))}},9443:function(n,e,t){"use strict";var a=(0,t(7294).createContext)(void 0);e.Z=a},4332:function(n,e,t){"use strict";t.r(e),t.d(e,{frontMatter:function(){return G},contentTitle:function(){return I},metadata:function(){return P},toc:function(){return m},default:function(){return s}});var a=t(2122),i=t(9756),D=(t(7294),t(3905)),r=t(6742),l=t(5064),o=t(8215),U=["components"],G={id:"template12",title:"Miles",sidebar_label:"Miles",slug:"/templates/miles"},I=void 0,P={unversionedId:"templates/template12",id:"templates/template12",isDocsHomePage:!1,title:"Miles",description:"Introduction",source:"@site/docs/templates/template12.md",sourceDirName:"templates",slug:"/templates/miles",permalink:"/docs/templates/miles",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template12.md",version:"current",frontMatter:{id:"template12",title:"Miles",sidebar_label:"Miles",slug:"/templates/miles"},sidebar:"templates",previous:{title:"Escrow",permalink:"/docs/templates/escrow"},next:{title:"Connected Object",permalink:"/docs/templates/iot"}},m=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Code",id:"code",children:[]}],d={toc:m};function s(n){var e=n.components,t=(0,i.Z)(n,U);return(0,D.kt)("wrapper",(0,a.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,D.kt)("h2",{id:"introduction"},"Introduction"),(0,D.kt)("p",null,"This contract stores miles per owners. Miles have an expiration date and valid miles can be consumed."),(0,D.kt)("p",null,"See this contract in action in the ",(0,D.kt)(r.Z,{to:"/docs/dapp-miles/",mdxType:"Link"},"Fidelity Program")," Dapp example."),(0,D.kt)("h2",{id:"api"},"API"),(0,D.kt)("h3",{id:"storage"},"Storage"),(0,D.kt)("table",null,(0,D.kt)("thead",{parentName:"table"},(0,D.kt)("tr",{parentName:"thead"},(0,D.kt)("th",{parentName:"tr",align:null},"Name"),(0,D.kt)("th",{parentName:"tr",align:null},"Type"),(0,D.kt)("th",{parentName:"tr",align:null},"Description"))),(0,D.kt)("tbody",{parentName:"table"},(0,D.kt)("tr",{parentName:"tbody"},(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"admin")),(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"address")),(0,D.kt)("td",{parentName:"tr",align:null},"Admin address to call ",(0,D.kt)("inlineCode",{parentName:"td"},"add")," entrypoint.")),(0,D.kt)("tr",{parentName:"tbody"},(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"mile")),(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"collection")),(0,D.kt)("td",{parentName:"tr",align:null},"A mile is defined by:",(0,D.kt)("ul",null,(0,D.kt)("li",null,"id"),(0,D.kt)("li",null,"amount"),(0,D.kt)("li",null,"expiration date")))),(0,D.kt)("tr",{parentName:"tbody"},(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"owner")),(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"collection")),(0,D.kt)("td",{parentName:"tr",align:null},"A mile owner is defined by:",(0,D.kt)("ul",null,(0,D.kt)("li",null,"an address"),(0,D.kt)("li",null,"a collection of ",(0,D.kt)("inlineCode",{parentName:"td"},"mile"))),(0,D.kt)("p",null),"A mile is owned by one and only one owner: this is ensured by the use of ",(0,D.kt)("inlineCode",{parentName:"td"},"partition")," collection type (see ",(0,D.kt)(r.Z,{to:"/docs/templates/miles#code",mdxType:"Link"},"code")," below).")))),(0,D.kt)("h3",{id:"entrypoints"},"Entrypoints"),(0,D.kt)("table",null,(0,D.kt)("thead",{parentName:"table"},(0,D.kt)("tr",{parentName:"thead"},(0,D.kt)("th",{parentName:"tr",align:null},"Name"),(0,D.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,D.kt)("th",{parentName:"tr",align:null},"Description"))),(0,D.kt)("tbody",{parentName:"table"},(0,D.kt)("tr",{parentName:"tbody"},(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"add")),(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"ow"),", ",(0,D.kt)("inlineCode",{parentName:"td"},"nm_id"),", ",(0,D.kt)("inlineCode",{parentName:"td"},"nm_amount"),", ",(0,D.kt)("inlineCode",{parentName:"td"},"nm_exp")),(0,D.kt)("td",{parentName:"tr",align:null},"Called by ",(0,D.kt)("inlineCode",{parentName:"td"},"admin")," to grant owner ",(0,D.kt)("inlineCode",{parentName:"td"},"ow")," with ",(0,D.kt)("inlineCode",{parentName:"td"},"nm_amount")," miles that expire on ",(0,D.kt)("inlineCode",{parentName:"td"},"nm_exp"),".")),(0,D.kt)("tr",{parentName:"tbody"},(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"consume")),(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"ow"),", ",(0,D.kt)("inlineCode",{parentName:"td"},"quantity")),(0,D.kt)("td",{parentName:"tr",align:null},"Called by ",(0,D.kt)("inlineCode",{parentName:"td"},"admin")," to consume ",(0,D.kt)("inlineCode",{parentName:"td"},"quantity")," valid miles (ie. miles with expiration date in the future) from owner ",(0,D.kt)("inlineCode",{parentName:"td"},"ow"),".")),(0,D.kt)("tr",{parentName:"tbody"},(0,D.kt)("td",{parentName:"tr",align:null},(0,D.kt)("inlineCode",{parentName:"td"},"clear_expired")),(0,D.kt)("td",{parentName:"tr",align:null}),(0,D.kt)("td",{parentName:"tr",align:null},"Removes expired miles.")))),(0,D.kt)("h2",{id:"code"},"Code"),(0,D.kt)(l.Z,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"},{label:"Specification",value:"specification"}],mdxType:"Tabs"},(0,D.kt)(o.Z,{value:"archetype",mdxType:"TabItem"},(0,D.kt)("pre",null,(0,D.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="miles.arl"',title:'"miles.arl"'},'archetype miles(admin : address)\n\nasset mile identified by id {\n   id         : string;\n   amount     : nat;\n   expiration : date\n}\n\nasset owner identified by addr {\n  addr  : address;\n  miles : partition<mile> = []\n}\n\nentry add (\n  ow        : address,\n  nm_id     : string,\n  nm_amount : nat,\n  nm_exp    : date) {\n   called by admin\n   failif {\n     c2 : mile.contains(nm_id);\n   }\n   effect {\n     owner.addupdate (ow, { miles += [{\n       id         = nm_id;\n       amount     = nm_amount;\n       expiration = nm_exp\n      }] })\n   }\n}\n\nentry consume (ow : address, quantity : nat) {\n  called by admin\n  effect {\n    var lview = owner[ow].miles.sort(expiration).select(the.expiration >= now);\n    dorequire (lview.sum(the.amount) >= quantity, "NotEnoughMiles");\n    var remainder = quantity;\n    for : loop m in lview do\n      if remainder > 0 then begin\n        if mile[m].amount > remainder then begin\n          mile.update(m, { amount -= remainder });\n          remainder := 0\n        end else if mile[m].amount = remainder then begin\n          remainder := 0;\n          owner[ow].miles.remove(m)\n        end else begin\n          remainder -= mile[m].amount;\n          owner[ow].miles.remove(m)\n        end\n      end\n    done;\n    assert p1\n  }\n}\n\nentry clear_expired () {\n  for : loop2 o in owner do\n    owner[o].miles.removeif(the.expiration < now)\n  done\n}\n'))),(0,D.kt)(o.Z,{value:"michelson",mdxType:"TabItem"},(0,D.kt)("pre",null,(0,D.kt)("code",{parentName:"pre",className:"language-js"},'# (Pair admin (Pair {  } {  }))\n{\n  storage (pair (address %admin) (pair (map %mile string (pair (nat %amount) (timestamp %expiration))) (map %owner address (set string))));\n  parameter (or (pair %add (address %ow) (pair (string %nm_id) (pair (nat %nm_amount) (timestamp %nm_exp)))) (or (pair %consume (address %ow) (nat %quantity)) (unit %clear_expired)));\n  code { UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             DIG 6;\n             DUP;\n             DUG 7;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             DIG 5;\n             DUP;\n             DUG 6;\n             DIG 3;\n             DUP;\n             DUG 4;\n             MEM;\n             IF\n               { PUSH string "InvalidCondition: c2";\n                 FAILWITH }\n               {  };\n             DIG 4;\n             DUP;\n             DUG 5;\n             DIG 4;\n             DUP;\n             DUG 5;\n             MEM;\n             IF\n               { DIG 5;\n                 DUP;\n                 DUG 6;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 MEM;\n                 NOT;\n                 IF\n                   { DIG 4;\n                     DUP;\n                     DUG 5;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     PUSH bool True;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     UPDATE;\n                     SOME;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     UPDATE;\n                     DIP { DIG 5; DROP };\n                     DUG 5;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     PAIR;\n                     SOME;\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     UPDATE;\n                     DIP { DIG 6; DROP };\n                     DUG 6;\n                     DROP }\n                   { PUSH string "KeyAlreadyExists";\n                     FAILWITH } }\n               { DIG 4;\n                 DUP;\n                 DUG 5;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 MEM;\n                 IF\n                   { PUSH string "KeyAlreadyExists";\n                     FAILWITH }\n                   { DIG 5;\n                     DUP;\n                     DUG 6;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     MEM;\n                     IF\n                       { PUSH string "KeyAlreadyExists";\n                         FAILWITH }\n                       { DIG 4;\n                         DUP;\n                         DUG 5;\n                         EMPTY_SET string;\n                         PUSH bool True;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         UPDATE;\n                         SOME;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         UPDATE;\n                         DIP { DIG 4; DROP };\n                         DUG 4;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         PAIR;\n                         SOME;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         UPDATE;\n                         DIP { DIG 5; DROP };\n                         DUG 5 } } };\n             DROP 4;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             NIL operation;\n             PAIR }\n           { IF_LEFT\n               { UNPAIR;\n                 SWAP;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 SENDER;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCaller";\n                     FAILWITH }\n                   {  };\n                 NIL string;\n                 NIL string;\n                 NIL string;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 GET;\n                 IF_NONE\n                   { PUSH string "GetNoneValue";\n                     FAILWITH }\n                   {  };\n                 ITER { DIG 7;\n                        DUP;\n                        DUG 8;\n                        DIG 1;\n                        DUP;\n                        DUG 2;\n                        GET;\n                        IF_NONE\n                          { PUSH string "GetNoneValue";\n                            FAILWITH }\n                          {  };\n                        NIL string;\n                        DIG 2;\n                        DUP;\n                        DUG 3;\n                        SOME;\n                        PAIR;\n                        DIG 3;\n                        DUP;\n                        DUG 4;\n                        ITER { DIG 1;\n                               DUP;\n                               DUG 2;\n                               CAR;\n                               DIG 2;\n                               DUP;\n                               DUG 3;\n                               CDR;\n                               DIG 1;\n                               DUP;\n                               DUG 2;\n                               IF_NONE\n                                 { DUP;\n                                   DIG 3;\n                                   DUP;\n                                   DUG 4;\n                                   CONS;\n                                   DIG 2;\n                                   DUP;\n                                   DUG 3;\n                                   PAIR }\n                                 { PUSH int 0;\n                                   DIG 14;\n                                   DUP;\n                                   DUG 15;\n                                   DIG 5;\n                                   DUP;\n                                   DUG 6;\n                                   GET;\n                                   IF_NONE\n                                     { PUSH string "GetNoneValue";\n                                       FAILWITH }\n                                     {  };\n                                   DIG 7;\n                                   DUP;\n                                   DUG 8;\n                                   CDR;\n                                   DIG 1;\n                                   DUP;\n                                   DUG 2;\n                                   CDR;\n                                   COMPARE;\n                                   GT;\n                                   IF\n                                     { PUSH int 1 }\n                                     { PUSH int 0 };\n                                   DIP { DROP };\n                                   COMPARE;\n                                   GT;\n                                   IF\n                                     { DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       DIG 7;\n                                       DUP;\n                                       DUG 8;\n                                       CONS;\n                                       DIG 4;\n                                       DUP;\n                                       DUG 5;\n                                       CONS;\n                                       NONE string;\n                                       PAIR }\n                                     { DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       DIG 4;\n                                       DUP;\n                                       DUG 5;\n                                       CONS;\n                                       DIG 3;\n                                       DUP;\n                                       DUG 4;\n                                       PAIR };\n                                   SWAP;\n                                   DROP };\n                               DIP { DROP };\n                               DIP { DROP };\n                               DIP { DIG 1; DROP };\n                               DUG 1;\n                               DROP };\n                        DUP;\n                        CAR;\n                        DIG 1;\n                        DUP;\n                        DUG 2;\n                        CDR;\n                        NIL string;\n                        DIG 2;\n                        DUP;\n                        DUG 3;\n                        IF_NONE\n                          { DIG 1;\n                            DUP;\n                            DUG 2 }\n                          { DIG 2;\n                            DUP;\n                            DUG 3;\n                            DIG 7;\n                            DUP;\n                            DUG 8;\n                            CONS;\n                            SWAP;\n                            DROP };\n                        ITER { DIG 1;\n                               DUP;\n                               DUG 2;\n                               DIG 1;\n                               DUP;\n                               DUG 2;\n                               CONS;\n                               DIP { DIG 1; DROP };\n                               DUG 1;\n                               DROP };\n                        DIP { DROP };\n                        DIP { DROP };\n                        DIP { DROP };\n                        DIP { DROP };\n                        DIP { DIG 1; DROP };\n                        DUG 1;\n                        DROP };\n                 ITER { DIG 6;\n                        DUP;\n                        DUG 7;\n                        DIG 1;\n                        DUP;\n                        DUG 2;\n                        GET;\n                        IF_NONE\n                          { PUSH string "GetNoneValue";\n                            FAILWITH }\n                          {  };\n                        NOW;\n                        DIG 1;\n                        DUP;\n                        DUG 2;\n                        CDR;\n                        COMPARE;\n                        GE;\n                        IF\n                          { DIG 2;\n                            DUP;\n                            DUG 3;\n                            DIG 2;\n                            DUP;\n                            DUG 3;\n                            CONS }\n                          { DIG 2;\n                            DUP;\n                            DUG 3 };\n                        DIP { DROP };\n                        DIP { DIG 1; DROP };\n                        DUG 1;\n                        DROP };\n                 ITER { DIG 1;\n                        DUP;\n                        DUG 2;\n                        DIG 1;\n                        DUP;\n                        DUG 2;\n                        CONS;\n                        DIP { DIG 1; DROP };\n                        DUG 1;\n                        DROP };\n                 DIG 1;\n                 DUP;\n                 DUG 2;\n                 PUSH nat 0;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 ITER { DIG 7;\n                        DUP;\n                        DUG 8;\n                        DIG 1;\n                        DUP;\n                        DUG 2;\n                        GET;\n                        IF_NONE\n                          { PUSH string "GetNoneValue";\n                            FAILWITH }\n                          {  };\n                        DUP;\n                        CAR;\n                        DIG 3;\n                        DUP;\n                        DUG 4;\n                        ADD;\n                        DIP { DROP };\n                        DIP { DIG 1; DROP };\n                        DUG 1;\n                        DROP };\n                 COMPARE;\n                 GE;\n                 NOT;\n                 IF\n                   { PUSH string "NotEnoughMiles";\n                     FAILWITH }\n                   {  };\n                 DIG 1;\n                 DUP;\n                 DUG 2;\n                 DIG 1;\n                 DUP;\n                 DUG 2;\n                 ITER { PUSH nat 0;\n                        DIG 2;\n                        DUP;\n                        DUG 3;\n                        COMPARE;\n                        GT;\n                        IF\n                          { DIG 1;\n                            DUP;\n                            DUG 2;\n                            DIG 7;\n                            DUP;\n                            DUG 8;\n                            DIG 2;\n                            DUP;\n                            DUG 3;\n                            GET;\n                            IF_NONE\n                              { PUSH string "GetNoneValue";\n                                FAILWITH }\n                              {  };\n                            CAR;\n                            COMPARE;\n                            GT;\n                            IF\n                              { DIG 6;\n                                DUP;\n                                DUG 7;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                GET;\n                                IF_NONE\n                                  { PUSH string "GetNoneValue";\n                                    FAILWITH }\n                                  {  };\n                                DIG 7;\n                                DUP;\n                                DUG 8;\n                                DIG 8;\n                                DUP;\n                                DUG 9;\n                                DIG 3;\n                                DUP;\n                                DUG 4;\n                                GET;\n                                IF_NONE\n                                  { PUSH string "GetNoneValue";\n                                    FAILWITH }\n                                  {  };\n                                UNPAIR;\n                                DROP;\n                                PUSH int 0;\n                                DIG 5;\n                                DUP;\n                                DUG 6;\n                                INT;\n                                DIG 4;\n                                DUP;\n                                DUG 5;\n                                CAR;\n                                SUB;\n                                COMPARE;\n                                GE;\n                                IF\n                                  { DIG 4;\n                                    DUP;\n                                    DUG 5;\n                                    INT;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    SUB;\n                                    ABS }\n                                  { PUSH string "AssignNat";\n                                    FAILWITH };\n                                PAIR;\n                                SOME;\n                                DIG 3;\n                                DUP;\n                                DUG 4;\n                                UPDATE;\n                                DIP { DIG 7; DROP };\n                                DUG 7;\n                                DROP;\n                                PUSH nat 0;\n                                DIP { DIG 1; DROP };\n                                DUG 1 }\n                              { DIG 1;\n                                DUP;\n                                DUG 2;\n                                DIG 7;\n                                DUP;\n                                DUG 8;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                GET;\n                                IF_NONE\n                                  { PUSH string "GetNoneValue";\n                                    FAILWITH }\n                                  {  };\n                                CAR;\n                                COMPARE;\n                                EQ;\n                                IF\n                                  { PUSH nat 0;\n                                    DIP { DIG 1; DROP };\n                                    DUG 1;\n                                    DIG 6;\n                                    DUP;\n                                    DUG 7;\n                                    NONE (pair nat timestamp);\n                                    DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    UPDATE;\n                                    DIP { DIG 6; DROP };\n                                    DUG 6;\n                                    DIG 5;\n                                    DUP;\n                                    DUG 6;\n                                    DIG 6;\n                                    DUP;\n                                    DUG 7;\n                                    DIG 6;\n                                    DUP;\n                                    DUG 7;\n                                    GET;\n                                    IF_NONE\n                                      { PUSH string "GetNoneValue";\n                                        FAILWITH }\n                                      {  };\n                                    PUSH bool False;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    UPDATE;\n                                    SOME;\n                                    DIG 6;\n                                    DUP;\n                                    DUG 7;\n                                    UPDATE;\n                                    DIP { DIG 5; DROP };\n                                    DUG 5 }\n                                  { PUSH int 0;\n                                    DIG 7;\n                                    DUP;\n                                    DUG 8;\n                                    DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    GET;\n                                    IF_NONE\n                                      { PUSH string "GetNoneValue";\n                                        FAILWITH }\n                                      {  };\n                                    CAR;\n                                    INT;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    SUB;\n                                    COMPARE;\n                                    GE;\n                                    IF\n                                      { DIG 6;\n                                        DUP;\n                                        DUG 7;\n                                        DIG 1;\n                                        DUP;\n                                        DUG 2;\n                                        GET;\n                                        IF_NONE\n                                          { PUSH string "GetNoneValue";\n                                            FAILWITH }\n                                          {  };\n                                        CAR;\n                                        INT;\n                                        DIG 2;\n                                        DUP;\n                                        DUG 3;\n                                        SUB;\n                                        ABS }\n                                      { PUSH string "AssignNat";\n                                        FAILWITH };\n                                    DIP { DIG 1; DROP };\n                                    DUG 1;\n                                    DIG 6;\n                                    DUP;\n                                    DUG 7;\n                                    NONE (pair nat timestamp);\n                                    DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    UPDATE;\n                                    DIP { DIG 6; DROP };\n                                    DUG 6;\n                                    DIG 5;\n                                    DUP;\n                                    DUG 6;\n                                    DIG 6;\n                                    DUP;\n                                    DUG 7;\n                                    DIG 6;\n                                    DUP;\n                                    DUG 7;\n                                    GET;\n                                    IF_NONE\n                                      { PUSH string "GetNoneValue";\n                                        FAILWITH }\n                                      {  };\n                                    PUSH bool False;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    UPDATE;\n                                    SOME;\n                                    DIG 6;\n                                    DUP;\n                                    DUG 7;\n                                    UPDATE;\n                                    DIP { DIG 5; DROP };\n                                    DUG 5 } } }\n                          {  };\n                        DROP };\n                 DROP 4;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 NIL operation;\n                 PAIR }\n               { DROP;\n                 DUP;\n                 ITER { UNPAIR;\n                        DIG 2;\n                        DUP;\n                        DUG 3;\n                        DIG 1;\n                        DUP;\n                        DUG 2;\n                        GET;\n                        IF_NONE\n                          { PUSH string "GetNoneValue";\n                            FAILWITH }\n                          {  };\n                        ITER { DIG 4;\n                               DUP;\n                               DUG 5;\n                               DIG 1;\n                               DUP;\n                               DUG 2;\n                               GET;\n                               IF_NONE\n                                 { PUSH string "GetNoneValue";\n                                   FAILWITH }\n                                 {  };\n                               NOW;\n                               DIG 1;\n                               DUP;\n                               DUG 2;\n                               CDR;\n                               COMPARE;\n                               LT;\n                               IF\n                                 { DIG 5;\n                                   DUP;\n                                   DUG 6;\n                                   NONE (pair nat timestamp);\n                                   DIG 3;\n                                   DUP;\n                                   DUG 4;\n                                   UPDATE;\n                                   DIP { DIG 5; DROP };\n                                   DUG 5;\n                                   DIG 4;\n                                   DUP;\n                                   DUG 5;\n                                   DIG 5;\n                                   DUP;\n                                   DUG 6;\n                                   DIG 4;\n                                   DUP;\n                                   DUG 5;\n                                   GET;\n                                   IF_NONE\n                                     { PUSH string "GetNoneValue";\n                                       FAILWITH }\n                                     {  };\n                                   PUSH bool False;\n                                   DIG 4;\n                                   DUP;\n                                   DUG 5;\n                                   UPDATE;\n                                   SOME;\n                                   DIG 4;\n                                   DUP;\n                                   DUG 5;\n                                   UPDATE;\n                                   DIP { DIG 4; DROP };\n                                   DUG 4 }\n                                 {  };\n                               DROP 2 };\n                        DROP 2 };\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 NIL operation;\n                 PAIR } } };\n}\n'))),(0,D.kt)(o.Z,{value:"specification",mdxType:"TabItem"},(0,D.kt)("pre",null,(0,D.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="miles.arl"',title:'"miles.arl"'},"specification asset mile {\n  m1: amount > 0;\n}\n\nspecification entry consume (quantity : int) {\n  assert p1 {\n      remainder = 0\n  }\n  postcondition p2 {\n    mile.sum(the.amount) = before.mile.sum(the.amount) - quantity\n    invariant for loop {\n      0 <= remainder <= toiterate.sum(the.amount);\n        before.mile.sum(the.amount) = mile.sum(the.amount) + quantity - remainder\n    }\n  }\n  postcondition p3 {\n    forall m in removed.mile, m.expiration >= now\n    invariant for loop {\n      removed.mile.subsetof(by_expiration)\n    }\n  }\n  postcondition p4 {\n    added.mile.isempty()\n  }\n}\n\nspecification entry clear_expired () {\n  postcondition s3 {\n    forall m in removed.mile, m.expiration < now\n    invariant for loop2 {\n      forall m in removed.mile, m.expiration < now\n    }\n  }\n}\n")))))}s.isMDXComponent=!0},6010:function(n,e,t){"use strict";function a(n){var e,t,i="";if("string"==typeof n||"number"==typeof n)i+=n;else if("object"==typeof n)if(Array.isArray(n))for(e=0;e<n.length;e++)n[e]&&(t=a(n[e]))&&(i&&(i+=" "),i+=t);else for(e in n)n[e]&&(i&&(i+=" "),i+=e);return i}function i(){for(var n,e,t=0,i="";t<arguments.length;)(n=arguments[t++])&&(e=a(n))&&(i&&(i+=" "),i+=e);return i}t.d(e,{Z:function(){return i}})}}]);