(self.webpackChunkcompletium_landing=self.webpackChunkcompletium_landing||[]).push([[5478],{8215:function(n,e,t){"use strict";var a=t(7294);e.Z=function(n){var e=n.children,t=n.hidden,r=n.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:r},e)}},5064:function(n,e,t){"use strict";t.d(e,{Z:function(){return I}});var a=t(7294),r=t(9443);var l=function(){var n=(0,a.useContext)(r.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},i=t(6010),o="tabItem_1uMI",d="tabItemActive_2DSg";var s=37,P=39;var I=function(n){var e=n.lazy,t=n.block,r=n.defaultValue,I=n.values,u=n.groupId,p=n.className,c=l(),D=c.tabGroupChoices,N=c.setTabGroupChoices,m=(0,a.useState)(r),A=m[0],U=m[1],R=a.Children.toArray(n.children),k=[];if(null!=u){var S=D[u];null!=S&&S!==A&&I.some((function(n){return n.value===S}))&&U(S)}var G=function(n){var e=n.currentTarget,t=k.indexOf(e),a=I[t].value;U(a),null!=u&&(N(u,a),setTimeout((function(){var n,t,a,r,l,i,o,s;(n=e.getBoundingClientRect(),t=n.top,a=n.left,r=n.bottom,l=n.right,i=window,o=i.innerHeight,s=i.innerWidth,t>=0&&l<=s&&r<=o&&a>=0)||(e.scrollIntoView({block:"center",behavior:"smooth"}),e.classList.add(d),setTimeout((function(){return e.classList.remove(d)}),2e3))}),150))},b=function(n){var e,t;switch(n.keyCode){case P:var a=k.indexOf(n.target)+1;t=k[a]||k[0];break;case s:var r=k.indexOf(n.target)-1;t=k[r]||k[k.length-1]}null==(e=t)||e.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},p)},I.map((function(n){var e=n.value,t=n.label;return a.createElement("li",{role:"tab",tabIndex:A===e?0:-1,"aria-selected":A===e,className:(0,i.Z)("tabs__item",o,{"tabs__item--active":A===e}),key:e,ref:function(n){return k.push(n)},onKeyDown:b,onFocus:G,onClick:G},t)}))),e?(0,a.cloneElement)(R.filter((function(n){return n.props.value===A}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},R.map((function(n,e){return(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==A})}))))}},9443:function(n,e,t){"use strict";var a=(0,t(7294).createContext)(void 0);e.Z=a},322:function(n,e,t){"use strict";t.r(e),t.d(e,{frontMatter:function(){return s},contentTitle:function(){return P},metadata:function(){return I},toc:function(){return u},default:function(){return c}});var a=t(2122),r=t(9756),l=(t(7294),t(3905)),i=(t(6742),t(5064)),o=t(8215),d=["components"],s={id:"template11",title:"Escrow",sidebar_label:"Escrow",slug:"/templates/escrow"},P=void 0,I={unversionedId:"templates/template11",id:"templates/template11",isDocsHomePage:!1,title:"Escrow",description:"Introduction",source:"@site/docs/templates/template11.md",sourceDirName:"templates",slug:"/templates/escrow",permalink:"/docs/templates/escrow",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template11.md",version:"current",frontMatter:{id:"template11",title:"Escrow",sidebar_label:"Escrow",slug:"/templates/escrow"},sidebar:"templates",previous:{title:"Autocallable note",permalink:"/docs/templates/acn"},next:{title:"Miles",permalink:"/docs/templates/miles"}},u=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Code",id:"code",children:[]}],p={toc:u};function c(n){var e=n.components,t=(0,r.Z)(n,d);return(0,l.kt)("wrapper",(0,a.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"The escrow smart contract establishes a decentralized purchase process between the seller and buyer. The principle is that the price amount is escrowed in the smart contract and released when the purchased item is received by buyer."),(0,l.kt)("p",null,"The critical point of the process is that it requires actions from the buyer and the seller to complete the process:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if the seller does not send the item, buyer's fund are locked in the escrow"),(0,l.kt)("li",{parentName:"ul"},"if the buyer does not complete the process, even if the item is received, then the seller does not reveive payment")),(0,l.kt)("p",null,"In order to motivate both the seller and the buyer to execute the process, the basic idea is that they fund the escrow with ",(0,l.kt)("em",{parentName:"p"},"security deposits")," that are transferred back only if the process is complete. In the escrow presented here, security deposits are a proportion of the price of the item."),(0,l.kt)("h2",{id:"api"},"API"),(0,l.kt)("h3",{id:"storage"},"Storage"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"seller")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"address")),(0,l.kt)("td",{parentName:"tr",align:null},"Seller's address.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"buyer")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"address")),(0,l.kt)("td",{parentName:"tr",align:null},"Buyer's address.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"taxcollecter")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"address")),(0,l.kt)("td",{parentName:"tr",align:null},"Tax collector's address.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"price")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"tez")),(0,l.kt)("td",{parentName:"tr",align:null},"Amount of transaction.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"taxrate")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"rational")),(0,l.kt)("td",{parentName:"tr",align:null},"Tax rate applied to ",(0,l.kt)("inlineCode",{parentName:"td"},"price"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"securityrate")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"rational")),(0,l.kt)("td",{parentName:"tr",align:null},"Security rate applied to ",(0,l.kt)("inlineCode",{parentName:"td"},"price")," for security deposit.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_state")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"states")),(0,l.kt)("td",{parentName:"tr",align:null},"Escrow state, one of ",(0,l.kt)("inlineCode",{parentName:"td"},"Create"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"Aborted"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"Funded"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"Completed"))))),(0,l.kt)("h3",{id:"entrypoints"},"Entrypoints"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"abort")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"buyer")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"seller")," can abort escrow in ",(0,l.kt)("inlineCode",{parentName:"td"},"Created")," state.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"toFunded")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"Internally called by escrow to go to ",(0,l.kt)("inlineCode",{parentName:"td"},"Funded")," state.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"fund")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"Called by ",(0,l.kt)("inlineCode",{parentName:"td"},"buyer")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"seller")," to provide funds:",(0,l.kt)("ul",null,(0,l.kt)("li",null,(0,l.kt)("inlineCode",{parentName:"td"},"buyer")," must transfer price, security deposit and taxes "),(0,l.kt)("li",null,(0,l.kt)("inlineCode",{parentName:"td"},"seller")," must transfer security deposit.")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"complete")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"Called by ",(0,l.kt)("inlineCode",{parentName:"td"},"buyer")," when purchased item is received. This transfers:",(0,l.kt)("ul",null,(0,l.kt)("li",null,"item price and security deposit to ",(0,l.kt)("inlineCode",{parentName:"td"},"seller")),(0,l.kt)("li",null,"security deposit to ",(0,l.kt)("inlineCode",{parentName:"td"},"buyer")),(0,l.kt)("li",null,"tax to ",(0,l.kt)("inlineCode",{parentName:"td"},"taxcollector"))))))),(0,l.kt)("h2",{id:"code"},"Code"),(0,l.kt)(i.Z,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"archetype",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="escrow.arl"',title:'"escrow.arl"'},'archetype escrow(\nseller       : address,\nbuyer        : address,\ntaxcollector : address,\nprice        : tez,\ntaxrate      : rational,\nsecurityrate : rational,\n)\n\nvariable buyer_funded  : bool = false\nvariable seller_funded : bool = false\n\n(* states *)\nstates =\n | Created initial\n | Aborted\n | Funded\n | Completed\n\ntransition abort () {\n  called by buyer or seller\n  from Created to Aborted\n}\n\ntransition toFunded () {\n  called by selfaddress\n  from Created to Funded\n}\n\nentry fund () {\n  called by buyer or seller\n  effect {\n    if caller = buyer then begin\n      dorequire(transferred >= (1 + taxrate + securityrate) * price, "NOT_ENOUGH_FUND");\n      buyer_funded := true\n    end else if caller = seller then begin\n      dorequire(transferred >= securityrate * price, "NOT_ENOUGH_FUND");\n      seller_funded := true\n    end;\n    if buyer_funded and seller_funded then\n      transfer 0tz to entry self.toFunded()\n  }\n}\n\ntransition complete () {\n  called by buyer\n  from Funded to Completed\n  with effect {\n    transfer ((1 + securityrate) * price) to seller;\n    transfer (securityrate * price)       to buyer;\n    if taxrate > 0 then\n      transfer (taxrate * price)          to taxcollector;\n  }\n}\n'))),(0,l.kt)(o.Z,{value:"michelson",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'# (Pair seller (Pair buyer (Pair taxcollector (Pair price (Pair taxrate (Pair securityrate (Pair False (Pair False 0))))))))\n{\n  storage (pair (address %seller) (pair (address %buyer) (pair (address %taxcollector) (pair (mutez %price) (pair (pair %taxrate int nat) (pair (pair %securityrate int nat) (pair (bool %buyer_funded) (pair (bool %seller_funded) (nat %_state)))))))));\n  parameter (or (unit %abort) (or (unit %toFunded) (or (unit %fund) (unit %complete))));\n  code { LAMBDA\n           (pair (pair (pair int nat) (pair int nat)) (or unit (or (or unit unit) (or unit unit))))\n           bool\n           { UNPAIR;\n             UNPAIR;\n             DIP { UNPAIR };\n             UNPAIR;\n             DUG 3;\n             MUL;\n             DIP { MUL };\n             SWAP;\n             COMPARE;\n             SWAP;\n             IF_LEFT\n               { DROP;\n                 EQ }\n               { IF_LEFT\n                   { IF_LEFT\n                       { DROP;\n                         LT }\n                       { DROP;\n                         LE } }\n                   { IF_LEFT\n                       { DROP;\n                         GT }\n                       { DROP;\n                         GE } } } };\n         NIL operation;\n         DIG 2;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { DROP;\n             DIG 8;\n             DUP;\n             DUG 9;\n             SENDER;\n             COMPARE;\n             EQ;\n             DIG 8;\n             DUP;\n             DUG 9;\n             SENDER;\n             COMPARE;\n             EQ;\n             OR;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             DUP;\n             DUP;\n             PUSH nat 0;\n             COMPARE;\n             EQ;\n             IF\n               { PUSH nat 1;\n                 DIP { DIG 1; DROP };\n                 DUG 1 }\n               { PUSH string "InvalidState";\n                 FAILWITH };\n             DROP;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { DROP;\n                 SELF;\n                 ADDRESS;\n                 SENDER;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCaller";\n                     FAILWITH }\n                   {  };\n                 DUP;\n                 DUP;\n                 PUSH nat 0;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { PUSH nat 2;\n                     DIP { DIG 1; DROP };\n                     DUG 1 }\n                   { PUSH string "InvalidState";\n                     FAILWITH };\n                 DROP;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { IF_LEFT\n                   { DROP;\n                     DIG 8;\n                     DUP;\n                     DUG 9;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     DIG 8;\n                     DUP;\n                     DUG 9;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     OR;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCaller";\n                         FAILWITH }\n                       {  };\n                     DIG 7;\n                     DUP;\n                     DUG 8;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { DIG 5;\n                         DUP;\n                         DUG 6;\n                         UNIT;\n                         LEFT unit;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         UNIT;\n                         LEFT unit;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         PUSH nat 1;\n                         PUSH nat 1;\n                         INT;\n                         PAIR;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         DIP { UNPAIR; SWAP; DUP };\n                         UNPAIR;\n                         SWAP;\n                         DUP;\n                         DIG 3;\n                         MUL;\n                         DUG 4;\n                         DIG 3;\n                         MUL;\n                         DIP { MUL };\n                         DIG 3;\n                         IF_LEFT\n                           { DROP;\n                             ADD }\n                           { DROP;\n                             SWAP;\n                             SUB };\n                         PAIR;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         DIP { UNPAIR; SWAP; DUP };\n                         UNPAIR;\n                         SWAP;\n                         DUP;\n                         DIG 3;\n                         MUL;\n                         DUG 4;\n                         DIG 3;\n                         MUL;\n                         DIP { MUL };\n                         DIG 3;\n                         IF_LEFT\n                           { DROP;\n                             ADD }\n                           { DROP;\n                             SWAP;\n                             SUB };\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         AMOUNT;\n                         COMPARE;\n                         GE;\n                         NOT;\n                         IF\n                           { PUSH string "NOT_ENOUGH_FUND";\n                             FAILWITH }\n                           {  };\n                         PUSH bool True;\n                         DIP { DIG 2; DROP };\n                         DUG 2 }\n                       { DIG 8;\n                         DUP;\n                         DUG 9;\n                         SENDER;\n                         COMPARE;\n                         EQ;\n                         IF\n                           { DIG 5;\n                             DUP;\n                             DUG 6;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             PAIR;\n                             UNPAIR;\n                             UNPAIR;\n                             ABS;\n                             DIG 2;\n                             MUL;\n                             EDIV;\n                             IF_NONE\n                               { PUSH string "DivByZero";\n                                 FAILWITH }\n                               {  };\n                             CAR;\n                             AMOUNT;\n                             COMPARE;\n                             GE;\n                             NOT;\n                             IF\n                               { PUSH string "NOT_ENOUGH_FUND";\n                                 FAILWITH }\n                               {  };\n                             PUSH bool True;\n                             DIP { DIG 1; DROP };\n                             DUG 1 }\n                           {  } };\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     AND;\n                     IF\n                       { DIG 9;\n                         DUP;\n                         DUG 10;\n                         SELF;\n                         ADDRESS;\n                         CONTRACT %toFunded unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         PUSH mutez 0;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 9; DROP };\n                         DUG 9 }\n                       {  };\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR }\n                   { DROP;\n                     DIG 7;\n                     DUP;\n                     DUG 8;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCaller";\n                         FAILWITH }\n                       {  };\n                     DUP;\n                     DUP;\n                     PUSH nat 2;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { DIG 10;\n                         DUP;\n                         DUG 11;\n                         DIG 10;\n                         DUP;\n                         DUG 11;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         UNIT;\n                         LEFT unit;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         PUSH nat 1;\n                         PUSH nat 1;\n                         INT;\n                         PAIR;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         DIP { UNPAIR; SWAP; DUP };\n                         UNPAIR;\n                         SWAP;\n                         DUP;\n                         DIG 3;\n                         MUL;\n                         DUG 4;\n                         DIG 3;\n                         MUL;\n                         DIP { MUL };\n                         DIG 3;\n                         IF_LEFT\n                           { DROP;\n                             ADD }\n                           { DROP;\n                             SWAP;\n                             SUB };\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 10; DROP };\n                         DUG 10;\n                         DIG 10;\n                         DUP;\n                         DUG 11;\n                         DIG 9;\n                         DUP;\n                         DUG 10;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 10; DROP };\n                         DUG 10;\n                         DIG 11;\n                         DUP;\n                         DUG 12;\n                         UNIT;\n                         LEFT unit;\n                         RIGHT (or unit unit);\n                         RIGHT unit;\n                         PUSH nat 1;\n                         PUSH int 0;\n                         PAIR;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         PAIR;\n                         PAIR;\n                         EXEC;\n                         IF\n                           { DIG 10;\n                             DUP;\n                             DUG 11;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             CONTRACT unit;\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             PAIR;\n                             UNPAIR;\n                             UNPAIR;\n                             ABS;\n                             DIG 2;\n                             MUL;\n                             EDIV;\n                             IF_NONE\n                               { PUSH string "DivByZero";\n                                 FAILWITH }\n                               {  };\n                             CAR;\n                             UNIT;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 10; DROP };\n                             DUG 10 }\n                           {  };\n                         PUSH nat 3;\n                         DIP { DIG 1; DROP };\n                         DUG 1 }\n                       { PUSH string "InvalidState";\n                         FAILWITH };\n                     DROP;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR } } };\n         DIP { DROP } };\n}\n')))))}c.isMDXComponent=!0}}]);