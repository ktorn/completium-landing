(self.webpackChunkcompletium_landing=self.webpackChunkcompletium_landing||[]).push([[8428],{9618:function(t,e,n){"use strict";n.r(e),n.d(e,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return d},toc:function(){return s},default:function(){return m}});var a=n(2122),r=n(9756),c=(n(7294),n(3905)),l=(n(7134),n(6742)),o=["components"],i={id:"tuto8",title:"Call another Contract",sidebar_label:"8. Call a contract",slug:"/contract/tuto/archetype-callcontr",hide_title:!0},p=void 0,d={unversionedId:"contract/tuto/tuto8",id:"contract/tuto/tuto8",isDocsHomePage:!1,title:"Call another Contract",description:"Call a contract",source:"@site/docs/contract/tuto/tuto8.md",sourceDirName:"contract/tuto",slug:"/contract/tuto/archetype-callcontr",permalink:"/docs/contract/tuto/archetype-callcontr",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/contract/tuto/tuto8.md",version:"current",frontMatter:{id:"tuto8",title:"Call another Contract",sidebar_label:"8. Call a contract",slug:"/contract/tuto/archetype-callcontr",hide_title:!0},sidebar:"contract",previous:{title:"7. Assets",permalink:"/docs/contract/tuto/archetype-assets"},next:{title:"Test Scenario",permalink:"/docs/contract/test-scenario"}},s=[{value:"Call a contract",id:"call-a-contract",children:[]},{value:"Deploy",id:"deploy",children:[]},{value:"Call entry point",id:"call-entry-point",children:[]}],u={toc:s};function m(t){var e=t.components,n=(0,r.Z)(t,o);return(0,c.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"call-a-contract"},"Call a contract"),(0,c.kt)("p",null,"Can a contract read another contract's storage?"),(0,c.kt)("p",null,"No, not directly. However it is possible to call another contract with the ",(0,c.kt)("inlineCode",{parentName:"p"},"transfer")," instruction we have seen in ",(0,c.kt)(l.Z,{to:"/docs/contract/tuto/archetype-datedur",mdxType:"Link"},"previous")," examples."),(0,c.kt)("p",null,"It is then possible to setup a mechanism for a smart contract to retrieve a data from another smart contracts, under certain conditions and constraints:"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},"the smart contract you want to retrieve data from must provide an dedicated entry point to provide the data"),(0,c.kt)("li",{parentName:"ul"},"this entry point must accept an argument which is call-back to the calling contract; this call-back is an entry point to be called with the desired data as argument)"),(0,c.kt)("li",{parentName:"ul"},"the calling contract must provide a call-back entry point to handle the retreived data")),(0,c.kt)("p",null,"It is indeed possible in Michelson to wrap an entrypoint address in a value and send it to an entry point with the ",(0,c.kt)("inlineCode",{parentName:"p"},"contract")," type."),(0,c.kt)("p",null,"Archetype provides a high-level syntax for this pattern: the keyword ",(0,c.kt)("inlineCode",{parentName:"p"},"getter")," generates the required entry point and arguments."),(0,c.kt)("p",null,"The ",(0,c.kt)("em",{parentName:"p"},"called")," contract provides a ",(0,c.kt)("inlineCode",{parentName:"p"},"getter")," entry point:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'{9} title="8-1-contract_called.arl"',"{9}":!0,title:'"8-1-contract_called.arl"'},"archetype contract_called\n\nvariable n : nat = 42\n\nentry set_n(p : nat) {\n  n := p\n}\n\ngetter get_n () : nat { return n }\n\n")),(0,c.kt)("p",null,"The ",(0,c.kt)("em",{parentName:"p"},"caller")," contract uses a variation of the ",(0,c.kt)("inlineCode",{parentName:"p"},"transfer")," instruction to call the ",(0,c.kt)("inlineCode",{parentName:"p"},"get_n")," entry point. The address of the called contract is passed as parameter:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'{10} title="8-2-contract_caller.arl"',"{10}":!0,title:'"8-2-contract_caller.arl"'},"archetype contract_caller\n\nvariable r : nat = 0\n\nentry set_r(p : nat) {\n  r := p\n}\n\nentry inspect(addr : address) {\n  transfer 0tz to addr call get_n<unit * contract<nat>>((Unit, self.set_r))\n}\n")),(0,c.kt)("p",null,"A detailed presentation of the ",(0,c.kt)("inlineCode",{parentName:"p"},"getter")," keyword may be found ",(0,c.kt)("a",{href:"https://docs.archetype-lang.org/archetype-language/transfers#getter-and-contract",target:"_blank"},"here"),"."),(0,c.kt)("h2",{id:"deploy"},"Deploy"),(0,c.kt)("p",null,"The following ",(0,c.kt)(l.Z,{to:"/docs/cli",mdxType:"Link"},"Completium CLI")," commands deploy the contract on the Tezos network:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"completium-cli deploy 8-1-contract_called.arl\n")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"completium-cli deploy 8-2-contract_caller.arl\n")),(0,c.kt)("h2",{id:"call-entry-point"},"Call entry point"),(0,c.kt)("p",null,"The following command calls the unique entry point:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},'completium-cli call 8-2-contract_caller --entry inspect --arg "{\\"addr\\": \\"`completium-cli show address 8-1-contract_called`\\"}"\n')),(0,c.kt)("p",null,"You can retrieve the address of the called contract with this command:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"completium-cli show contract 8-1-contract_called\n")))}m.isMDXComponent=!0}}]);