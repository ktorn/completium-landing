(self.webpackChunkcompletium_landing=self.webpackChunkcompletium_landing||[]).push([[1832],{8215:function(n,e,t){"use strict";var a=t(7294);e.Z=function(n){var e=n.children,t=n.hidden,r=n.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:r},e)}},5064:function(n,e,t){"use strict";t.d(e,{Z:function(){return p}});var a=t(7294),r=t(9443);var i=function(){var n=(0,a.useContext)(r.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},l=t(6010),d="tabItem_1uMI",o="tabItemActive_2DSg";var P=37,I=39;var p=function(n){var e=n.lazy,t=n.block,r=n.defaultValue,p=n.values,s=n.groupId,u=n.className,D=i(),m=D.tabGroupChoices,c=D.setTabGroupChoices,N=(0,a.useState)(r),A=N[0],U=N[1],R=a.Children.toArray(n.children),k=[];if(null!=s){var S=m[s];null!=S&&S!==A&&p.some((function(n){return n.value===S}))&&U(S)}var G=function(n){var e=n.currentTarget,t=k.indexOf(e),a=p[t].value;U(a),null!=s&&(c(s,a),setTimeout((function(){var n,t,a,r,i,l,d,P;(n=e.getBoundingClientRect(),t=n.top,a=n.left,r=n.bottom,i=n.right,l=window,d=l.innerHeight,P=l.innerWidth,t>=0&&i<=P&&r<=d&&a>=0)||(e.scrollIntoView({block:"center",behavior:"smooth"}),e.classList.add(o),setTimeout((function(){return e.classList.remove(o)}),2e3))}),150))},C=function(n){var e,t;switch(n.keyCode){case I:var a=k.indexOf(n.target)+1;t=k[a]||k[0];break;case P:var r=k.indexOf(n.target)-1;t=k[r]||k[k.length-1]}null==(e=t)||e.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},u)},p.map((function(n){var e=n.value,t=n.label;return a.createElement("li",{role:"tab",tabIndex:A===e?0:-1,"aria-selected":A===e,className:(0,l.Z)("tabs__item",d,{"tabs__item--active":A===e}),key:e,ref:function(n){return k.push(n)},onKeyDown:C,onFocus:G,onClick:G},t)}))),e?(0,a.cloneElement)(R.filter((function(n){return n.props.value===A}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},R.map((function(n,e){return(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==A})}))))}},9443:function(n,e,t){"use strict";var a=(0,t(7294).createContext)(void 0);e.Z=a},5999:function(n,e,t){"use strict";t.r(e),t.d(e,{frontMatter:function(){return P},contentTitle:function(){return I},metadata:function(){return p},toc:function(){return s},default:function(){return D}});var a=t(2122),r=t(9756),i=(t(7294),t(3905)),l=(t(6742),t(5064)),d=t(8215),o=["components"],P={id:"template13",title:"Health care",sidebar_label:"Health care",slug:"/templates/healthcare"},I=void 0,p={unversionedId:"templates/template13",id:"templates/template13",isDocsHomePage:!1,title:"Health care",description:"Introduction",source:"@site/docs/templates/template13.md",sourceDirName:"templates",slug:"/templates/healthcare",permalink:"/docs/templates/healthcare",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template13.md",version:"current",frontMatter:{id:"template13",title:"Health care",sidebar_label:"Health care",slug:"/templates/healthcare"},sidebar:"templates",previous:{title:"Connected Object",permalink:"/docs/templates/iot"},next:{title:"Multisig",permalink:"/docs/templates/multisig"}},s=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Code",id:"code",children:[]}],u={toc:s};function D(n){var e=n.components,t=(0,r.Z)(n,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"This contract between a patient and its insurer establishes the rules of payment:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"between insurance and doctors"),(0,i.kt)("li",{parentName:"ul"},"between the patient and the insurer")),(0,i.kt)("p",null,"The insurer pays the consultation price to the doctor."),(0,i.kt)("p",null,"The patient pays the insurer:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a fee on a regular basis"),(0,i.kt)("li",{parentName:"ul"},"an amount per consultation capped to a fixed deductible amount")),(0,i.kt)("h2",{id:"api"},"API"),(0,i.kt)("h3",{id:"storage"},"Storage"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"patient")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"address")),(0,i.kt)("td",{parentName:"tr",align:null},"Patient's address.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"insurer")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"address")),(0,i.kt)("td",{parentName:"tr",align:null},"Insurer's address.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fee")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tez")),(0,i.kt)("td",{parentName:"tr",align:null},"Fee value, paid by patient to insurer every ",(0,i.kt)("inlineCode",{parentName:"td"},"fee_period")," period of time.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fee_period")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"duration")),(0,i.kt)("td",{parentName:"tr",align:null},"Covering period for one ",(0,i.kt)("inlineCode",{parentName:"td"},"fee")," payment.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"deductible")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tez")),(0,i.kt)("td",{parentName:"tr",align:null},"Maximum amount paid by ",(0,i.kt)("inlineCode",{parentName:"td"},"patient")," to ",(0,i.kt)("inlineCode",{parentName:"td"},"insurer")," for a consultation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"doctor")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"collection")),(0,i.kt)("td",{parentName:"tr",align:null},"A doctor is defined by an address and the debt due by ",(0,i.kt)("inlineCode",{parentName:"td"},"insurer")," to doctor.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"last_fee_date")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"date")),(0,i.kt)("td",{parentName:"tr",align:null},"Date of last fee payment. Used internally to compute number of due fees.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"patient_confirmed")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"bool")),(0,i.kt)("td",{parentName:"tr",align:null},"Has patient confirmed contract ? Used internally to compute ",(0,i.kt)("inlineCode",{parentName:"td"},"Running")," state.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"insurer_confirmed")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"bool")),(0,i.kt)("td",{parentName:"tr",align:null},"Has insurer confirmed contract ? Used internally to compute ",(0,i.kt)("inlineCode",{parentName:"td"},"Running")," state.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"deductible_debt")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tez")),(0,i.kt)("td",{parentName:"tr",align:null},"Sum of deductibles due by ",(0,i.kt)("inlineCode",{parentName:"td"},"patient")," to ",(0,i.kt)("inlineCode",{parentName:"td"},"insurer"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"_state")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"states")),(0,i.kt)("td",{parentName:"tr",align:null},"One of ",(0,i.kt)("inlineCode",{parentName:"td"},"Created"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"Running"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"Canceled"))))),(0,i.kt)("h3",{id:"entrypoints"},"Entrypoints"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"confirm")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Called by ",(0,i.kt)("inlineCode",{parentName:"td"},"patient")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"insurer")," to confirm contract.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"toRunning")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Internally called by contract to set contrat to ",(0,i.kt)("inlineCode",{parentName:"td"},"Running")," state when confirmed by ",(0,i.kt)("inlineCode",{parentName:"td"},"patient")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"insurer"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"cancel")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Called by ",(0,i.kt)("inlineCode",{parentName:"td"},"patient")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"insurer")," to cancel contract.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"register_doctor")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"a")),(0,i.kt)("td",{parentName:"tr",align:null},"Registers doctor at address ",(0,i.kt)("inlineCode",{parentName:"td"},"a"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"declare_consultation")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"p")),(0,i.kt)("td",{parentName:"tr",align:null},"A doctor declares a medical consultation for ",(0,i.kt)("inlineCode",{parentName:"td"},"patient")," of price ",(0,i.kt)("inlineCode",{parentName:"td"},"p"),". ",(0,i.kt)("p",null),"It increments:",(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("inlineCode",{parentName:"td"},"deductible_debt")," (paid by ",(0,i.kt)("inlineCode",{parentName:"td"},"patient")," to ",(0,i.kt)("inlineCode",{parentName:"td"},"insurer"),") by the minimum of ",(0,i.kt)("inlineCode",{parentName:"td"},"p")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"deductible")),(0,i.kt)("li",null,"the debt of ",(0,i.kt)("inlineCode",{parentName:"td"},"insurer")," (paid to doctor) by ",(0,i.kt)("inlineCode",{parentName:"td"},"p"))))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"pay_doctor")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"doc")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"insurer")," pays doctor ",(0,i.kt)("inlineCode",{parentName:"td"},"doc")," the debt value (accumulated by ",(0,i.kt)("inlineCode",{parentName:"td"},"declare_declaration"),").")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"pay_fees")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"patient")," pays ",(0,i.kt)("inlineCode",{parentName:"td"},"insurer")," the fee. ",(0,i.kt)("p",null),"The amount is computed based on ",(0,i.kt)("inlineCode",{parentName:"td"},"last_fee_date")," as the number of periods ",(0,i.kt)("inlineCode",{parentName:"td"},"period")," multiplied by ",(0,i.kt)("inlineCode",{parentName:"td"},"fee"),". It updates ",(0,i.kt)("inlineCode",{parentName:"td"},"last_fee_date"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"pay_deductible")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"patient")," pays ",(0,i.kt)("inlineCode",{parentName:"td"},"insurer")," the amount of ",(0,i.kt)("inlineCode",{parentName:"td"},"deductible_debt")," (accumulated by ",(0,i.kt)("inlineCode",{parentName:"td"},"declare_declaration"),").")))),(0,i.kt)("h2",{id:"code"},"Code"),(0,i.kt)(l.Z,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"},{label:"Specification",value:"specification"}],mdxType:"Tabs"},(0,i.kt)(d.Z,{value:"archetype",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="healthcare.arl"',title:'"healthcare.arl"'},"archetype health_care(\n  patient       : address,\n  insurer       : address,\n  fee           : tez,\n  fee_period    : duration,\n  deductible    : tez,\n)\n\nvariable last_fee_date : date = now\n\nvariable patient_confirmed : bool = false\nvariable insurer_confirmed : bool = false\n\nvariable deductible_debt : tez = 0tz\n\nasset doctor {\n  addr : address;\n  debt : tez = 0tz;\n}\n\nstates =\n| Created   initial\n| Running\n| Canceled\n\ntransition toRunning () {\n  called by selfaddress\n  from Created to Running\n  with effect { last_fee_date := now }\n}\n\nentry confirm() {\n  if caller = patient then patient_confirmed := true;\n  if caller = insurer then insurer_confirmed := true;\n  if patient_confirmed and insurer_confirmed then\n    transfer 0tz to entry self.toRunning()\n}\n\ntransition cancel () {\n  called by insurer or patient\n  from any to Canceled\n}\n\nentry register_doctor (a : address) {\n  called by patient\n  require { r1 : state = Running; }\n  effect  { doctor.add ({ addr = a }) }\n}\n\nentry declare_consultation (p : tez) {\n  require {\n     r2 : state = Running;\n     r3 : doctor.contains(caller);\n  }\n  effect {\n    doctor.update(caller, { debt += p });\n    deductible_debt += min(p, deductible)\n  }\n}\n\n(* Payment from Insurance to Doctor *)\n\nentry pay_doctor (doc : address) {\n  called by insurer\n  require { r4 : state = Running }\n  effect {\n    var decrease : tez = min(transferred, doctor[doc].debt);\n    transfer decrease to doc;\n    transfer (transferred - decrease) to insurer;\n    doctor.update (doc, { debt -= decrease })\n  }\n}\n\n(* Payments from Patient to Insuance *)\n\nentry pay_fees () {\n  called by patient\n  require { r5 : state = Running }\n  effect {\n    var nb_periods : int = (now - last_fee_date) div fee_period;\n    var due = nb_periods * fee;\n    var decrease : tez = min (transferred, due);\n    transfer decrease to insurer;\n    transfer (transferred - decrease) to patient;\n    last_fee_date += nb_periods * fee_period\n  }\n}\n\nentry pay_deductibles () {\n  called by patient\n  require { r6 : state = Running; }\n  effect {\n    var decrease : tez = min (transferred, deductible_debt);\n    transfer decrease to insurer;\n    transfer (transferred - decrease) to patient;\n    deductible_debt -= decrease\n  }\n}\n"))),(0,i.kt)(d.Z,{value:"michelson",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'# (Pair patient (Pair insurer (Pair fee (Pair fee_period (Pair deductible (Pair 1618187246 (Pair False (Pair False (Pair 0 (Pair 0 {  }))))))))))\n{\n  storage (pair (address %patient) (pair (address %insurer) (pair (mutez %fee) (pair (int %fee_period) (pair (mutez %deductible) (pair (timestamp %last_fee_date) (pair (bool %patient_confirmed) (pair (bool %insurer_confirmed) (pair (mutez %deductible_debt) (pair (nat %_state) (map %doctor address mutez)))))))))));\n  parameter (or (unit %toRunning) (or (unit %confirm) (or (unit %cancel) (or (address %register_doctor) (or (mutez %declare_consultation) (or (address %pay_doctor) (or (unit %pay_fees) (unit %pay_deductibles))))))));\n  code { NIL operation;\n         DIG 1;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { DROP;\n             SELF;\n             ADDRESS;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             DIG 1;\n             DUP;\n             DUG 2;\n             DUP;\n             PUSH nat 0;\n             COMPARE;\n             EQ;\n             IF\n               { NOW;\n                 DIP { DIG 6; DROP };\n                 DUG 6;\n                 PUSH nat 1;\n                 DIP { DIG 2; DROP };\n                 DUG 2 }\n               { PUSH string "InvalidState";\n                 FAILWITH };\n             DROP;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { DROP;\n                 DIG 10;\n                 DUP;\n                 DUG 11;\n                 SENDER;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { PUSH bool True;\n                     DIP { DIG 4; DROP };\n                     DUG 4 }\n                   {  };\n                 DIG 9;\n                 DUP;\n                 DUG 10;\n                 SENDER;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { PUSH bool True;\n                     DIP { DIG 3; DROP };\n                     DUG 3 }\n                   {  };\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 AND;\n                 IF\n                   { DIG 11;\n                     DUP;\n                     DUG 12;\n                     SELF;\n                     ADDRESS;\n                     CONTRACT %toRunning unit;\n                     IF_NONE\n                       { PUSH string "BadContract";\n                         FAILWITH }\n                       {  };\n                     PUSH mutez 0;\n                     UNIT;\n                     TRANSFER_TOKENS;\n                     CONS;\n                     DIP { DIG 11; DROP };\n                     DUG 11 }\n                   {  };\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { IF_LEFT\n                   { DROP;\n                     DIG 10;\n                     DUP;\n                     DUG 11;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     DIG 10;\n                     DUP;\n                     DUG 11;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     OR;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCaller";\n                         FAILWITH }\n                       {  };\n                     PUSH nat 2;\n                     DIP { DIG 1; DROP };\n                     DUG 1;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR }\n                   { IF_LEFT\n                       { DIG 11;\n                         DUP;\n                         DUG 12;\n                         SENDER;\n                         COMPARE;\n                         EQ;\n                         NOT;\n                         IF\n                           { PUSH string "InvalidCaller";\n                             FAILWITH }\n                           {  };\n                         PUSH nat 1;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         COMPARE;\n                         EQ;\n                         NOT;\n                         IF\n                           { PUSH string "InvalidCondition: r1";\n                             FAILWITH }\n                           {  };\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         MEM;\n                         IF\n                           { PUSH string "KeyAlreadyExists";\n                             FAILWITH }\n                           { DIG 1;\n                             DUP;\n                             DUG 2;\n                             PUSH mutez 0;\n                             SOME;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             UPDATE;\n                             DIP { DIG 1; DROP };\n                             DUG 1 };\n                         DROP;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         DIG 1;\n                         PAIR }\n                       { IF_LEFT\n                           { PUSH nat 1;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             COMPARE;\n                             EQ;\n                             NOT;\n                             IF\n                               { PUSH string "InvalidCondition: r2";\n                                 FAILWITH }\n                               {  };\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             SENDER;\n                             MEM;\n                             NOT;\n                             IF\n                               { PUSH string "InvalidCondition: r3";\n                                 FAILWITH }\n                               {  };\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             SENDER;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             ADD;\n                             SOME;\n                             SENDER;\n                             UPDATE;\n                             DIP { DIG 2; DROP };\n                             DUG 2;\n                             DROP;\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             PAIR;\n                             DUP;\n                             UNPAIR;\n                             COMPARE;\n                             LT;\n                             IF\n                               { CAR }\n                               { CDR };\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             ADD;\n                             DIP { DIG 3; DROP };\n                             DUG 3;\n                             DROP;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             DIG 1;\n                             PAIR }\n                           { IF_LEFT\n                               { DIG 10;\n                                 DUP;\n                                 DUG 11;\n                                 SENDER;\n                                 COMPARE;\n                                 EQ;\n                                 NOT;\n                                 IF\n                                   { PUSH string "InvalidCaller";\n                                     FAILWITH }\n                                   {  };\n                                 PUSH nat 1;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 COMPARE;\n                                 EQ;\n                                 NOT;\n                                 IF\n                                   { PUSH string "InvalidCondition: r4";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 GET;\n                                 IF_NONE\n                                   { PUSH string "GetNoneValue";\n                                     FAILWITH }\n                                   {  };\n                                 AMOUNT;\n                                 PAIR;\n                                 DUP;\n                                 UNPAIR;\n                                 COMPARE;\n                                 LT;\n                                 IF\n                                   { CAR }\n                                   { CDR };\n                                 DIG 13;\n                                 DUP;\n                                 DUG 14;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 CONTRACT unit;\n                                 IF_NONE\n                                   { PUSH string "BadContract";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 UNIT;\n                                 TRANSFER_TOKENS;\n                                 CONS;\n                                 DIP { DIG 13; DROP };\n                                 DUG 13;\n                                 DIG 13;\n                                 DUP;\n                                 DUG 14;\n                                 DIG 12;\n                                 DUP;\n                                 DUG 13;\n                                 CONTRACT unit;\n                                 IF_NONE\n                                   { PUSH string "BadContract";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 AMOUNT;\n                                 SUB;\n                                 UNIT;\n                                 TRANSFER_TOKENS;\n                                 CONS;\n                                 DIP { DIG 13; DROP };\n                                 DUG 13;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 GET;\n                                 IF_NONE\n                                   { PUSH string "GetNoneValue";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 SUB;\n                                 SOME;\n                                 DIG 4;\n                                 DUP;\n                                 DUG 5;\n                                 UPDATE;\n                                 DIP { DIG 3; DROP };\n                                 DUG 3;\n                                 DROP 3;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 DIG 1;\n                                 PAIR }\n                               { IF_LEFT\n                                   { DROP;\n                                     DIG 10;\n                                     DUP;\n                                     DUG 11;\n                                     SENDER;\n                                     COMPARE;\n                                     EQ;\n                                     NOT;\n                                     IF\n                                       { PUSH string "InvalidCaller";\n                                         FAILWITH }\n                                       {  };\n                                     PUSH nat 1;\n                                     DIG 2;\n                                     DUP;\n                                     DUG 3;\n                                     COMPARE;\n                                     EQ;\n                                     NOT;\n                                     IF\n                                       { PUSH string "InvalidCondition: r5";\n                                         FAILWITH }\n                                       {  };\n                                     DIG 7;\n                                     DUP;\n                                     DUG 8;\n                                     DIG 6;\n                                     DUP;\n                                     DUG 7;\n                                     NOW;\n                                     SUB;\n                                     EDIV;\n                                     IF_NONE\n                                       { PUSH string "DivByZero";\n                                         FAILWITH }\n                                       { DUP;\n                                         CAR;\n                                         SWAP;\n                                         DROP };\n                                     DIG 9;\n                                     DUP;\n                                     DUG 10;\n                                     PUSH nat 1;\n                                     DIG 2;\n                                     DUP;\n                                     DUG 3;\n                                     PAIR;\n                                     PAIR;\n                                     UNPAIR;\n                                     UNPAIR;\n                                     ABS;\n                                     DIG 2;\n                                     MUL;\n                                     EDIV;\n                                     IF_NONE\n                                       { PUSH string "DivByZero";\n                                         FAILWITH }\n                                       {  };\n                                     CAR;\n                                     DUP;\n                                     AMOUNT;\n                                     PAIR;\n                                     DUP;\n                                     UNPAIR;\n                                     COMPARE;\n                                     LT;\n                                     IF\n                                       { CAR }\n                                       { CDR };\n                                     DIG 14;\n                                     DUP;\n                                     DUG 15;\n                                     DIG 13;\n                                     DUP;\n                                     DUG 14;\n                                     CONTRACT unit;\n                                     IF_NONE\n                                       { PUSH string "BadContract";\n                                         FAILWITH }\n                                       {  };\n                                     DIG 2;\n                                     DUP;\n                                     DUG 3;\n                                     UNIT;\n                                     TRANSFER_TOKENS;\n                                     CONS;\n                                     DIP { DIG 14; DROP };\n                                     DUG 14;\n                                     DIG 14;\n                                     DUP;\n                                     DUG 15;\n                                     DIG 14;\n                                     DUP;\n                                     DUG 15;\n                                     CONTRACT unit;\n                                     IF_NONE\n                                       { PUSH string "BadContract";\n                                         FAILWITH }\n                                       {  };\n                                     DIG 2;\n                                     DUP;\n                                     DUG 3;\n                                     AMOUNT;\n                                     SUB;\n                                     UNIT;\n                                     TRANSFER_TOKENS;\n                                     CONS;\n                                     DIP { DIG 14; DROP };\n                                     DUG 14;\n                                     DIG 10;\n                                     DUP;\n                                     DUG 11;\n                                     PUSH nat 1;\n                                     DIG 4;\n                                     DUP;\n                                     DUG 5;\n                                     PAIR;\n                                     PAIR;\n                                     UNPAIR;\n                                     UNPAIR;\n                                     DIG 2;\n                                     MUL;\n                                     EDIV;\n                                     IF_NONE\n                                       { PUSH string "DivByZero";\n                                         FAILWITH }\n                                       {  };\n                                     CAR;\n                                     DIG 9;\n                                     DUP;\n                                     DUG 10;\n                                     ADD;\n                                     DIP { DIG 8; DROP };\n                                     DUG 8;\n                                     DROP 3;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     DIG 1;\n                                     PAIR }\n                                   { DROP;\n                                     DIG 10;\n                                     DUP;\n                                     DUG 11;\n                                     SENDER;\n                                     COMPARE;\n                                     EQ;\n                                     NOT;\n                                     IF\n                                       { PUSH string "InvalidCaller";\n                                         FAILWITH }\n                                       {  };\n                                     PUSH nat 1;\n                                     DIG 2;\n                                     DUP;\n                                     DUG 3;\n                                     COMPARE;\n                                     EQ;\n                                     NOT;\n                                     IF\n                                       { PUSH string "InvalidCondition: r6";\n                                         FAILWITH }\n                                       {  };\n                                     DIG 2;\n                                     DUP;\n                                     DUG 3;\n                                     AMOUNT;\n                                     PAIR;\n                                     DUP;\n                                     UNPAIR;\n                                     COMPARE;\n                                     LT;\n                                     IF\n                                       { CAR }\n                                       { CDR };\n                                     DIG 12;\n                                     DUP;\n                                     DUG 13;\n                                     DIG 11;\n                                     DUP;\n                                     DUG 12;\n                                     CONTRACT unit;\n                                     IF_NONE\n                                       { PUSH string "BadContract";\n                                         FAILWITH }\n                                       {  };\n                                     DIG 2;\n                                     DUP;\n                                     DUG 3;\n                                     UNIT;\n                                     TRANSFER_TOKENS;\n                                     CONS;\n                                     DIP { DIG 12; DROP };\n                                     DUG 12;\n                                     DIG 12;\n                                     DUP;\n                                     DUG 13;\n                                     DIG 12;\n                                     DUP;\n                                     DUG 13;\n                                     CONTRACT unit;\n                                     IF_NONE\n                                       { PUSH string "BadContract";\n                                         FAILWITH }\n                                       {  };\n                                     DIG 2;\n                                     DUP;\n                                     DUG 3;\n                                     AMOUNT;\n                                     SUB;\n                                     UNIT;\n                                     TRANSFER_TOKENS;\n                                     CONS;\n                                     DIP { DIG 12; DROP };\n                                     DUG 12;\n                                     DUP;\n                                     DIG 4;\n                                     DUP;\n                                     DUG 5;\n                                     SUB;\n                                     DIP { DIG 3; DROP };\n                                     DUG 3;\n                                     DROP;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     DIG 1;\n                                     PAIR } } } } } } } };\n}\n'))),(0,i.kt)(d.Z,{value:"specification",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="healthcare.arl"',title:'"healthcare.arl"'},"specification entry pay_doctor (docid : address) {\n  postcondition p1 {\n    balance = before.balance\n  }\n}\n\nspecification entry pay_fee () {\n  postcondition p2 {\n    balance = before.balance\n  }\n}\n\nspecification entry pay_consulation () {\n  postcondition p3 {\n    balance = before.balance;\n  }\n}\n")))))}D.isMDXComponent=!0}}]);