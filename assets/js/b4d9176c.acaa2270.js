"use strict";(self.webpackChunkcompletium_landing=self.webpackChunkcompletium_landing||[]).push([[6489],{8215:function(n,t,e){var a=e(7294);t.Z=function(n){var t=n.children,e=n.hidden,r=n.className;return a.createElement("div",{role:"tabpanel",hidden:e,className:r},t)}},6396:function(n,t,e){e.d(t,{Z:function(){return I}});var a=e(7462),r=e(7294),i=e(2389),l=e(9443);var o=function(){var n=(0,r.useContext)(l.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},P=e(1968),d=e(6010),u="tabItem_1uMI";function s(n){var t,e,a,i=n.lazy,l=n.block,s=n.defaultValue,I=n.values,D=n.groupId,A=n.className,m=r.Children.map(n.children,(function(n){if((0,r.isValidElement)(n)&&void 0!==n.props.value)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),p=null!=I?I:m.map((function(n){var t=n.props;return{value:t.value,label:t.label}})),U=(0,P.lx)(p,(function(n,t){return n.value===t.value}));if(U.length>0)throw new Error('Docusaurus error: Duplicate values "'+U.map((function(n){return n.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var c=null===s?s:null!=(t=null!=s?s:null==(e=m.find((function(n){return n.props.default})))?void 0:e.props.value)?t:null==(a=m[0])?void 0:a.props.value;if(null!==c&&!p.some((function(n){return n.value===c})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+c+'" but none of its children has the corresponding value. Available values are: '+p.map((function(n){return n.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=o(),R=N.tabGroupChoices,k=N.setTabGroupChoices,S=(0,r.useState)(c),G=S[0],b=S[1],g=[],E=(0,P.o5)().blockElementScrollPositionUntilNextRender;if(null!=D){var h=R[D];null!=h&&h!==G&&p.some((function(n){return n.value===h}))&&b(h)}var C=function(n){var t=n.currentTarget,e=g.indexOf(t),a=p[e].value;a!==G&&(E(t),b(a),null!=D&&k(D,a))},v=function(n){var t,e=null;switch(n.key){case"ArrowRight":var a=g.indexOf(n.currentTarget)+1;e=g[a]||g[0];break;case"ArrowLeft":var r=g.indexOf(n.currentTarget)-1;e=g[r]||g[g.length-1]}null==(t=e)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,d.Z)("tabs",{"tabs--block":l},A)},p.map((function(n){var t=n.value,e=n.label;return r.createElement("li",{role:"tab",tabIndex:G===t?0:-1,"aria-selected":G===t,className:(0,d.Z)("tabs__item",u,{"tabs__item--active":G===t}),key:t,ref:function(n){return g.push(n)},onKeyDown:v,onFocus:C,onClick:C},null!=e?e:t)}))),i?(0,r.cloneElement)(m.filter((function(n){return n.props.value===G}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},m.map((function(n,t){return(0,r.cloneElement)(n,{key:t,hidden:n.props.value!==G})}))))}function I(n){var t=(0,i.Z)();return r.createElement(s,(0,a.Z)({key:String(t)},n))}},6515:function(n,t,e){e.r(t),e.d(t,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return I},toc:function(){return D},default:function(){return m}});var a=e(7462),r=e(3366),i=(e(7294),e(3905)),l=e(9960),o=e(6396),P=e(8215),d=["components"],u={id:"template5",title:"ICO",sidebar_label:"ICO",slug:"/templates/ico"},s=void 0,I={unversionedId:"templates/template5",id:"templates/template5",title:"ICO",description:"Introduction",source:"@site/docs/templates/template5.md",sourceDirName:"templates",slug:"/templates/ico",permalink:"/docs/templates/ico",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template5.md",tags:[],version:"current",frontMatter:{id:"template5",title:"ICO",sidebar_label:"ICO",slug:"/templates/ico"},sidebar:"templates",previous:{title:"DEX",permalink:"/docs/templates/dex"},next:{title:"Autocallable note",permalink:"/docs/templates/acn"}},D=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[],level:3},{value:"Entrypoints",id:"entrypoints",children:[],level:3}],level:2},{value:"Code",id:"code",children:[],level:2}],A={toc:D};function m(n){var t=n.components,e=(0,r.Z)(n,d);return(0,i.kt)("wrapper",(0,a.Z)({},A,e,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"This ICO process is inspired by the 2018 BCDiploma's ICO described in this ",(0,i.kt)("a",{href:"https://github.com/VinceBCD/BCDiploma/tree/master/sources/BCDT/contracts/BCDToken"},"document"),"."),(0,i.kt)("p",null,"Contributors are whitlisted with their address to participate in the ICO. Two whitelists are available:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("em",{parentName:"li"},"silver")," whitelist, with a contribution limit of 10 XTZ maximum"),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("em",{parentName:"li"},"gold")," whitelist, without contribution limit")),(0,i.kt)("p",null,"The minimum transaction is 0.1 XTZ. 100,000,000 tokens go on sale. The ICO takes place in 3 rounds, with a contribution limit for each, and gives rise to different bonuses:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Presale"),", limited to 1800 XTZ, grant 20% more tokens at the time of the contribution"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Round 1"),", limited to the presale cap + 1800 XTZ, grant 10% more tokens during the contribution"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Round 2")," does not give rise to a bonus, limited to the 100 000 000 tokens put up for sale. The XTZ/TOKEN rate is set at 80.")),(0,i.kt)("p",null,"If the cap is reached for each of these rounds, the round is automatically completed. Otherwise, the round can be completed manually by the owner of the smartcontract."),(0,i.kt)("p",null,"Token ownership is handled by a ",(0,i.kt)(l.Z,{to:"/docs/templates/fa12",mdxType:"Link"},"FA 1.2 fungible token")," smart contract. Initial tokens are owned by the ICO contract owner."),(0,i.kt)("h2",{id:"api"},"API"),(0,i.kt)("h3",{id:"storage"},"Storage"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"owner")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"address")),(0,i.kt)("td",{parentName:"tr",align:null},"Address of the contract and intital tokens owner.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"token")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"address")),(0,i.kt)("td",{parentName:"tr",align:null},"Address of the FA 1.2 fungible token.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"min_contribution")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tez")),(0,i.kt)("td",{parentName:"tr",align:null},"Minimum contribution")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"max_contribution_silver")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tez")),(0,i.kt)("td",{parentName:"tr",align:null},"Maximum contribution for ",(0,i.kt)("em",{parentName:"td"},"Silver")," contributors")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"max_token_to_sell")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"nat")),(0,i.kt)("td",{parentName:"tr",align:null},"Number of tokens to sell.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"exchange_rate_tez_tok")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"nat")),(0,i.kt)("td",{parentName:"tr",align:null},"Number of tokens to receive for 1 tez")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"presale_cap")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tez")),(0,i.kt)("td",{parentName:"tr",align:null},"Number of tezies raised at the end of ",(0,i.kt)("em",{parentName:"td"},"presale")," phase")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"round1_cap")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tez")),(0,i.kt)("td",{parentName:"tr",align:null},"Number of tezies raised at the end of ",(0,i.kt)("em",{parentName:"td"},"Round 1")," phase")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"nb_tok_sold")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"nat")),(0,i.kt)("td",{parentName:"tr",align:null},"Number of tokens sold.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"nb_tez_raised")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tez")),(0,i.kt)("td",{parentName:"tr",align:null},"Number of tezis raised.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"contributor")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"collection")),(0,i.kt)("td",{parentName:"tr",align:null},"A contributor is defined by:",(0,i.kt)("ul",null,(0,i.kt)("li",null,"address"),(0,i.kt)("li",null,"type ",(0,i.kt)("em",{parentName:"td"},"Silver")," or ",(0,i.kt)("em",{parentName:"td"},"Gold")),(0,i.kt)("li",null,"Contribution in tezis")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"vstate")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"gstate")),(0,i.kt)("td",{parentName:"tr",align:null},"Contract state")))),(0,i.kt)("h3",{id:"entrypoints"},"Entrypoints"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"register")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"a"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"t")),(0,i.kt)("td",{parentName:"tr",align:null},"Registers address ",(0,i.kt)("inlineCode",{parentName:"td"},"a")," as contributor in whitelist type ",(0,i.kt)("inlineCode",{parentName:"td"},"t"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"startpresale")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"owner")," can start ",(0,i.kt)("em",{parentName:"td"},"Presale")," phase.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"startround1")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"owner")," can start ",(0,i.kt)("em",{parentName:"td"},"Round 1")," phase.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"startround2")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"owner")," can start ",(0,i.kt)("em",{parentName:"td"},"Round 2")," phase.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"finishphase")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"owner")," can finish ICO phase.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"contribute")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"A registered contributor tranfers tezies to this entrypoint and receive tokens in exchange.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"collectraised")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"owner")," can collect contract balance.")))),(0,i.kt)("h2",{id:"code"},"Code"),(0,i.kt)(o.Z,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"}],mdxType:"Tabs"},(0,i.kt)(P.Z,{value:"archetype",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="ico.arl"',title:'"ico.arl"'},"archetype ico(owner : address, token : address)\n\nvariable min_contribution : tez        = 0.1tz\nvariable max_contribution_silver : tez = 10tz\n\nvariable max_token_to_sell     : nat = 100_000_000\nvariable exchange_rate_tez_tok : nat = 80 (* one tez is 80 tokens *)\n\nvariable presales_cap : tez = 1800tz\nvariable round1_cap   : tez = 3600tz\n\nvariable nb_tok_sold   : nat = 0\nvariable nb_tez_raised : tez = 0tz\n\nenum whitelist =\n| Silver\n| Gold\n\nasset contributor identified by id {\n   id           : address;\n   typ          : whitelist;\n   contribution : tez = 0tz;\n}\n\nenum gstate =\n| Init initial\n| PresaleRunning\n| PresaleFinished\n| Round1Running\n| Round1Finished\n| Round2Running\n| Round2Finished\n\nvariable vstate : gstate = Init\n\n\nfunction is_running () : bool {\n  return\n    match vstate with\n    | PresaleRunning | Round1Running | Round2Running -> true\n    | _ -> false\n    end\n}\n\nfunction get_rate () : rational {\n  var coeff : rational =\n    match vstate with\n    | PresaleRunning  -> 1.2\n    | Round1Running   -> 1.1\n    | _               -> 1\n    end;\n  return (coeff * exchange_rate_tez_tok)\n}\n\nfunction get_remaining_tez_to_raise () : tez {\n  return\n    match vstate with\n    | PresaleRunning | PresaleFinished -> presales_cap - nb_tez_raised\n    | Round1Running  | Round1Finished  -> round1_cap - nb_tez_raised\n    | _ -> (((max_token_to_sell - nb_tok_sold) / exchange_rate_tez_tok) * 1tz)\n    end\n}\n\nfunction transition_to_finished () : gstate {\n  return\n    match vstate with\n    | PresaleRunning -> PresaleFinished\n    | Round1Running  -> Round1Finished\n    | Round1Finished -> Round2Running\n    | _              -> Round2Finished\n    end\n}\n\nentry register(a : address, t : whitelist) {\n  called by owner\n  require { r0 : vstate = Init }\n  effect { contributor.add({ id = a; typ = t }) }\n}\n\nentry startpresales() {\n  called by owner\n  require { r1 : vstate = Init }\n  effect { vstate := PresaleRunning }\n}\n\nentry startround1() {\n    called by owner\n    require { r2: vstate = PresaleFinished }\n    effect { vstate := Round1Running }\n}\n\nentry startround2() {\n    called by owner\n    require { r3: vstate = Round1Finished }\n    effect { vstate := Round2Running }\n}\n\nentry finishphase () {\n  called by owner\n  require { r4: is_running() }\n  effect { vstate := transition_to_finished() }\n}\n\nentry contribute () {\n  require {\n     c1 : contributor.contains(caller);\n     c2 : is_running ();\n     c3 : transferred >= min_contribution;\n  }\n  effect {\n    (* cap contribution to max_contrib if necessary *)\n    var contrib = transferred;\n    if    contributor[caller].typ = Silver\n      and contributor[caller].contribution + contrib >= max_contribution_silver\n    then contrib := max_contribution_silver - contributor[caller].contribution;\n    (* cap contribution to round cap if necessary *)\n    var remaining_tez : tez = get_remaining_tez_to_raise ();\n    if remaining_tez <= contrib\n    then (\n      contrib := remaining_tez;\n      vstate := transition_to_finished ()\n    );\n    (* convert contribution to nb of bcd tokens *)\n    var nb_tokens : nat = get_rate() * contrib;\n    (* transfer tokens to contributor *)\n    transfer 0tz to token\n        call %transfer<address * address * nat>((owner, caller, nb_tokens));\n    (* update ico stats *)\n    nb_tok_sold   += nb_tokens;\n    nb_tez_raised += contrib;\n    (* update caller's contribution *)\n    contributor[caller].contribution += contrib;\n    if contrib <= transferred\n    then transfer (transferred - contrib) to caller\n  }\n}\n\nentry collectraised () {\n    called by owner\n    require { r5: vstate = Round2Finished }\n    effect { transfer balance to owner }\n}\n"))),(0,i.kt)(P.Z,{value:"michelson",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'# (Pair owner (Pair token (Pair 100000 (Pair 10000000 (Pair 100000000 (Pair 80 (Pair 1800000000 (Pair 3600000000 (Pair 0 (Pair 0 (Pair 0 {  })))))))))))\n{\n  storage (pair (address %owner) (pair (address %token) (pair (mutez %min_contribution) (pair (mutez %max_contribution_silver) (pair (nat %max_token_to_sell) (pair (nat %exchange_rate_tez_tok) (pair (mutez %presales_cap) (pair (mutez %round1_cap) (pair (nat %nb_tok_sold) (pair (mutez %nb_tez_raised) (pair (nat %vstate) (map %contributor address (pair (nat %typ) (mutez %contribution))))))))))))));\n  parameter (or (pair %register (address %a) (nat %t)) (or (unit %startpresales) (or (unit %startround1) (or (unit %startround2) (or (unit %finishphase) (or (unit %contribute) (unit %collectraised)))))));\n  code { LAMBDA\n           nat\n           bool\n           { PUSH unit Unit;\n             DIG 1;\n             DUP;\n             DUG 2;\n             DUP;\n             PUSH nat 1;\n             COMPARE;\n             EQ;\n             IF\n               { PUSH bool True }\n               { DUP;\n                 PUSH nat 3;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { PUSH bool True }\n                   { DUP;\n                     PUSH nat 5;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { PUSH bool True }\n                       { PUSH bool False } } };\n             DIP { DROP };\n             SWAP;\n             DROP;\n             DUG 1;\n             DROP };\n         LAMBDA\n           (pair nat nat)\n           (pair int nat)\n           { UNPAIR;\n             SWAP;\n             PUSH unit Unit;\n             DIG 1;\n             DUP;\n             DUG 2;\n             DUP;\n             PUSH nat 1;\n             COMPARE;\n             EQ;\n             IF\n               { PUSH nat 5;\n                 PUSH int 6;\n                 PAIR }\n               { DUP;\n                 PUSH nat 3;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { PUSH nat 10;\n                     PUSH int 11;\n                     PAIR }\n                   { PUSH nat 1;\n                     PUSH int 1;\n                     PAIR } };\n             DIP { DROP };\n             PUSH nat 1;\n             DIG 4;\n             DUP;\n             DUG 5;\n             INT;\n             PAIR;\n             DIG 1;\n             DUP;\n             DUG 2;\n             PAIR;\n             UNPAIR;\n             DIP { UNPAIR };\n             UNPAIR;\n             DIP { SWAP };\n             MUL;\n             DIP { MUL };\n             PAIR;\n             DIP { DIG 1; DROP };\n             DUG 1;\n             DROP;\n             DUG 2;\n             DROP 2 };\n         LAMBDA\n           (pair nat (pair nat (pair nat (pair mutez (pair mutez (pair mutez nat))))))\n           mutez\n           { UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             PUSH unit Unit;\n             DIG 1;\n             DUP;\n             DUG 2;\n             DUP;\n             PUSH nat 1;\n             COMPARE;\n             EQ;\n             IF\n               { DIG 4;\n                 DUP;\n                 DUG 5;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 SUB }\n               { DUP;\n                 PUSH nat 2;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { DIG 4;\n                     DUP;\n                     DUG 5;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     SUB }\n                   { DUP;\n                     PUSH nat 3;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         SUB }\n                       { DUP;\n                         PUSH nat 4;\n                         COMPARE;\n                         EQ;\n                         IF\n                           { DIG 4;\n                             DUP;\n                             DUG 5;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             SUB }\n                           { PUSH mutez 1000000;\n                             PUSH nat 1;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             INT;\n                             PAIR;\n                             PUSH nat 1;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             INT;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             INT;\n                             SUB;\n                             PAIR;\n                             PAIR;\n                             UNPAIR;\n                             DIP { UNPAIR };\n                             UNPAIR;\n                             DIG 3;\n                             PUSH int 0;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             COMPARE;\n                             GE;\n                             IF\n                               { INT }\n                               { NEG };\n                             MUL;\n                             DIP { MUL; ABS };\n                             PAIR;\n                             PAIR;\n                             UNPAIR;\n                             UNPAIR;\n                             ABS;\n                             DIG 2;\n                             MUL;\n                             EDIV;\n                             IF_NONE\n                               { PUSH string "DivByZero";\n                                 FAILWITH }\n                               {  };\n                             CAR } } } };\n             DIP { DROP };\n             SWAP;\n             DROP;\n             DUG 7;\n             DROP 7 };\n         LAMBDA\n           nat\n           nat\n           { PUSH unit Unit;\n             DIG 1;\n             DUP;\n             DUG 2;\n             DUP;\n             PUSH nat 1;\n             COMPARE;\n             EQ;\n             IF\n               { PUSH nat 2 }\n               { DUP;\n                 PUSH nat 3;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { PUSH nat 4 }\n                   { DUP;\n                     PUSH nat 4;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { PUSH nat 5 }\n                       { PUSH nat 6 } } };\n             DIP { DROP };\n             SWAP;\n             DROP;\n             DUG 1;\n             DROP };\n         NIL operation;\n         DIG 5;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { UNPAIR;\n             SWAP;\n             DIG 13;\n             DUP;\n             DUG 14;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             PUSH nat 0;\n             DIG 4;\n             DUP;\n             DUG 5;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCondition: r0";\n                 FAILWITH }\n               {  };\n             DIG 2;\n             DUP;\n             DUG 3;\n             DIG 2;\n             DUP;\n             DUG 3;\n             MEM;\n             IF\n               { PUSH string "KeyAlreadyExists";\n                 FAILWITH }\n               { DIG 2;\n                 DUP;\n                 DUG 3;\n                 PUSH mutez 0;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 PAIR;\n                 SOME;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 UPDATE;\n                 DIP { DIG 2; DROP };\n                 DUG 2 };\n             DROP 2;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { DROP;\n                 DIG 11;\n                 DUP;\n                 DUG 12;\n                 SENDER;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCaller";\n                     FAILWITH }\n                   {  };\n                 PUSH nat 0;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCondition: r1";\n                     FAILWITH }\n                   {  };\n                 PUSH nat 1;\n                 DIP { DIG 1; DROP };\n                 DUG 1;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { IF_LEFT\n                   { DROP;\n                     DIG 11;\n                     DUP;\n                     DUG 12;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCaller";\n                         FAILWITH }\n                       {  };\n                     PUSH nat 2;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCondition: r2";\n                         FAILWITH }\n                       {  };\n                     PUSH nat 3;\n                     DIP { DIG 1; DROP };\n                     DUG 1;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR }\n                   { IF_LEFT\n                       { DROP;\n                         DIG 11;\n                         DUP;\n                         DUG 12;\n                         SENDER;\n                         COMPARE;\n                         EQ;\n                         NOT;\n                         IF\n                           { PUSH string "InvalidCaller";\n                             FAILWITH }\n                           {  };\n                         PUSH nat 4;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         COMPARE;\n                         EQ;\n                         NOT;\n                         IF\n                           { PUSH string "InvalidCondition: r3";\n                             FAILWITH }\n                           {  };\n                         PUSH nat 5;\n                         DIP { DIG 1; DROP };\n                         DUG 1;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         DIG 1;\n                         PAIR }\n                       { IF_LEFT\n                           { DROP;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             SENDER;\n                             COMPARE;\n                             EQ;\n                             NOT;\n                             IF\n                               { PUSH string "InvalidCaller";\n                                 FAILWITH }\n                               {  };\n                             DIG 16;\n                             DUP;\n                             DUG 17;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             EXEC;\n                             NOT;\n                             IF\n                               { PUSH string "InvalidCondition: r4";\n                                 FAILWITH }\n                               {  };\n                             DIG 13;\n                             DUP;\n                             DUG 14;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             EXEC;\n                             DIP { DIG 1; DROP };\n                             DUG 1;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             DIG 1;\n                             PAIR }\n                           { IF_LEFT\n                               { DROP;\n                                 DUP;\n                                 SENDER;\n                                 MEM;\n                                 NOT;\n                                 IF\n                                   { PUSH string "InvalidCondition: c1";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 16;\n                                 DUP;\n                                 DUG 17;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 EXEC;\n                                 NOT;\n                                 IF\n                                   { PUSH string "InvalidCondition: c2";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 9;\n                                 DUP;\n                                 DUG 10;\n                                 AMOUNT;\n                                 COMPARE;\n                                 GE;\n                                 NOT;\n                                 IF\n                                   { PUSH string "InvalidCondition: c3";\n                                     FAILWITH }\n                                   {  };\n                                 AMOUNT;\n                                 DIG 9;\n                                 DUP;\n                                 DUG 10;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 SENDER;\n                                 GET;\n                                 IF_NONE\n                                   { PUSH string "GetNoneValue";\n                                     FAILWITH }\n                                   {  };\n                                 CDR;\n                                 ADD;\n                                 COMPARE;\n                                 GE;\n                                 PUSH nat 0;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 SENDER;\n                                 GET;\n                                 IF_NONE\n                                   { PUSH string "GetNoneValue";\n                                     FAILWITH }\n                                   {  };\n                                 CAR;\n                                 COMPARE;\n                                 EQ;\n                                 AND;\n                                 IF\n                                   { DIG 1;\n                                     DUP;\n                                     DUG 2;\n                                     SENDER;\n                                     GET;\n                                     IF_NONE\n                                       { PUSH string "GetNoneValue";\n                                         FAILWITH }\n                                       {  };\n                                     CDR;\n                                     DIG 10;\n                                     DUP;\n                                     DUG 11;\n                                     SUB;\n                                     SWAP;\n                                     DROP }\n                                   {  };\n                                 DIG 15;\n                                 DUP;\n                                 DUG 16;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 DIG 8;\n                                 DUP;\n                                 DUG 9;\n                                 PAIR;\n                                 DIG 5;\n                                 DUP;\n                                 DUG 6;\n                                 PAIR;\n                                 DIG 7;\n                                 DUP;\n                                 DUG 8;\n                                 PAIR;\n                                 DIG 10;\n                                 DUP;\n                                 DUG 11;\n                                 PAIR;\n                                 DIG 6;\n                                 DUP;\n                                 DUG 7;\n                                 PAIR;\n                                 DIG 9;\n                                 DUP;\n                                 DUG 10;\n                                 PAIR;\n                                 EXEC;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 COMPARE;\n                                 LE;\n                                 IF\n                                   { DUP;\n                                     DIP { DIG 1; DROP };\n                                     DUG 1;\n                                     DIG 15;\n                                     DUP;\n                                     DUG 16;\n                                     DIG 4;\n                                     DUP;\n                                     DUG 5;\n                                     EXEC;\n                                     DIP { DIG 3; DROP };\n                                     DUG 3 }\n                                   {  };\n                                 PUSH mutez 1;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 DIG 19;\n                                 DUP;\n                                 DUG 20;\n                                 DIG 6;\n                                 DUP;\n                                 DUG 7;\n                                 DIG 12;\n                                 DUP;\n                                 DUG 13;\n                                 PAIR;\n                                 EXEC;\n                                 PAIR;\n                                 UNPAIR;\n                                 UNPAIR;\n                                 ABS;\n                                 DIG 2;\n                                 MUL;\n                                 EDIV;\n                                 IF_NONE\n                                   { PUSH string "DivByZero";\n                                     FAILWITH }\n                                   {  };\n                                 CAR;\n                                 EDIV;\n                                 IF_NONE\n                                   { PUSH string "DivByZero";\n                                     FAILWITH }\n                                   { DUP;\n                                     CAR;\n                                     SWAP;\n                                     DROP };\n                                 DIG 15;\n                                 DUP;\n                                 DUG 16;\n                                 DIG 14;\n                                 DUP;\n                                 DUG 15;\n                                 CONTRACT %transfer (pair address (pair address nat));\n                                 IF_NONE\n                                   { PUSH string "BadContract";\n                                     FAILWITH }\n                                   {  };\n                                 PUSH mutez 0;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 SENDER;\n                                 PAIR;\n                                 DIG 18;\n                                 DUP;\n                                 DUG 19;\n                                 PAIR;\n                                 TRANSFER_TOKENS;\n                                 CONS;\n                                 DIP { DIG 15; DROP };\n                                 DUG 15;\n                                 DUP;\n                                 DIG 7;\n                                 DUP;\n                                 DUG 8;\n                                 ADD;\n                                 DIP { DIG 6; DROP };\n                                 DUG 6;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 DIG 6;\n                                 DUP;\n                                 DUG 7;\n                                 ADD;\n                                 DIP { DIG 5; DROP };\n                                 DUG 5;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 SENDER;\n                                 GET;\n                                 IF_NONE\n                                   { PUSH string "GetNoneValue";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 4;\n                                 DUP;\n                                 DUG 5;\n                                 DIG 5;\n                                 DUP;\n                                 DUG 6;\n                                 SENDER;\n                                 GET;\n                                 IF_NONE\n                                   { PUSH string "GetNoneValue";\n                                     FAILWITH }\n                                   {  };\n                                 UNPAIR;\n                                 SWAP;\n                                 DROP;\n                                 DIG 5;\n                                 DUP;\n                                 DUG 6;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 CDR;\n                                 ADD;\n                                 SWAP;\n                                 PAIR;\n                                 SOME;\n                                 SENDER;\n                                 UPDATE;\n                                 DIP { DIG 4; DROP };\n                                 DUG 4;\n                                 DROP;\n                                 AMOUNT;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 COMPARE;\n                                 LE;\n                                 IF\n                                   { DIG 15;\n                                     DUP;\n                                     DUG 16;\n                                     SENDER;\n                                     CONTRACT unit;\n                                     IF_NONE\n                                       { PUSH string "BadContract";\n                                         FAILWITH }\n                                       {  };\n                                     DIG 4;\n                                     DUP;\n                                     DUG 5;\n                                     AMOUNT;\n                                     SUB;\n                                     UNIT;\n                                     TRANSFER_TOKENS;\n                                     CONS;\n                                     DIP { DIG 15; DROP };\n                                     DUG 15 }\n                                   {  };\n                                 DROP 3;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 DIG 1;\n                                 PAIR }\n                               { DROP;\n                                 DIG 11;\n                                 DUP;\n                                 DUG 12;\n                                 SENDER;\n                                 COMPARE;\n                                 EQ;\n                                 NOT;\n                                 IF\n                                   { PUSH string "InvalidCaller";\n                                     FAILWITH }\n                                   {  };\n                                 PUSH nat 6;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 COMPARE;\n                                 EQ;\n                                 NOT;\n                                 IF\n                                   { PUSH string "InvalidCondition: r5";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 12;\n                                 DUP;\n                                 DUG 13;\n                                 DIG 12;\n                                 DUP;\n                                 DUG 13;\n                                 CONTRACT unit;\n                                 IF_NONE\n                                   { PUSH string "BadContract";\n                                     FAILWITH }\n                                   {  };\n                                 BALANCE;\n                                 UNIT;\n                                 TRANSFER_TOKENS;\n                                 CONS;\n                                 DIP { DIG 12; DROP };\n                                 DUG 12;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 DIG 1;\n                                 PAIR } } } } } };\n         DIP { DROP 4 } };\n}\n')))))}m.isMDXComponent=!0}}]);