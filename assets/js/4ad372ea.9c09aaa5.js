(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{125:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return b})),n.d(t,"default",(function(){return d}));var a=n(3),o=(n(0),n(238)),i=n(239),c=n(252),r=n(253);const l={id:"verification5",title:"Postcondition",sidebar_label:"Postcondition",slug:"/verification/postcondition",hide_title:!1},s={unversionedId:"verification/verification5",id:"verification/verification5",isDocsHomePage:!1,title:"Postcondition",description:"An entrypoint's postcondition says what the execution of the entrypoint changes in the contract storage when it does not fail.",source:"@site/docs/verification/verification5.md",slug:"/verification/postcondition",permalink:"/docs/verification/postcondition",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/verification/verification5.md",version:"current",sidebar_label:"Postcondition",sidebar:"verification",previous:{title:"Introduction",permalink:"/docs/verification/specification"},next:{title:"Failure",permalink:"/docs/verification/fail"}},b=[{value:"Basics",id:"basics",children:[]},{value:"No change",id:"no-change",children:[]},{value:"Branches",id:"branches",children:[]},{value:"Collections",id:"collections",children:[{value:"Identified object",id:"identified-object",children:[]},{value:"No change",id:"no-change-1",children:[]},{value:"Unknown ids",id:"unknown-ids",children:[]}]}],p={toc:b};function d({components:e,...t}){return Object(o.b)("wrapper",Object(a.a)({},p,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,"An entrypoint's postcondition says what the execution of the entrypoint changes in the contract storage when it does not fail."),Object(o.b)("p",null,"Say the contract storage is made of ",Object(o.b)("em",{parentName:"p"},"S")," items (int, string, map, list, ...) and that the contract code is made of ",Object(o.b)("em",{parentName:"p"},"E")," entrypoints. There is ",Object(o.b)("em",{parentName:"p"},"S")," postconditions to describe the effect of one entrpoint on the ",Object(o.b)("em",{parentName:"p"},"S")," storage items, which is a total number of postconditions of ",Object(o.b)("em",{parentName:"p"},"E")," * ",Object(o.b)("em",{parentName:"p"},"S")," for the entire contract."),Object(o.b)("h2",{id:"basics"},"Basics"),Object(o.b)("p",null,"Consider the basic contract with one storage item ",Object(o.b)("inlineCode",{parentName:"p"},"value")," and one entrypoint ",Object(o.b)("inlineCode",{parentName:"p"},"set"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},'archetype trivial\nvariable value : string = ""\nentry set(v : string) { value := v }\n')),Object(o.b)("p",null,"There needs only one postcondition to describe the effect of the entrypoint on the storage:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"specification entry set(v : string) {\n  postcondition p {\n    value = v\n  }\n}\n")),Object(o.b)("p",null,"If the entrypoint can only be called by the ",Object(o.b)("inlineCode",{parentName:"p"},"owner")," address, the postcondition becomes:"),Object(o.b)(c.a,{defaultValue:"specification",values:[{label:"Specification",value:"specification"},{label:"Entrypoint",value:"archetype"}],mdxType:"Tabs"},Object(o.b)(r.a,{value:"specification",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"caller = owner -> value = v\n"))),Object(o.b)(r.a,{value:"archetype",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype",metastring:"{2}","{2}":!0},"entry set(v : string) {\n  called by owner\n  effect {\n    value := v\n  }\n}\n")))),Object(o.b)("p",null,"The form of the postcondition above is:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"<CONDITION> -> <CHANGE>\n")),Object(o.b)("p",null,"which reads ",Object(o.b)("em",{parentName:"p"},"If")," ",Object(o.b)("inlineCode",{parentName:"p"},"CONDITION")," holds, ",Object(o.b)("em",{parentName:"p"},"then")," ",Object(o.b)("inlineCode",{parentName:"p"},"CHANGE")," ",Object(o.b)("em",{parentName:"p"},"occurs"),", or ",Object(o.b)("inlineCode",{parentName:"p"},"CONDITION")," ",Object(o.b)("em",{parentName:"p"},"implies")," ",Object(o.b)("inlineCode",{parentName:"p"},"CHANGE"),"."),Object(o.b)("h2",{id:"no-change"},"No change"),Object(o.b)("p",null,"When an entrypoint does not change a storage item, it is stated with the following postcondition:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"}," <ITEM> = before.<ITEM>\n")),Object(o.b)("p",null,"The prefix keyword ",Object(o.b)("inlineCode",{parentName:"p"},"before")," is used to refer to the state of the storage item ",Object(o.b)("inlineCode",{parentName:"p"},"ITEM")," ",Object(o.b)("em",{parentName:"p"},"before")," entrypoint execution. The storage item without prefix refers to the storage item ",Object(o.b)("em",{parentName:"p"},"after")," entrypoint execution."),Object(o.b)("p",null,"For example, below is the postcondition for the entrypoint ",Object(o.b)("inlineCode",{parentName:"p"},"transfer")," of the ",Object(o.b)(i.a,{to:"/docs/templates/fa12",mdxType:"Link"},"FA 1.2")," fungible token contract regarding the ",Object(o.b)("inlineCode",{parentName:"p"},"ledger")," storage item. It states that this storage item does not change if the parameter address ",Object(o.b)("inlineCode",{parentName:"p"},"%from")," is equal to the parameter address ",Object(o.b)("inlineCode",{parentName:"p"},"%to"),":"),Object(o.b)(c.a,{defaultValue:"specification",values:[{label:"Specification",value:"specification"},{label:"Entrypoint",value:"archetype"}],mdxType:"Tabs"},Object(o.b)(r.a,{value:"specification",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"%from = %to -> ledger = before.ledger\n"))),Object(o.b)(r.a,{value:"archetype",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype",metastring:"{11,12}","{11,12}":!0},'entry %transfer (%from : address, %to : address, value : nat) {\n  require {\n    r1 otherwise "NotEnoughBalance" : ledger[%from].tokens >= value;\n  }\n  effect {\n    if caller <> %from then (\n      var current = allowance[(%from, caller)].amount;\n      dofailif(current < value, ("NotEnoughAllowance", ((value, current))));\n      allowance.update((%from, caller), { amount -=  value });\n    );\n    ledger.update(%from, { tokens -= value });\n    ledger.addupdate(%to, { tokens += value });\n  }\n}\n')),Object(o.b)("p",null,"The postcondition is not trivial since the code explicitely states how it changes the ",Object(o.b)("inlineCode",{parentName:"p"},"ledger")," asset, as highlighted in the code above. However, if ",Object(o.b)("inlineCode",{parentName:"p"},"%from")," equals ",Object(o.b)("inlineCode",{parentName:"p"},"%to"),", then there is no final change in the ",Object(o.b)("inlineCode",{parentName:"p"},"ledger")," item since ",Object(o.b)("inlineCode",{parentName:"p"},"value")," is subtracted and then added back to the address entry."))),Object(o.b)("h2",{id:"branches"},"Branches"),Object(o.b)("p",null,"To be complete, the postcondition above must say what changes when ",Object(o.b)("inlineCode",{parentName:"p"},"%from")," is different from ",Object(o.b)("inlineCode",{parentName:"p"},"%to"),"."),Object(o.b)("p",null,"A general form of the postcondition is actually:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"<CONDITION1> -> <CHANGE1> and\n<CONDITION2> -> <CHANGE2> and\n...\n<CONDITIONn> -> <CHANGEn>\n")),Object(o.b)("p",null,"where conditions 1 to n are such that they cover all branches of execution. More formally, conditions are such that the following statement is true:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"<CONDITION1> or <CONDITION2> or ... <CONDITIONn>\n")),Object(o.b)("p",null,"The postcondition for the ",Object(o.b)("inlineCode",{parentName:"p"},"tranfer")," entrypoint regarding the ",Object(o.b)("inlineCode",{parentName:"p"},"ledger")," item is then:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"%from =  %to ->  ledger = before.ledger and\n%from <> %to ->  <CHANGE>\n")),Object(o.b)("p",null,"Note that it is equivalent either to declare one postcondition formed as the conjunction of n implication statements, or to declare n postconditions of the form of an implication:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"postcondition p {\n  <CONDITION1> -> <CHANGE1> and <CONDITION2> -> <CHANGE2>\n}\n")),Object(o.b)("p",null,"is equivalent to:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"postcondition p1 {\n  <CONDITION1> -> <CHANGE1>\n}\n\npostcondition p2 {\n  <CONDITION2> -> <CHANGE2>\n}\n")),Object(o.b)("p",null,"The later form is preferred since it attributes an id to each implication statement, making the output from the formal system in charge of proving them more explicit."),Object(o.b)("h2",{id:"collections"},"Collections"),Object(o.b)("p",null,"This section deals with collections of pairs of key and value. Archetype provides 3 types of collections: Michelson ",Object(o.b)("em",{parentName:"p"},"map")," and ",Object(o.b)("em",{parentName:"p"},"big_map"),", and ",Object(o.b)(i.a,{to:"/docs/contract/tuto/archetype-assets",mdxType:"Link"},"asset")," used in examples below."),Object(o.b)("p",null,"Conversly to code language, retrieving an asset with key ",Object(o.b)("inlineCode",{parentName:"p"},"k")," from an asset collection ",Object(o.b)("inlineCode",{parentName:"p"},"c")," does not fail and the non existence is managed with the keyword ",Object(o.b)("inlineCode",{parentName:"p"},"otherwise"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"let some a = c[k] in\n  <EXISTSk>   (* there is an asset with key 'k' *)\notherwise\n  <NOTEXISTk> (* there is no asset with key 'k' *)\n")),Object(o.b)("h3",{id:"identified-object"},"Identified object"),Object(o.b)("p",null,"When an object ",Object(o.b)("inlineCode",{parentName:"p"},"a")," with known id ",Object(o.b)("inlineCode",{parentName:"p"},"k"),"  in a collection ",Object(o.b)("inlineCode",{parentName:"p"},"c")," is changed, the postcondition has the following structure:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"let some a = c[k] in\n  let some ba = before.c[k] in\n      <CHANGE>\n  otherwise\n      <NOTEXISTkBEFORE>\notherwise\n  <NOTEXISTkAFTER>\n")),Object(o.b)("p",null,"where:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"a")," is the object associated to ",Object(o.b)("inlineCode",{parentName:"li"},"k")," ",Object(o.b)("em",{parentName:"li"},"after")," entrypoint execution"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ba")," is the object associated to ",Object(o.b)("inlineCode",{parentName:"li"},"k")," ",Object(o.b)("em",{parentName:"li"},"before")," execution"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CHANGE")," is the change in object a statement"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"NOTEXISTkBEFORE")," is the statement when ",Object(o.b)("inlineCode",{parentName:"li"},"a")," does not exist ",Object(o.b)("em",{parentName:"li"},"before")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"NOTEXISTkAFTER")," is the statement when ",Object(o.b)("inlineCode",{parentName:"li"},"a")," does not exist ",Object(o.b)("em",{parentName:"li"},"after"))),Object(o.b)("p",null,"For example, below is the postcondition ",Object(o.b)("inlineCode",{parentName:"p"},"p3_approve")," for the entrypoint ",Object(o.b)("inlineCode",{parentName:"p"},"approve")," of the ",Object(o.b)(i.a,{to:"/docs/templates/fa12",mdxType:"Link"},"FA 1.2")," fungible token contract regarding the ",Object(o.b)("inlineCode",{parentName:"p"},"allowance")," asset with key ",Object(o.b)("inlineCode",{parentName:"p"},"(caller,spender)"),". It corresponds to the ",Object(o.b)("inlineCode",{parentName:"p"},"addupdate")," code instruction."),Object(o.b)(c.a,{defaultValue:"specification",values:[{label:"Specification",value:"specification"},{label:"Entrypoint",value:"archetype"}],mdxType:"Tabs"},Object(o.b)(r.a,{value:"specification",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"let some a = allowance[(caller,spender)] in\n  let some ba = before.allowance[(caller,spender)] in\n    (* object is updated when object exists before *)\n    a = { ba with amount = value }\n  otherwise\n    (* object is added when it does not exist before *)\n    a = { addr_owner = caller; addr_spender = spender; amount = value }\notherwise\n  false\n"))),Object(o.b)(r.a,{value:"archetype",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype",metastring:"{7}","{7}":!0},'entry approve(spender : address, value : nat) {\n  var k = (caller, spender);\n  if allowance.contains(k) then (\n    var previous = allowance[k].amount;\n    dofailif(previous > 0 and value > 0, (("UnsafeAllowanceChange", previous)));\n  );\n  allowance.addupdate( k, { amount = value });\n}\n')))),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"false")," statement means there is a logical contradiction. In the case above, it is not possible that the object with key ",Object(o.b)("inlineCode",{parentName:"p"},"(caller,spender)")," does not exist, as it is the semantic of the ",Object(o.b)("inlineCode",{parentName:"p"},"addupdate")," instruction (see code above in 'entrypoint' tab)."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"otherwise")," statements are presented below for instructions ",Object(o.b)("inlineCode",{parentName:"p"},"add"),", ",Object(o.b)("inlineCode",{parentName:"p"},"remove"),", ",Object(o.b)("inlineCode",{parentName:"p"},"update")," and ",Object(o.b)("inlineCode",{parentName:"p"},"addupdate"),":"),Object(o.b)(c.a,{defaultValue:"add",values:[{label:"Add",value:"add"},{label:"Remove",value:"remove"},{label:"Update",value:"update"},{label:"Addupdate",value:"addupdate"}],mdxType:"Tabs"},Object(o.b)(r.a,{value:"add",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"let some a = c[k] in\n  let some ba = before.c[k] in\n    false (* add fails if key already exists *)\n  otherwise\n    a = <ADDEDOBJECT>\notherwise\n  false (* object should exist after *)\n"))),Object(o.b)(r.a,{value:"remove",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"let some a = c[k] in\n  false (* object should not exist after *)\notherwise\n  let some ba = before.c[k] in\n    <REMOVED> (* say something about removed object *)\n  otherwise\n    false (* remove fails if key not found *)\n"))),Object(o.b)(r.a,{value:"update",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"let some a = c[k] in\n  let some ba = before.c[k] in\n    a = { ba with <CHANGES> }\n  otherwise\n    false (* update fails if key not found *)\notherwise\n  false (* update does not remove object *)\n"))),Object(o.b)(r.a,{value:"addupdate",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"let some a = c[k] in\n  let some ba = before.c[k] in\n    a = { ba with <CHANGES> }\n  otherwise\n    a = <ADDEDOBJECT>\notherwise\n  false (* update does not remove object *)\n")))),Object(o.b)("h3",{id:"no-change-1"},"No change"),Object(o.b)("p",null,"Postconditions say which objects are ",Object(o.b)("strong",{parentName:"p"},"not")," changed with a statement of the following form:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"forall a in c,\n  <NOTCHANGED> ->\n  let some ba = before.c[k] in\n    a = ba\n  otherwise\n    false\n")),Object(o.b)("p",null,"where ",Object(o.b)("inlineCode",{parentName:"p"},"CHANGED")," is the statement to say that object ",Object(o.b)("inlineCode",{parentName:"p"},"a")," is not a changed object."),Object(o.b)("p",null,"When object with key ",Object(o.b)("inlineCode",{parentName:"p"},"k")," is the only object changed, the postcondition is:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"forall a in c,\n  a.<KEY> <> k ->\n  let some ba = before.c[k] in\n    a = ba\n  otherwise\n    false\n")),Object(o.b)("p",null,"where ",Object(o.b)("inlineCode",{parentName:"p"},"KEY")," is the key field of the asset."),Object(o.b)("h3",{id:"unknown-ids"},"Unknown ids"),Object(o.b)("p",null,"When changed objects are not known by their ids, but rather by a business rule based on object data, the goal is to state the effect of the change on the collection."),Object(o.b)("p",null,"For example, below is the postcondition ",Object(o.b)("inlineCode",{parentName:"p"},"p2")," for the entrypoint ",Object(o.b)("inlineCode",{parentName:"p"},"consume")," of the ",Object(o.b)(i.a,{to:"/docs/templates/miles",mdxType:"Link"},"Miles")," contract. It states that the entrypoint reduces by parameter value ",Object(o.b)("inlineCode",{parentName:"p"},"quantity")," the total number of miles, which is the business intent of the entrypoint:"),Object(o.b)(c.a,{defaultValue:"specification",values:[{label:"Specification",value:"specification"},{label:"Entrypoint",value:"archetype"}],mdxType:"Tabs"},Object(o.b)(r.a,{value:"specification",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"}," mile.sum(the.amount) = before.mile.sum(the.amount) - quantity\n")),Object(o.b)("p",null,"The total number of miles is obtained by summing the field ",Object(o.b)("inlineCode",{parentName:"p"},"amount")," because miles are stored per bunch associated to an expiration date.")),Object(o.b)(r.a,{value:"archetype",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},'entry consume (ow : address, quantity : nat) {\n  called by admin\n  effect {\n    var lview = owner[ow].miles.sort(expiration).select(the.expiration >= now);\n    dorequire (lview.sum(the.amount) >= quantity, "NotEnoughMiles");\n    var remainder = quantity;\n    for : loop m in lview do\n      if remainder > 0 then begin\n        if mile[m].amount > remainder then begin\n          mile.update(m, { amount -= remainder });\n          remainder := 0\n        end else if mile[m].amount = remainder then begin\n          remainder := 0;\n          owner[ow].miles.remove(m)\n        end else begin\n          remainder -= mile[m].amount;\n          owner[ow].miles.remove(m)\n        end\n      end\n    done;\n    assert p1\n  }\n}\n')))),Object(o.b)("p",null,"Note that in this case, it is more complex to state exactly which miles are changed or not changed, as it is the result of an iteration process over a sorted and filtered set of miles."),Object(o.b)("p",null,"It is interesting though to make sure that only not expired miles are consumed (removed), since it is another key functional element of the contract:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"forall m in removed.mile, m.expiration > now\n")),Object(o.b)("p",null,"Note that Archetype specification language provides convenient handlers for removed or added assets. Another way to phrase this property is:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-archetype"},"forall bm in before.mile,\n let some m = mile[bm.id] in\n  false (* no mile is added by the entrypoint *)\n otherwise\n  m.expiration > now\n")))}d.isMDXComponent=!0},244:function(e,t,n){"use strict";function a(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}t.a=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(o&&(o+=" "),o+=t);return o}},250:function(e,t,n){"use strict";var a=n(0),o=n(251);t.a=function(){const e=Object(a.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},251:function(e,t,n){"use strict";var a=n(0);const o=Object(a.createContext)(void 0);t.a=o},252:function(e,t,n){"use strict";var a=n(0),o=n.n(a),i=n(250),c=n(244),r=n(57),l=n.n(r);const s=37,b=39;t.a=function(e){const{lazy:t,block:n,defaultValue:r,values:p,groupId:d,className:m}=e,{tabGroupChoices:u,setTabGroupChoices:h}=Object(i.a)(),[O,f]=Object(a.useState)(r),j=a.Children.toArray(e.children),N=[];if(null!=d){const e=u[d];null!=e&&e!==O&&p.some((t=>t.value===e))&&f(e)}const g=e=>{const t=e.target,n=N.indexOf(t),a=j[n].props.value;f(a),null!=d&&(h(d,a),setTimeout((()=>{(function(e){const{top:t,left:n,bottom:a,right:o}=e.getBoundingClientRect(),{innerHeight:i,innerWidth:c}=window;return t>=0&&o<=c&&a<=i&&n>=0})(t)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(l.a.tabItemActive),setTimeout((()=>t.classList.remove(l.a.tabItemActive)),2e3))}),150))},v=e=>{var t;let n;switch(e.keyCode){case b:const t=N.indexOf(e.target)+1;n=N[t]||N[0];break;case s:const a=N.indexOf(e.target)-1;n=N[a]||N[N.length-1]}null===(t=n)||void 0===t||t.focus()};return o.a.createElement("div",{className:"tabs-container"},o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":n},m)},p.map((({value:e,label:t})=>o.a.createElement("li",{role:"tab",tabIndex:O===e?0:-1,"aria-selected":O===e,className:Object(c.a)("tabs__item",l.a.tabItem,{"tabs__item--active":O===e}),key:e,ref:e=>N.push(e),onKeyDown:v,onFocus:g,onClick:g},t)))),t?Object(a.cloneElement)(j.filter((e=>e.props.value===O))[0],{className:"margin-vert--md"}):o.a.createElement("div",{className:"margin-vert--md"},j.map(((e,t)=>Object(a.cloneElement)(e,{key:t,hidden:e.props.value!==O})))))}},253:function(e,t,n){"use strict";var a=n(0),o=n.n(a);t.a=function({children:e,hidden:t,className:n}){return o.a.createElement("div",{role:"tabpanel",hidden:t,className:n},e)}}}]);