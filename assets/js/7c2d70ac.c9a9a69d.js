(self.webpackChunkcompletium_landing=self.webpackChunkcompletium_landing||[]).push([[3125],{6032:function(r,n,i){"use strict";var e=i(2122),t=i(7294),a=i(6912),p=i(8715),m=i(8920),s=i(7754);function o(r){return t.createElement(p.Z,(0,e.Z)({elevation:6,variant:"filled"},r))}n.Z=function(){var r=(0,s.qJ)().snackState;(0,m.Z)();return t.createElement(a.Z,{open:r.show},t.createElement(o,{severity:r.severity},r.msg))}},6816:function(r,n,i){"use strict";var e=i(2137),t=i(7757),a=i.n(t),p=i(7294),m=i(6994),s=i(2592),o=i(282),l=i(9659),g=i(8920);n.Z=function(r){var n=(0,g.Z)(),i=(0,m.C1)(),t=(0,m.Os)(),D=(0,m.$4)(),d=p.useCallback((function(r){return(0,e.Z)(a().mark((function n(){return a().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,D(r?"mainnet":s.L5);case 3:n.next=8;break;case 5:n.prev=5,n.t0=n.catch(0),alert(n.t0.message);case 8:case 9:case"end":return n.stop()}}),n,null,[[0,5]])})))}),[D]);return i?p.createElement("div",null):t?p.createElement(o.Z,{variant:"outlined",color:n.palette.text.primary,onClick:d(r.main)},"connect to wallet"):p.createElement(l.Z,{href:"https://templewallet.com/",rel:"noopener",underline:"none"},p.createElement(o.Z,{variant:"contained",disableElevation:!0,style:{backgroundColor:"#ed8936",color:"white",fontWeight:"bold"}},"install Temple"))}},2592:function(r,n,i){"use strict";i.d(n,{L5:function(){return e},WY:function(){return t}});var e="florencenet",t="florencenet"},7754:function(r,n,i){"use strict";i.d(n,{q7:function(){return a},qJ:function(){return p}});var e=i(7294);var t=(0,i(1521).Z)((function(){var r=(0,e.useState)({show:!1,severity:"info",msg:""}),n=r[0],i=r[1];return{snackState:n,setInfoSnack:function(r){i({show:!0,severity:"info",msg:r})},setErrorSnack:function(r){i({show:!0,severity:"error",msg:r})},hideSnack:function(){i((function(r){return Object.assign({},r,{show:!1})}))}}})),a=t[0],p=t[1]},6994:function(r,n,i){"use strict";i.d(n,{MZ:function(){return l},Os:function(){return g},Ch:function(){return D},$u:function(){return d},C1:function(){return c},$4:function(){return P}});var e=i(2137),t=i(7757),a=i.n(t),p=i(7294),m=i(1521),s=i(6405),o=(0,m.Z)((function(r){var n=r.appName,i=p.useState((function(){return{wallet:null,tezos:null,accountPkh:null}})),t=i[0],m=t.wallet,o=t.tezos,l=t.accountPkh,g=i[1],D=Boolean(o);p.useEffect((function(){return s.Uw.onAvailabilityChange((function(r){g({wallet:r?new s.Uw(n):null,tezos:null,accountPkh:null})}))}),[g,n]);var d=p.useCallback(function(){var r=(0,e.Z)(a().mark((function r(n,i){var e,t;return a().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if(r.prev=0,m){r.next=3;break}throw new Error("Thanos Wallet not available");case 3:return r.next=5,m.connect(n,i);case 5:return e=m.toTezos(),r.next=8,e.wallet.pkh();case 8:t=r.sent,g({wallet:m,tezos:e,accountPkh:t}),r.next=15;break;case 12:r.prev=12,r.t0=r.catch(0),alert("Failed to connect ThanosWallet: "+r.t0.message);case 15:case"end":return r.stop()}}),r,null,[[0,12]])})));return function(n,i){return r.apply(this,arguments)}}(),[g,m]);return{wallet:m,tezos:o,accountPkh:l,ready:D,connect:d}}),(function(r){return r.wallet}),(function(r){return r.tezos}),(function(r){return r.accountPkh}),(function(r){return r.ready}),(function(r){return r.connect})),l=o[0],g=o[1],D=o[2],d=o[3],c=o[4],P=o[5]},5251:function(r,n,i){"use strict";i.r(n),i.d(n,{contentTitle:function(){return Z},default:function(){return V},frontMatter:function(){return L},metadata:function(){return x},toc:function(){return B}});var e=i(2122),t=i(9756),a=i(7294),p=i(3905),m=i(6742),s=i(5064),o=i(8215),l=i(2137),g=i(7757),D=i.n(g),d=i(8463),c=i(1749),P=i(1965),I=i(2318),U=i(282),G=i(9277),u=i(3457),f=i(6994),A=i(6032),N=i(7754),E=i(6816),S=[{prim:"storage",args:[{prim:"pair",args:[{prim:"nat",annots:["%totalsupply"]},{prim:"pair",args:[{prim:"big_map",args:[{prim:"pair",args:[{prim:"address"},{prim:"address"}]},{prim:"nat"}],annots:["%allowance"]},{prim:"big_map",args:[{prim:"address"},{prim:"nat"}],annots:["%ledger"]}]}]}]},{prim:"parameter",args:[{prim:"or",args:[{prim:"pair",args:[{prim:"pair",args:[{prim:"address",annots:["%owner"]},{prim:"address",annots:["%spender"]}]},{prim:"contract",args:[{prim:"nat"}]}],annots:["%getAllowance"]},{prim:"or",args:[{prim:"pair",args:[{prim:"address",annots:["%owner"]},{prim:"contract",args:[{prim:"nat"}]}],annots:["%getBalance"]},{prim:"or",args:[{prim:"pair",args:[{prim:"unit"},{prim:"contract",args:[{prim:"nat"}]}],annots:["%getTotalSupply"]},{prim:"or",args:[{prim:"pair",args:[{prim:"address",annots:["%from"]},{prim:"pair",args:[{prim:"address",annots:["%to"]},{prim:"nat",annots:["%value"]}]}],annots:["%transfer"]},{prim:"pair",args:[{prim:"address",annots:["%spender"]},{prim:"nat",annots:["%value"]}],annots:["%approve"]}]}]}]}]}]},{prim:"code",args:[[{prim:"NIL",args:[{prim:"operation"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"}]]},{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"AMOUNT"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"PAIR"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"AMOUNT"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]}],[{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]}]]},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"2"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"AMOUNT"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DUP"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"COMPARE"},{prim:"GE"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"NotEnoughBalance"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SENDER"},{prim:"COMPARE"},{prim:"NEQ"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"SENDER"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"PAIR"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"COMPARE"},{prim:"LT"},{prim:"IF",args:[[{prim:"DUP"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"PAIR"},{prim:"PUSH",args:[{prim:"string"},{string:"NotEnoughAllowance"}]},{prim:"PAIR"},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"SENDER"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"PAIR"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"INT"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SUB"},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"INT"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SUB"},{prim:"ABS"}],[{prim:"PUSH",args:[{prim:"string"},{string:"AssignNat"}]},{prim:"FAILWITH"}]]},{prim:"SOME"},{prim:"SENDER"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"PAIR"},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"2"}]}],[]]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"INT"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SUB"},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"INT"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SUB"},{prim:"ABS"}],[{prim:"PUSH",args:[{prim:"string"},{string:"AssignNat"}]},{prim:"FAILWITH"}]]},{prim:"SOME"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"ADD"},{prim:"SOME"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}],[{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"KeyAlreadyExists"}]},{prim:"FAILWITH"}],[{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"ADD"},{prim:"SOME"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"3"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"3"}]}]]}]]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"SENDER"},{prim:"PAIR"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"COMPARE"},{prim:"GT"},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"COMPARE"},{prim:"GT"},{prim:"AND"},{prim:"IF",args:[[{prim:"DUP"},{prim:"PUSH",args:[{prim:"string"},{string:"UnsafeAllowanceChange"}]},{prim:"PAIR"},{prim:"FAILWITH"}],[]]},{prim:"DROP",args:[{int:"1"}]}],[]]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SOME"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}]]}]]}]]}]]}]]}],h=function(r,n){return{prim:"Pair",args:[{int:n.toString()},{prim:"Pair",args:[[],[{prim:"Elt",args:[{string:r},{int:n.toString()}]}]]}]}},R=[{prim:"storage",args:[{prim:"pair",args:[{prim:"nat",annots:["%totalsupply"]},{prim:"pair",args:[{prim:"big_map",args:[{prim:"pair",args:[{prim:"address"},{prim:"address"}]},{prim:"nat"}],annots:["%allowance"]},{prim:"pair",args:[{prim:"big_map",args:[{prim:"address"},{prim:"nat"}],annots:["%ledger"]},{prim:"big_map",args:[{prim:"string"},{prim:"bytes"}],annots:["%metadata"]}]}]}]}]},{prim:"parameter",args:[{prim:"or",args:[{prim:"pair",args:[{prim:"pair",args:[{prim:"address",annots:["%owner"]},{prim:"address",annots:["%spender"]}]},{prim:"contract",args:[{prim:"nat"}]}],annots:["%getAllowance"]},{prim:"or",args:[{prim:"pair",args:[{prim:"address",annots:["%owner"]},{prim:"contract",args:[{prim:"nat"}]}],annots:["%getBalance"]},{prim:"or",args:[{prim:"pair",args:[{prim:"unit"},{prim:"contract",args:[{prim:"nat"}]}],annots:["%getTotalSupply"]},{prim:"or",args:[{prim:"pair",args:[{prim:"address",annots:["%from"]},{prim:"pair",args:[{prim:"address",annots:["%to"]},{prim:"nat",annots:["%value"]}]}],annots:["%transfer"]},{prim:"pair",args:[{prim:"address",annots:["%spender"]},{prim:"nat",annots:["%value"]}],annots:["%approve"]}]}]}]}]}]},{prim:"code",args:[[{prim:"NIL",args:[{prim:"operation"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"}]]},{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"AMOUNT"},{prim:"DIG",args:[{int:"8"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"9"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"PAIR"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"7"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"7"}]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"AMOUNT"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]}],[{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]}]]},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"2"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"AMOUNT"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DUP"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"COMPARE"},{prim:"GE"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"NotEnoughBalance"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SENDER"},{prim:"COMPARE"},{prim:"NEQ"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"SENDER"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"PAIR"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"COMPARE"},{prim:"LT"},{prim:"IF",args:[[{prim:"DUP"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"PAIR"},{prim:"PUSH",args:[{prim:"string"},{string:"NotEnoughAllowance"}]},{prim:"PAIR"},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"SENDER"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"PAIR"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"INT"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SUB"},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"INT"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SUB"},{prim:"ABS"}],[{prim:"PUSH",args:[{prim:"string"},{string:"AssignNat"}]},{prim:"FAILWITH"}]]},{prim:"SOME"},{prim:"SENDER"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"PAIR"},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"7"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"7"}]},{prim:"DROP",args:[{int:"2"}]}],[]]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"INT"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SUB"},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"INT"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SUB"},{prim:"ABS"}],[{prim:"PUSH",args:[{prim:"string"},{string:"AssignNat"}]},{prim:"FAILWITH"}]]},{prim:"SOME"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"ADD"},{prim:"SOME"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}],[{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"KeyAlreadyExists"}]},{prim:"FAILWITH"}],[{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"ADD"},{prim:"SOME"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]}]]}]]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"SENDER"},{prim:"PAIR"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"COMPARE"},{prim:"GT"},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"COMPARE"},{prim:"GT"},{prim:"AND"},{prim:"IF",args:[[{prim:"DUP"},{prim:"PUSH",args:[{prim:"string"},{string:"UnsafeAllowanceChange"}]},{prim:"PAIR"},{prim:"FAILWITH"}],[]]},{prim:"DROP",args:[{int:"1"}]}],[]]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SOME"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}]]}]]}]]}]]}]]}],k=function(r,n,i){return{prim:"Pair",args:[{int:n.toString()},{prim:"Pair",args:[[],{prim:"Pair",args:[[{prim:"Elt",args:[{string:r},{int:n.toString()}]}],[{prim:"Elt",args:[{string:""},{bytes:"74657a6f732d73746f726167653a68657265"}]},{prim:"Elt",args:[{string:"here"},{bytes:i}]}]]}]}]}},T=i(7395),w=i(7708),v=i(1201),_=i(743),b=i(4566),O=i(2592),F=function(r){if((0,f.C1)()){var n=(0,f.$u)();return a.createElement(c.Z,{container:!0,direction:"column",justify:"center",alignItems:"center"},a.createElement(I.Z,{variant:"subtitle2"},"Connected with:"),a.createElement(I.Z,{variant:"subtitle2",style:{fontFamily:"Courier Prime, monospace"}},n))}return a.createElement(c.Z,{container:!0},a.createElement(c.Z,{item:!0,xs:8},a.createElement(E.Z,{main:r.main})),a.createElement(c.Z,{item:!0,xs:2},a.createElement(T.Z,{checked:r.main,onChange:function(n){r.setMain(n.target.checked)},name:"checkedB",color:"primary"})),a.createElement(c.Z,{item:!0,xs:2},a.createElement(I.Z,{variant:"subtitle2",style:{marginTop:"8px"}},"Mainnet")))};var y=function(r){return a.createElement(c.Z,{container:!0,direction:"column",justify:"center",alignItems:"center"},a.createElement(I.Z,{variant:"subtitle2"},"Contract available at:"),a.createElement(I.Z,{component:m.Z,to:"https://better-call.dev/"+(r.main?"mainnet":O.WY)+"/"+r.contract+"/operations",variant:"subtitle2",style:{fontFamily:"Courier Prime, monospace"}},r.contract))};function W(r,n,i,e,t){var a={symbol:r,name:n,decimals:i,description:e,thumbnailUri:t};return Buffer.from(JSON.stringify(a)).toString("hex")}var C=function(){var r=a.useState(""),n=r[0],i=r[1],e=a.useState(1e7),t=e[0],p=e[1],m=a.useState(""),s=m[0],o=m[1],g=a.useState(!1),G=g[0],u=g[1],A=a.useState("CMPL"),E=A[0],T=A[1],O=a.useState("Completium Token"),C=O[0],H=O[1],M=a.useState(1),L=M[0],Z=M[1],x=a.useState("https://completium.com/img/logo_completium_128.png"),B=x[0],z=x[1],V=a.useState(!1),q=V[0],K=V[1],j=(0,N.qJ)(),J=j.setInfoSnack,Y=j.setErrorSnack,$=j.hideSnack,Q=(0,f.Ch)(),X=(0,f.C1)(),rr=function(){return n.length>0&(36!==(r=n).length|!r.startsWith("tz1"));var r},nr=function(){return!(Math.round(t)==t&t>0)},ir=function(){var r=(0,l.Z)(D().mark((function r(){var i,e,a;return D().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.prev=0,r.next=3,Q.wallet.originate({code:G?R:S,init:G?k(n,t,W(E,C,L,"",B)):h(n,t)}).send();case 3:return i=r.sent,e=i.opHash.substring(0,10)+"...",J("waiting for "+e+" to be confirmed ..."),r.next=8,i.contract();case 8:a=r.sent,$(),console.log("Origination completed for "+a.address+"."),setTimeout((function(){return o(a.address)}),5e3),r.next=19;break;case 14:r.prev=14,r.t0=r.catch(0),console.log(r.t0),Y(r.t0.message),setTimeout($,4e3);case 19:case"end":return r.stop()}}),r,null,[[0,14]])})));return function(){return r.apply(this,arguments)}}();return a.createElement(d.Z,{style:{backgroundColor:"transparent",border:"1px solid #606770",marginTop:"20px",marginBottom:"20px"},raised:!1},a.createElement(c.Z,{container:!0,style:{padding:22},spacing:3},a.createElement(c.Z,{item:!0,xs:6},a.createElement(P.Z,{onChange:function(r){i(r.target.value)},value:n,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"initalholder",label:"Initial Holder",error:rr(),helperText:rr()?"Invalid address format":""})),a.createElement(c.Z,{item:!0,xs:6,style:{textAlign:"center",marginTop:"10px"}},a.createElement(F,{main:q,setMain:K})),a.createElement(c.Z,{item:!0,xs:6},a.createElement(P.Z,{type:"number",onChange:function(r){p(r.target.value)},error:nr(),helperText:nr()?"Invalid Natural Integer":"",value:t,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"totalsupply",label:"Total Supply"})),a.createElement(c.Z,{item:!0,xs:6,style:{textAlign:"center",marginTop:"10px"}},""!==s?a.createElement(y,{contract:s,main:q}):a.createElement(U.Z,{variant:"contained",color:"primary",disableElevation:!0,disabled:!X|nr()|rr()|0==n.length,onClick:ir},"originate"))),a.createElement(w.Z,{expanded:G,onChange:function(r,n){u(n)},style:{backgroundColor:"transparent"}},a.createElement(_.Z,{expandIcon:a.createElement(b.Z,null),"aria-controls":"panel4bh-content",id:"panel4bh-header"},a.createElement(I.Z,{style:{marginLeft:"10px"}},"Metadata")),a.createElement(v.Z,null,a.createElement(c.Z,{container:!0,spacing:3,style:{marginLeft:"0px"}},a.createElement(c.Z,{item:!0,xs:6},a.createElement(P.Z,{onChange:function(r){T(r.target.value)},error:!1,helperText:"Token symbol, like 'USD' for United States Dollar.",value:E,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"symbol",label:"Symbol"})),a.createElement(c.Z,{item:!0,xs:6},a.createElement(P.Z,{onChange:function(r){H(r.target.value)},error:!1,helperText:"Token name, like 'Bitcoin' for BTC asset.",value:C,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"name",label:"Name"})),a.createElement(c.Z,{item:!0,xs:6},a.createElement(P.Z,{type:"number",onChange:function(r){Z(r.target.value)},error:!1,helperText:"A number of decimal places after point.",value:L,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"decimals",label:"Decimals"})),a.createElement(c.Z,{item:!0,xs:6},a.createElement(P.Z,{onChange:function(r){z(r.target.value)},error:!1,helperText:"Image URL for token logo.",value:B,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"url",label:"Icon URL"}))))))},H=function(r){var n=a.useMemo((function(){return(0,G.Z)({palette:{type:"dark",primary:{light:"#1dc5ff",main:"#00ACE7",dark:"#0a90bf",contrastText:"#fff"}}})}),[!0]);return a.createElement(f.MZ,{appName:"Completium FA 1.2"},a.createElement(N.q7,null,a.createElement(u.Z,{theme:n},a.createElement(C,null),a.createElement(A.Z,null))))},M=["components"],L={id:"template1",title:"FA 1.2",sidebar_label:"FA 1.2",slug:"/templates/fa12"},Z=void 0,x={unversionedId:"templates/template1",id:"templates/template1",isDocsHomePage:!1,title:"FA 1.2",description:"Introduction",source:"@site/docs/templates/template1.md",sourceDirName:"templates",slug:"/templates/fa12",permalink:"/docs/templates/fa12",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template1.md",version:"current",frontMatter:{id:"template1",title:"FA 1.2",sidebar_label:"FA 1.2",slug:"/templates/fa12"},sidebar:"templates",previous:{title:"Presentation",permalink:"/docs/templates"},next:{title:"ERC20",permalink:"/docs/templates/erc20"}},B=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Originate",id:"originate",children:[{value:"Command line",id:"command-line",children:[]}]},{value:"Code",id:"code",children:[]}],z={toc:B};function V(r){var n=r.components,i=(0,t.Z)(r,M);return(0,p.kt)("wrapper",(0,e.Z)({},z,i,{components:n,mdxType:"MDXLayout"}),(0,p.kt)("h2",{id:"introduction"},"Introduction"),(0,p.kt)("p",null,"A fungible token is basically an association table between the token owner (the account address) and the amount of tokens (a natural integer). It is possible to allow another account to transfer tokens on your behalf."),(0,p.kt)("p",null,"This contract implements the ",(0,p.kt)(m.Z,{to:"https://assets.tqtezos.com/docs/token-contracts/fa12/1-fa12-intro/",mdxType:"Link"},"Financial Asset 1.2")," (FA 1.2) ",(0,p.kt)(m.Z,{to:"https://gitlab.com/tzip/tzip/blob/master/proposals/tzip-7/tzip-7.md",mdxType:"Link"},"TZIP 7")," specification for fungible token on Tezos."),(0,p.kt)("h2",{id:"api"},"API"),(0,p.kt)("h3",{id:"storage"},"Storage"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:null},"Name"),(0,p.kt)("th",{parentName:"tr",align:null},"Type"),(0,p.kt)("th",{parentName:"tr",align:null},"Desc"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"totalsupply")),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"nat")),(0,p.kt)("td",{parentName:"tr",align:null},"Total number of tokens.")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"ledger")),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"collection")),(0,p.kt)("td",{parentName:"tr",align:null},"Association between token holder and number of tokens.")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"allowance")),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"collection")),(0,p.kt)("td",{parentName:"tr",align:null},"Association between the pair owner and spender and the allowed amount.")))),(0,p.kt)("h3",{id:"entrypoints"},"Entrypoints"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:null},"Name"),(0,p.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,p.kt)("th",{parentName:"tr",align:null},"Desc"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"transfer")),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"from"),", ",(0,p.kt)("inlineCode",{parentName:"td"},"to"),", ",(0,p.kt)("inlineCode",{parentName:"td"},"value")),(0,p.kt)("td",{parentName:"tr",align:null},"Transfers ",(0,p.kt)("inlineCode",{parentName:"td"},"value")," tokens from ",(0,p.kt)("inlineCode",{parentName:"td"},"from")," to ",(0,p.kt)("inlineCode",{parentName:"td"},"to"),". If the ",(0,p.kt)("em",{parentName:"td"},"caller")," is not equal to ",(0,p.kt)("inlineCode",{parentName:"td"},"from"),", then ",(0,p.kt)("em",{parentName:"td"},"caller")," must have been allowed by ",(0,p.kt)("inlineCode",{parentName:"td"},"from")," to transfer this amount to ",(0,p.kt)("inlineCode",{parentName:"td"},"to"),".")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"approve")),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"spender"),", ",(0,p.kt)("inlineCode",{parentName:"td"},"value")),(0,p.kt)("td",{parentName:"tr",align:null},"Approves ",(0,p.kt)("inlineCode",{parentName:"td"},"spender")," to transfer ",(0,p.kt)("inlineCode",{parentName:"td"},"value")," tokens from ",(0,p.kt)("em",{parentName:"td"},"caller"),".")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"getAllowance")),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"owner"),", ",(0,p.kt)("inlineCode",{parentName:"td"},"spender")),(0,p.kt)("td",{parentName:"tr",align:null},"Getter for the allowed value for ",(0,p.kt)("inlineCode",{parentName:"td"},"owner")," and ",(0,p.kt)("inlineCode",{parentName:"td"},"spender"),".")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"getBalance")),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"owner")),(0,p.kt)("td",{parentName:"tr",align:null},"Getter for the number of tokens owned by ",(0,p.kt)("inlineCode",{parentName:"td"},"owner"),".")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"getTotalSupply")),(0,p.kt)("td",{parentName:"tr",align:null}),(0,p.kt)("td",{parentName:"tr",align:null},"Getter for ",(0,p.kt)("inlineCode",{parentName:"td"},"totalsupply"))))),(0,p.kt)("h2",{id:"originate"},"Originate"),(0,p.kt)("p",null,"Originate a FA 1.2 contract with the widget below."),(0,p.kt)("p",null,'Click "Connect to Wallet" button, fill the fields "Initial Holder" and "Total Supply", and click "Originate".'),(0,p.kt)(H,{mdxType:"Deploy"}),(0,p.kt)("h3",{id:"command-line"},"Command line"),(0,p.kt)("p",null,"Originate the contract from ",(0,p.kt)("a",{href:"https://archetype-lang.org/"},"Archetype")," code below with the following ",(0,p.kt)(m.Z,{to:"/docs/cli",mdxType:"Link"},"Completium CLI")," example command:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"completium-cli deploy fa12.arl --init '(@tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG, 10_000_000)'\n")),(0,p.kt)("p",null,"The command sets:"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"initialholder")," constant to ",(0,p.kt)("inlineCode",{parentName:"li"},"tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"totalsupply")," variable to 10 millions")),(0,p.kt)("h2",{id:"code"},"Code"),(0,p.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,p.kt)("div",{parentName:"div",className:"admonition-heading"},(0,p.kt)("h5",{parentName:"div"},(0,p.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,p.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,p.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,p.kt)("div",{parentName:"div",className:"admonition-content"},(0,p.kt)("p",{parentName:"div"},"The Archetype FA 1.2 code has been ",(0,p.kt)(m.Z,{to:"https://assets.tqtezos.com/docs/token-contracts/fa12/4-fa12-archetype/",mdxType:"Link"},"verified")," towards the formal specification presented below."))),(0,p.kt)(s.Z,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"},{label:"Specification",value:"specification"}],mdxType:"Tabs"},(0,p.kt)(o.Z,{value:"archetype",mdxType:"TabItem"},(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="fa12.arl"',title:'"fa12.arl"'},'archetype fa12(const initialholder : address, totalsupply : nat)\n\nasset allowance identified by addr_owner addr_spender to big_map {\n  addr_owner       : address;\n  addr_spender     : address;\n  amount           : nat;\n}\n\nasset ledger identified by holder to big_map {\n  holder     : address;\n  tokens     : nat = 0;\n} initialized by {\n  { holder = initialholder; tokens = totalsupply }\n}\n\nentry %transfer (%from : address, %to : address, value : nat) {\n  require {\n    r1 otherwise "NotEnoughBalance" : ledger[%from].tokens >= value;\n  }\n  effect {\n    if caller <> %from then (\n      var current = allowance[(%from, caller)].amount;\n      dofailif(current < value, ("NotEnoughAllowance", ((value, current))));\n      allowance.update((%from, caller), { amount -=  value });\n    );\n    ledger.update(%from, { tokens -= value });\n    ledger.addupdate(%to, { tokens += value });\n  }\n}\n\nentry approve(spender : address, value : nat) {\n  var k = (caller, spender);\n  if allowance.contains(k) then (\n    var previous = allowance[k].amount;\n    dofailif(previous > 0 and value > 0, (("UnsafeAllowanceChange", previous)));\n  );\n  allowance.addupdate( k, { amount = value });\n}\n\ngetter getAllowance (owner : address, spender : address) : nat {\n  return (allowance[(owner, spender)].amount)\n}\n\ngetter getBalance (owner : address) : nat {\n  return (if (ledger.contains(owner)) then ledger[owner].tokens else 0)\n}\n\ngetter getTotalSupply () : nat {\n  return totalsupply\n}\n'))),(0,p.kt)(o.Z,{value:"michelson",mdxType:"TabItem"},(0,p.kt)("p",null,"The ",(0,p.kt)(m.Z,{to:"/docs/contract/programming-language#micheslon",mdxType:"Link"},"Michelson")," code is generated with version 1.2.3 of Archetype."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-js"},'# (Pair 10000000 (Pair {  } (Pair { Elt "tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG" 10000000 } { Elt "" 0x68747470733a2f2f636f6d706c657469756d2e636f6d2f6d657461646174612f666131322e6a736f6e })))\n{\n  storage (pair (nat %totalsupply) (pair (big_map %allowance (pair address address) nat) (pair (big_map %ledger address nat) (big_map %metadata string bytes))));\n  parameter (or (pair %getAllowance (pair (address %owner) (address %spender)) (contract nat)) (or (pair %getBalance (address %owner) (contract nat)) (or (pair %getTotalSupply unit (contract nat)) (or (pair %transfer (address %from) (pair (address %to) (nat %value))) (pair %approve (address %spender) (nat %value))))));\n  code { NIL operation;\n         DIG 1;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { UNPAIR;\n             UNPAIR;\n             SWAP;\n             DIG 7;\n             DUP;\n             DUG 8;\n             DIG 3;\n             DUP;\n             DUG 4;\n             AMOUNT;\n             DIG 8;\n             DUP;\n             DUG 9;\n             DIG 4;\n             DUP;\n             DUG 5;\n             DIG 6;\n             DUP;\n             DUG 7;\n             PAIR;\n             GET;\n             IF_NONE\n               { PUSH string "GetNoneValue";\n                 FAILWITH }\n               {  };\n             TRANSFER_TOKENS;\n             CONS;\n             DIP { DIG 7; DROP };\n             DUG 7;\n             DROP 3;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { UNPAIR;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 AMOUNT;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 MEM;\n                 IF\n                   { DIG 6;\n                     DUP;\n                     DUG 7;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  } }\n                   { PUSH nat 0 };\n                 TRANSFER_TOKENS;\n                 CONS;\n                 DIP { DIG 6; DROP };\n                 DUG 6;\n                 DROP 2;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { IF_LEFT\n                   { UNPAIR;\n                     DROP;\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     AMOUNT;\n                     DIG 7;\n                     DUP;\n                     DUG 8;\n                     TRANSFER_TOKENS;\n                     CONS;\n                     DIP { DIG 5; DROP };\n                     DUG 5;\n                     DROP;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR }\n                   { IF_LEFT\n                       { UNPAIR;\n                         SWAP;\n                         UNPAIR;\n                         SWAP;\n                         DUP;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         COMPARE;\n                         GE;\n                         NOT;\n                         IF\n                           { PUSH string "NotEnoughBalance";\n                             FAILWITH }\n                           {  };\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         SENDER;\n                         COMPARE;\n                         NEQ;\n                         IF\n                           { DIG 5;\n                             DUP;\n                             DUG 6;\n                             SENDER;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             PAIR;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             COMPARE;\n                             LT;\n                             IF\n                               { DUP;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 PAIR;\n                                 PUSH string "NotEnoughAllowance";\n                                 PAIR;\n                                 FAILWITH }\n                               {  };\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             SENDER;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             PAIR;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             PUSH int 0;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             INT;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             SUB;\n                             COMPARE;\n                             GE;\n                             IF\n                               { DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 INT;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 SUB;\n                                 ABS }\n                               { PUSH string "AssignNat";\n                                 FAILWITH };\n                             SOME;\n                             SENDER;\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             PAIR;\n                             UPDATE;\n                             DIP { DIG 7; DROP };\n                             DUG 7;\n                             DROP 2 }\n                           {  };\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         PUSH int 0;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         INT;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         SUB;\n                         COMPARE;\n                         GE;\n                         IF\n                           { DIG 2;\n                             DUP;\n                             DUG 3;\n                             INT;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             SUB;\n                             ABS }\n                           { PUSH string "AssignNat";\n                             FAILWITH };\n                         SOME;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         UPDATE;\n                         DIP { DIG 5; DROP };\n                         DUG 5;\n                         DROP;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         MEM;\n                         IF\n                           { DIG 4;\n                             DUP;\n                             DUG 5;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             ADD;\n                             SOME;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             UPDATE;\n                             DIP { DIG 5; DROP };\n                             DUG 5;\n                             DROP }\n                           { DIG 4;\n                             DUP;\n                             DUG 5;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             MEM;\n                             IF\n                               { PUSH string "KeyAlreadyExists";\n                                 FAILWITH }\n                               { DIG 4;\n                                 DUP;\n                                 DUG 5;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 PUSH nat 0;\n                                 ADD;\n                                 SOME;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 UPDATE;\n                                 DIP { DIG 4; DROP };\n                                 DUG 4 } };\n                         DROP 3;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         DIG 1;\n                         PAIR }\n                       { UNPAIR;\n                         SWAP;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         SENDER;\n                         PAIR;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         MEM;\n                         IF\n                           { DIG 5;\n                             DUP;\n                             DUG 6;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             PUSH nat 0;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             COMPARE;\n                             GT;\n                             PUSH nat 0;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             COMPARE;\n                             GT;\n                             AND;\n                             IF\n                               { DUP;\n                                 PUSH string "UnsafeAllowanceChange";\n                                 PAIR;\n                                 FAILWITH }\n                               {  };\n                             DROP }\n                           {  };\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         SOME;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         UPDATE;\n                         DIP { DIG 5; DROP };\n                         DUG 5;\n                         DROP 3;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         DIG 1;\n                         PAIR } } } } };\n}\n'))),(0,p.kt)(o.Z,{value:"specification",mdxType:"TabItem"},(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="fa12.arl"',title:'"fa12.arl"'},'specification {\n  s1: ledger.sum(tokens) = totalsupply;\n}\n\nspecification entry %transfer (%from : address, %to : address, value : nat) {\n  fails {\n    f0 with (msg : string) :\n      let some after_ledger_from = ledger[%from] in\n        msg = "NotEnoughBalance" and\n        after_ledger_from.tokens < value\n      otherwise true;\n    f1 with (msg : string * (nat * nat)) :\n      let some after_allowance_from_caller = allowance[(%from,caller)] in\n        msg = ("NotEnoughAllowance", ((value, after_allowance_from_caller.amount))) and\n        caller <> %from and\n        after_allowance_from_caller.amount < value\n      otherwise false;\n  }\n\n  (* LEDGER ASSET *)\n  postcondition transfer_p1 { (* effect on %from nbtokens *)\n    %from <> %to ->\n    let some before_ledger_from = before.ledger[%from] in\n    let some after_ledger_from  = ledger[%from] in\n    after_ledger_from = { before_ledger_from with\n      tokens = abs (before_ledger_from.tokens - value)\n    }\n    otherwise false otherwise false\n  }\n\n  postcondition transfer_p2 { (* effect on %to nbtokens *)\n    %from <> %to ->\n    let some after_ledger_to = ledger[%to] in\n    let some before_ledger_to = before.ledger[%to] in\n      after_ledger_to = { before_ledger_to with\n        tokens = (before_ledger_to.tokens + value)\n      }\n    otherwise\n      after_ledger_to = { holder = %to; tokens = value }\n    otherwise false (* %to ledger asset exists after transfer *) r\n  }\n\n  postcondition transfer_p3 {\n    %from = %to -> ledger = before.ledger\n  }\n\n  postcondition transfer_p4 { (* other ledger assets are unchanged *)\n    forall tokenholder in ledger,\n      tokenholder.holder <> %from ->\n      tokenholder.holder <> %to ->\n      before.ledger[tokenholder.holder] = some(tokenholder)\n  }\n\n  postcondition transfer_p5 { (* no ledger asset is removed *)\n    removed.ledger.isempty()\n  }\n\n  postcondition transfer_p6 { (* number of added asset may be one *)\n    let some before_to = before.ledger[%to] in\n      added.ledger.isempty()\n    otherwise\n      added.ledger = [ { holder = %to; tokens = value } ]\n  }\n\n  (* ALLOWANCE ASSET *)\n  postcondition transfer_p7 { (* effect on allowance *)\n    caller <> %from ->\n    let some before_from_caller = before.allowance[(%from,caller)] in\n    let some after_from_caller = allowance[(%from,caller)] in\n      before_from_caller.amount > value ->\n      after_from_caller = { before_from_caller with\n        amount = abs (before_from_caller.amount - value)\n      }\n    otherwise false\n    otherwise true\n  }\n\n  postcondition transfer_p8 { (* effect on allowance *)\n    caller = %from -> allowance = before.allowance\n  }\n\n  postcondition transfer_p9 { (* other allowance assets are unchanged *)\n    forall a in allowance,\n      a.addr_owner <> %from and a.addr_spender <> caller ->\n      before.allowance[(a.addr_owner, a.addr_spender)] = some(a)\n  }\n\n  postcondition transfer_p10 { (* no allowance is added or removed *)\n    removed.allowance.isempty() and added.allowance.isempty()\n  }\n\n  postcondition transfer_p11 { (* no operation generated *)\n    length (operations) = 0\n  }\n}\n\nspecification entry approve(spender : address, value : nat) {\n  fails {\n    f2 with (msg : (string * nat)) :\n      let some allowance_caller_spender = allowance[(caller, spender)] in\n        msg = ("UnsafeAllowanceChange", allowance_caller_spender.amount) and\n        value > 0 and\n        allowance_caller_spender.amount > 0\n      otherwise false;\n  }\n\n  postcondition approve_p1 { (* effect on allowance asset *)\n    let some after_allowance_caller_spender = allowance[(caller,spender)] in\n    let some before_allowance_caller_spender = before.allowance[(caller,spender)] in\n      after_allowance_caller_spender = { before_allowance_caller_spender with\n        amount = value\n      }\n    otherwise\n      after_allowance_caller_spender = { addr_owner = caller; addr_spender = spender; amount = value }\n    otherwise false\n  }\n\n  postcondition approve_p2 { (* other allowance assets are unchanged *)\n    forall a in allowance,\n      (a.addr_owner, a.addr_spender) <> (caller, spender) ->\n      before.allowance[(a.addr_owner, a.addr_spender)] = some(a)\n  }\n\n  postcondition approve_p3 { (* added allowance *)\n    let some allowance_caller_spender = before.allowance[(caller, spender)] in\n      added.allowance.isempty()\n    otherwise\n      added.allowance = [ { addr_owner = caller; addr_spender = spender; amount = value } ]\n  }\n\n  postcondition approve_p4 { (* no allowance asset is removed *)\n    removed.allowance.isempty()\n  }\n\n  postcondition approve_p5 {\n    ledger = before.ledger\n  }\n\n  postcondition approve_p6 { (*  no operation generated *)\n    length (operations) = 0\n  }\n}\n\nspecification getter getAllowance (owner : address, spender : address) {\n  postcondition getallowance_p1 { (* creates one op *)\n    length (operations) = 1\n  }\n\n  postcondition getallowance_p2 { (* assets are unchanged *)\n    ledger = before.ledger and allowance = before.allowance\n  }\n}\n\nspecification getter getBalance (owner : address) {\n  postcondition getbalance_p1 { (* creates one op *)\n    length (operations) = 1\n  }\n\n  postcondition getbalance_p2 { (* assets are unchanged *)\n    ledger = before.ledger and allowance = before.allowance\n  }\n}\n\nspecification getter getTotalSupply () {\n  postcondition gettotalsupply_p1 { (* creates one op *)\n    length (operations) = 1\n  }\n\n  postcondition gettotalsupply_p2 { (* assets are unchanged *)\n    ledger = before.ledger and allowance = before.allowance\n  }\n}\n')))))}V.isMDXComponent=!0},2361:function(){},4616:function(){}}]);