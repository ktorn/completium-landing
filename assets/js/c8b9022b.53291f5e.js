(self.webpackChunkcompletium_landing=self.webpackChunkcompletium_landing||[]).push([[1425],{3079:function(n,t,r){"use strict";var i=r(7294),e=r(282),a=r(8500),m=r(3457),p=r(9960),s=r(4996);t.Z=function(n){var t=i.useMemo((function(){return(0,a.Z)({palette:{type:"dark"}})}),[!0]);return i.createElement("div",{style:{textAlign:"center",paddingTop:"0px",paddingBottom:"40px"}},i.createElement(m.Z,{theme:t},n.internal?i.createElement(e.Z,{variant:"outlined",size:"large",component:p.Z,to:(0,s.Z)("docs/"+n.url+"/")},n.txt):i.createElement(e.Z,{variant:"outlined",size:"large",onClick:function(){return window.open(n.url,"_blank")}},n.txt)))}},6032:function(n,t,r){"use strict";var i=r(7462),e=r(7294),a=r(3950),m=r(5046),p=r(8920),s=r(7754);function o(n){return e.createElement(m.Z,(0,i.Z)({elevation:6,variant:"filled"},n))}t.Z=function(){var n=(0,s.qJ)().snackState;(0,p.Z)();return e.createElement(a.Z,{open:n.show},e.createElement(o,{severity:n.severity},n.msg))}},6816:function(n,t,r){"use strict";var i=r(5861),e=r(7757),a=r.n(e),m=r(7294),p=r(6994),s=r(2592),o=r(282),l=r(9659),D=r(8920);t.Z=function(n){var t=(0,D.Z)(),r=(0,p.C1)(),e=(0,p.Os)(),d=(0,p.$4)(),c=m.useCallback((function(n){return(0,i.Z)(a().mark((function t(){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,d(n?"mainnet":s.L5);case 3:t.next=8;break;case 5:t.prev=5,t.t0=t.catch(0),alert(t.t0.message);case 8:case 9:case"end":return t.stop()}}),t,null,[[0,5]])})))}),[d]);return r?m.createElement("div",null):e?m.createElement(o.Z,{variant:"outlined",color:t.palette.text.primary,onClick:c(n.main)},"connect to wallet"):m.createElement(l.Z,{href:"https://templewallet.com/",rel:"noopener",underline:"none"},m.createElement(o.Z,{variant:"contained",disableElevation:!0,style:{backgroundColor:"#ed8936",color:"white",fontWeight:"bold"}},"install Temple"))}},2592:function(n,t,r){"use strict";r.d(t,{L5:function(){return i},WY:function(){return e}});var i="florencenet",e="florencenet"},7754:function(n,t,r){"use strict";r.d(t,{q7:function(){return a},qJ:function(){return m}});var i=r(7294);var e=(0,r(1521).Z)((function(){var n=(0,i.useState)({show:!1,severity:"info",msg:""}),t=n[0],r=n[1];return{snackState:t,setInfoSnack:function(n){r({show:!0,severity:"info",msg:n})},setErrorSnack:function(n){r({show:!0,severity:"error",msg:n})},hideSnack:function(){r((function(n){return Object.assign({},n,{show:!1})}))}}})),a=e[0],m=e[1]},6994:function(n,t,r){"use strict";r.d(t,{MZ:function(){return l},Os:function(){return D},Ch:function(){return d},$u:function(){return c},C1:function(){return g},$4:function(){return P}});var i=r(5861),e=r(7757),a=r.n(e),m=r(7294),p=r(1521),s=r(185),o=(0,p.Z)((function(n){var t=n.appName,r=m.useState((function(){return{wallet:null,tezos:null,accountPkh:null}})),e=r[0],p=e.wallet,o=e.tezos,l=e.accountPkh,D=r[1],d=Boolean(o);m.useEffect((function(){return s.Uw.onAvailabilityChange((function(n){D({wallet:n?new s.Uw(t):null,tezos:null,accountPkh:null})}))}),[D,t]);var c=m.useCallback(function(){var n=(0,i.Z)(a().mark((function n(t,r){var i,e;return a().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(n.prev=0,p){n.next=3;break}throw new Error("Thanos Wallet not available");case 3:return n.next=5,p.connect(t,r);case 5:return i=p.toTezos(),n.next=8,i.wallet.pkh();case 8:e=n.sent,D({wallet:p,tezos:i,accountPkh:e}),n.next=15;break;case 12:n.prev=12,n.t0=n.catch(0),alert("Failed to connect ThanosWallet: "+n.t0.message);case 15:case"end":return n.stop()}}),n,null,[[0,12]])})));return function(t,r){return n.apply(this,arguments)}}(),[D,p]);return{wallet:p,tezos:o,accountPkh:l,ready:d,connect:c}}),(function(n){return n.wallet}),(function(n){return n.tezos}),(function(n){return n.accountPkh}),(function(n){return n.ready}),(function(n){return n.connect})),l=o[0],D=o[1],d=o[2],c=o[3],g=o[4],P=o[5]},912:function(n,t,r){"use strict";r.r(t),r.d(t,{contentTitle:function(){return W},default:function(){return L},frontMatter:function(){return x},metadata:function(){return H},toc:function(){return w}});var i=r(7462),e=r(3366),a=r(7294),m=r(3905),p=r(9960),s=r(6396),o=r(8215),l=r(5861),D=r(7757),d=r.n(D),c=r(8463),g=r(1749),P=r(5477),I=r(2318),U=r(282),u=r(8500),G=r(3457),b=r(6994),A=r(6032),R=r(7754),N=r(6816),f=[{prim:"storage",args:[{prim:"pair",args:[{prim:"address",annots:["%chairman"]},{prim:"pair",args:[{prim:"nat",annots:["%maxvotes"]},{prim:"pair",args:[{prim:"nat",annots:["%_state"]},{prim:"pair",args:[{prim:"map",args:[{prim:"nat"},{prim:"pair",args:[{prim:"bytes",annots:["%title"]},{prim:"pair",args:[{prim:"bytes",annots:["%desc"]},{prim:"pair",args:[{prim:"nat",annots:["%nbvotes"]},{prim:"pair",args:[{prim:"timestamp",annots:["%creation"]},{prim:"address",annots:["%author"]}]}]}]}]}],annots:["%idea"]},{prim:"pair",args:[{prim:"map",args:[{prim:"address"},{prim:"nat"}],annots:["%voter"]},{prim:"set",args:[{prim:"nat"}],annots:["%selected"]}]}]}]}]}]}]},{prim:"parameter",args:[{prim:"or",args:[{prim:"address",annots:["%register"]},{prim:"or",args:[{prim:"pair",args:[{prim:"bytes",annots:["%ititle"]},{prim:"bytes",annots:["%description"]}],annots:["%add_idea"]},{prim:"or",args:[{prim:"pair",args:[{prim:"nat",annots:["%n"]},{prim:"nat",annots:["%weight"]}],annots:["%vote"]},{prim:"unit",annots:["%terminate"]}]}]}]}]},{prim:"code",args:[[{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"}]]},{prim:"IF_LEFT",args:[[{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"SENDER"},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCaller"}]},{prim:"FAILWITH"}],[]]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r0"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"KeyAlreadyExists"}]},{prim:"FAILWITH"}],[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"SOME"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"2"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"2"}]}]]},{prim:"DROP",args:[{int:"1"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"NIL",args:[{prim:"operation"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r1"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"SIZE"},{prim:"MEM"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"KeyAlreadyExists"}]},{prim:"FAILWITH"}],[{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"SENDER"},{prim:"NOW"},{prim:"PAIR"},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"PAIR"},{prim:"SOME"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"SIZE"},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]}]]},{prim:"DROP",args:[{int:"2"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"NIL",args:[{prim:"operation"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SENDER"},{prim:"MEM"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r2"}]},{prim:"FAILWITH"}],[]]},{prim:"DUP"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"SENDER"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"COMPARE"},{prim:"GE"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r3"}]},{prim:"FAILWITH"}],[]]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r4"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SENDER"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"INT"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SUB"},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"INT"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SUB"},{prim:"ABS"}],[{prim:"PUSH",args:[{prim:"string"},{string:"AssignNat"}]},{prim:"FAILWITH"}]]},{prim:"SOME"},{prim:"SENDER"},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"CDR"},{prim:"CDR"},{prim:"CAR"},{prim:"ADD"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SOME"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"NIL",args:[{prim:"operation"}]},{prim:"PAIR"}],[{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"SENDER"},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCaller"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"DUP"},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"COMPARE"},{prim:"EQ"},{prim:"IF",args:[[{prim:"NIL",args:[{prim:"nat"}]},{prim:"NIL",args:[{prim:"nat"}]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"PAIR"},{prim:"NIL",args:[{prim:"nat"}]},{prim:"NIL",args:[{prim:"nat"}]},{prim:"NIL",args:[{prim:"nat"}]},{prim:"DIG",args:[{int:"8"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"9"}]},{prim:"ITER",args:[[{prim:"UNPAIR"},{prim:"DIG",args:[{int:"12"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"13"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"CDR"},{prim:"CDR"},{prim:"CAR"},{prim:"COMPARE"},{prim:"GT"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CONS"}],[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"2"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"2"}]},{prim:"DROP",args:[{int:"2"}]}]]},{prim:"ITER",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"ITER",args:[[{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"NIL",args:[{prim:"nat"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SOME"},{prim:"PAIR"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"ITER",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CAR"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"CDR"},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"IF_NONE",args:[[{prim:"DUP"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"CONS"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"PAIR"}],[{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"14"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"15"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"CDR"},{prim:"CDR"},{prim:"CAR"},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CDR"},{prim:"CDR"},{prim:"CAR"},{prim:"COMPARE"},{prim:"LT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"int"},{int:"1"}]}],[{prim:"PUSH",args:[{prim:"int"},{int:"0"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"COMPARE"},{prim:"GT"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"CONS"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"CONS"},{prim:"NONE",args:[{prim:"nat"}]},{prim:"PAIR"}],[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"CONS"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"PAIR"}]]},{prim:"SWAP"},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUP"},{prim:"CAR"},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CDR"},{prim:"NIL",args:[{prim:"nat"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"IF_NONE",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]}],[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"CONS"},{prim:"SWAP"},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"ITER",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"ITER",args:[[{prim:"PUSH",args:[{prim:"nat"},{int:"3"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"CAR"},{prim:"COMPARE"},{prim:"LT"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CDR"},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CONS"},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"CAR"},{prim:"ADD"},{prim:"PAIR"}],[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CDR"},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"CAR"},{prim:"ADD"},{prim:"PAIR"}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"CDR"},{prim:"ITER",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"ITER",args:[[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"KeyAlreadyExists"}]},{prim:"FAILWITH"}],[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"PUSH",args:[{prim:"bool"},{prim:"True"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"2"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"2"}]}]]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]}],[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidState"}]},{prim:"FAILWITH"}]]},{prim:"DROP",args:[{int:"1"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"NIL",args:[{prim:"operation"}]},{prim:"PAIR"}]]}]]}]]}]]}],v=function(n,t){return{prim:"Pair",args:[{string:n},{prim:"Pair",args:[{int:t.toString()},{prim:"Pair",args:[{int:"0"},{prim:"Pair",args:[[],{prim:"Pair",args:[[],[]]}]}]}]}]}},k=r(9492),S=r(2592),E=function(n){if((0,b.C1)()){var t=(0,b.$u)();return a.createElement(g.Z,{container:!0,direction:"column",justify:"center",alignItems:"center"},a.createElement(I.Z,{variant:"subtitle2"},"Connected with:"),a.createElement(I.Z,{variant:"subtitle2",style:{fontFamily:"Courier Prime, monospace"}},t))}return a.createElement(g.Z,{container:!0},a.createElement(g.Z,{item:!0,xs:8},a.createElement(N.Z,{main:n.main})),a.createElement(g.Z,{item:!0,xs:2},a.createElement(k.Z,{checked:n.main,onChange:function(t){n.setMain(t.target.checked)},name:"checkedB",color:"primary"})),a.createElement(g.Z,{item:!0,xs:2},a.createElement(I.Z,{variant:"subtitle2",style:{marginTop:"8px"}},"Mainnet")))};var h=function(n){return a.createElement(g.Z,{container:!0,direction:"column",justify:"center",alignItems:"center"},a.createElement(I.Z,{variant:"subtitle2"},"Contract available at:"),a.createElement(I.Z,{component:p.Z,to:"https://better-call.dev/"+(n.main?"mainnet":S.WY)+"/"+n.contract+"/operations",variant:"subtitle2",style:{fontFamily:"Courier Prime, monospace"}},n.contract))},C=function(){var n=a.useState(""),t=n[0],r=n[1],i=a.useState(5),e=i[0],m=i[1],p=a.useState(""),s=p[0],o=p[1],D=a.useState(!1),I=D[0],u=D[1],G=(0,R.qJ)(),A=G.setInfoSnack,N=G.setErrorSnack,k=G.hideSnack,S=(0,b.Ch)(),C=(0,b.C1)(),O=function(){return t.length>0&(36!==(n=t).length|!n.startsWith("tz1"));var n},T=function(){return!(Math.round(e)==e&e>0)},y=function(){var n=(0,l.Z)(d().mark((function n(){var r,i,a;return d().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,S.wallet.originate({code:f,init:v(t,e)}).send();case 3:return r=n.sent,i=r.opHash.substring(0,10)+"...",A("waiting for "+i+" to be confirmed ..."),n.next=8,r.contract();case 8:a=n.sent,k(),console.log("Origination completed for "+a.address+"."),setTimeout((function(){return o(a.address)}),5e3),n.next=19;break;case 14:n.prev=14,n.t0=n.catch(0),console.log(n.t0),N(n.t0.message),setTimeout(k,4e3);case 19:case"end":return n.stop()}}),n,null,[[0,14]])})));return function(){return n.apply(this,arguments)}}();return a.createElement(c.Z,{style:{backgroundColor:"transparent",border:"1px solid #606770",marginTop:"20px",marginBottom:"20px"},raised:!1},a.createElement(g.Z,{container:!0,style:{padding:22},spacing:3},a.createElement(g.Z,{item:!0,xs:6},a.createElement(P.Z,{onChange:function(n){r(n.target.value)},value:t,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"chairmain",label:"Chairman",error:O(),helperText:O()?"Invalid address format":""})),a.createElement(g.Z,{item:!0,xs:6,style:{textAlign:"center",marginTop:"10px"}},a.createElement(E,{main:I,setMain:u})),a.createElement(g.Z,{item:!0,xs:6},a.createElement(P.Z,{type:"number",onChange:function(n){m(n.target.value)},error:T(),helperText:T()?"Invalid Integer Number":"",value:e,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"maxvotes",label:"Max. nb. votes"})),a.createElement(g.Z,{item:!0,xs:6,style:{textAlign:"center",marginTop:"10px"}},""!==s?a.createElement(h,{contract:s,main:I}):a.createElement(U.Z,{variant:"contained",color:"primary",disableElevation:!0,disabled:!C|T()|O()|0==t.length,onClick:y},"originate"))))},O=function(n){var t=a.useMemo((function(){return(0,u.Z)({palette:{type:"dark",primary:{light:"#1dc5ff",main:"#00ACE7",dark:"#0a90bf",contrastText:"#fff"}}})}),[!0]);return a.createElement(b.MZ,{appName:"Completium IOT"},a.createElement(R.q7,null,a.createElement(G.Z,{theme:t},a.createElement(C,null),a.createElement(A.Z,null))))},T=r(3079),y=["components"],x={id:"template8",title:"Idea box",sidebar_label:"Idea box",slug:"/templates/ideabox"},W=void 0,H={unversionedId:"templates/template8",id:"templates/template8",title:"Idea box",description:"Introduction",source:"@site/docs/templates/template8.md",sourceDirName:"templates",slug:"/templates/ideabox",permalink:"/docs/templates/ideabox",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template8.md",tags:[],version:"current",frontMatter:{id:"template8",title:"Idea box",sidebar_label:"Idea box",slug:"/templates/ideabox"},sidebar:"templates",previous:{title:"Health care",permalink:"/docs/templates/healthcare"},next:{title:"Competition",permalink:"/docs/templates/competition"}},w=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[],level:3},{value:"Entrypoints",id:"entrypoints",children:[],level:3}],level:2},{value:"Originate",id:"originate",children:[{value:"Command line",id:"command-line",children:[],level:3}],level:2},{value:"Code",id:"code",children:[],level:2}],F={toc:w};function L(n){var t=n.components,r=(0,e.Z)(n,y);return(0,m.kt)("wrapper",(0,i.Z)({},F,r,{components:t,mdxType:"MDXLayout"}),(0,m.kt)("h2",{id:"introduction"},"Introduction"),(0,m.kt)("p",null,"This contract implements an Idea Box on the ",(0,m.kt)(p.Z,{to:"/docs/dapp-tools/tezos",mdxType:"Link"},"Tezos")," blockchain. The chairman registers voters and selects the best ideas. Voters are granted a fixed number of votes."),(0,m.kt)("p",null,"You can see this contract in action in the ",(0,m.kt)(p.Z,{to:"/docs/dapp-ideabox/",mdxType:"Link"},"Idea Box")," DApp example."),(0,m.kt)("h2",{id:"api"},"API"),(0,m.kt)("h3",{id:"storage"},"Storage"),(0,m.kt)("p",null,"Ideas data (title and description) are stored as ",(0,m.kt)("inlineCode",{parentName:"p"},"bytes"),"."),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Name"),(0,m.kt)("th",{parentName:"tr",align:null},"Type"),(0,m.kt)("th",{parentName:"tr",align:null},"Description"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"chairman")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"address")),(0,m.kt)("td",{parentName:"tr",align:null},"Address of the box's chairman")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"maxvotes")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"nat")),(0,m.kt)("td",{parentName:"tr",align:null},"Maximum number of votes per voter.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"idea")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"collection")),(0,m.kt)("td",{parentName:"tr",align:null},"An idea is defined by:",(0,m.kt)("ul",null,(0,m.kt)("li",null,"an identifier (key)"),(0,m.kt)("li",null,"a title"),(0,m.kt)("li",null,"a description"),(0,m.kt)("li",null,"a number of votes"),(0,m.kt)("li",null,"a creation date"),(0,m.kt)("li",null,"the author's address")))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"voter")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"collection")),(0,m.kt)("td",{parentName:"tr",align:null},"A voter is defined by:",(0,m.kt)("ul",null,(0,m.kt)("li",null,"an address (key)"),(0,m.kt)("li",null,"a number of remaining votes")))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"selected")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"collecter")),(0,m.kt)("td",{parentName:"tr",align:null},"This is the collection of selected ideas.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"_state")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"states")),(0,m.kt)("td",{parentName:"tr",align:null},"Box state, one of ",(0,m.kt)("inlineCode",{parentName:"td"},"Activated"),", ",(0,m.kt)("inlineCode",{parentName:"td"},"Terminated"),".")))),(0,m.kt)("h3",{id:"entrypoints"},"Entrypoints"),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Name"),(0,m.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,m.kt)("th",{parentName:"tr",align:null},"Description"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"register")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"a")),(0,m.kt)("td",{parentName:"tr",align:null},"Called by ",(0,m.kt)("inlineCode",{parentName:"td"},"chairman")," to register a new voter at address ",(0,m.kt)("inlineCode",{parentName:"td"},"a")," and remaining votes at ",(0,m.kt)("inlineCode",{parentName:"td"},"maxvotes"),".")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"add_idea")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"ititle"),", ",(0,m.kt)("inlineCode",{parentName:"td"},"description")),(0,m.kt)("td",{parentName:"tr",align:null},"Adds an idea in the box if box not terminated (",(0,m.kt)("em",{parentName:"td"},"anyone")," can add an idea).")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"vote")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"n"),", ",(0,m.kt)("inlineCode",{parentName:"td"},"weight")),(0,m.kt)("td",{parentName:"tr",align:null},"Called by a voter to increment by ",(0,m.kt)("inlineCode",{parentName:"td"},"weight")," the number of votes of idea ",(0,m.kt)("inlineCode",{parentName:"td"},"n"),". It fails if box is terminated.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"terminate")),(0,m.kt)("td",{parentName:"tr",align:null}),(0,m.kt)("td",{parentName:"tr",align:null},"Called by ",(0,m.kt)("inlineCode",{parentName:"td"},"chairman")," to close the box and select the top 3 best ideas with numbers of votes above ",(0,m.kt)("inlineCode",{parentName:"td"},"maxvotes"),".")))),(0,m.kt)("h2",{id:"originate"},"Originate"),(0,m.kt)("p",null,"Originate this contract with the widget below."),(0,m.kt)("p",null,'Click "Connect to Wallet" button, fill the fields "Owner" and "Rate", and click "Originate".'),(0,m.kt)(O,{mdxType:"DeployIdeaBox"}),(0,m.kt)("h3",{id:"command-line"},"Command line"),(0,m.kt)("p",null,"Originate the contract from ",(0,m.kt)("a",{href:"https://archetype-lang.org/"},"Archetype")," code below with the following ",(0,m.kt)(p.Z,{to:"/docs/cli",mdxType:"Link"},"Completium CLI")," example command:"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre"},"completium-cli deploy ideabox.arl --init '(@tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG, 5)'\n")),(0,m.kt)("p",null,"The command sets:"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"chairman")," variable to ",(0,m.kt)("inlineCode",{parentName:"li"},"tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"maxvotes")," variable to 2.5")),(0,m.kt)("h2",{id:"code"},"Code"),(0,m.kt)(s.Z,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"},{label:"Scenario",value:"scenario"},{label:"Specification",value:"specification"}],mdxType:"Tabs"},(0,m.kt)(o.Z,{value:"archetype",mdxType:"TabItem"},(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="ideabox.arl"',title:'"ideabox.arl"'},"archetype ideasbox(chairman : address, maxvotes : nat)\n\nstates =\n| Activated initial\n| Terminated\n\nasset idea {\n  id       : nat;\n  title    : bytes;\n  desc     : bytes;\n  nbvotes  : nat = 0;\n  creation : date;\n  author   : address;\n}\n\nasset voter {\n  addr      : address;\n  remaining : nat = maxvotes;\n}\n\nasset selected {\n  sid : nat;\n}\n\nentry register (a_voter : address) {\n  called by chairman\n  require {\n    r0 : state = Activated;\n  }\n  effect { voter.add({ addr = a_voter }) }\n}\n\nentry add_idea(ititle : bytes, description : bytes) {\n  require {\n    r1 : state = Activated;\n  }\n  effect {\n    idea.add({\n      id       = idea.count();\n      title    = ititle;\n      desc     = description;\n      creation = now;\n      author   = caller\n    })\n  }\n}\n\nentry vote(n : nat, weight : nat) {\n  require {\n    r2 : voter.contains(caller);\n    r3 : voter[caller].remaining >= weight;\n    r4 : state = Activated;\n  }\n  effect {\n    voter[caller].remaining -= weight;\n    idea[n].nbvotes += weight;\n  }\n}\n\ntransition terminate () {\n  called by chairman\n  from Activated to Terminated\n  with effect {\n    for i in idea.select(the.nbvotes > maxvotes).sort(desc(nbvotes)).head(3) do\n        selected.add({i})\n    done\n  }\n}\n"))),(0,m.kt)(o.Z,{value:"michelson",mdxType:"TabItem"},(0,m.kt)("p",null,"The ",(0,m.kt)(p.Z,{to:"/docs/contract/programming-language#micheslon",mdxType:"Link"},"Michelson")," code is generated with version 1.2.3 of Archetype."),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-js"},'# (Pair chairman (Pair maxvotes (Pair 0 (Pair {  } (Pair {  } {  })))))\n{\n  storage (pair (address %chairman) (pair (nat %maxvotes) (pair (nat %_state) (pair (map %idea nat (pair (bytes %title) (pair (bytes %desc) (pair (nat %nbvotes) (pair (timestamp %creation) (address %author)))))) (pair (map %voter address nat) (set %selected nat))))));\n  parameter (or (address %register) (or (pair %add_idea (bytes %ititle) (bytes %description)) (or (pair %vote (nat %n) (nat %weight)) (unit %terminate))));\n  code { UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { DIG 6;\n             DUP;\n             DUG 7;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             PUSH nat 0;\n             DIG 5;\n             DUP;\n             DUG 6;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCondition: r0";\n                 FAILWITH }\n               {  };\n             DIG 2;\n             DUP;\n             DUG 3;\n             DIG 1;\n             DUP;\n             DUG 2;\n             MEM;\n             IF\n               { PUSH string "KeyAlreadyExists";\n                 FAILWITH }\n               { DIG 2;\n                 DUP;\n                 DUG 3;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 SOME;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 UPDATE;\n                 DIP { DIG 2; DROP };\n                 DUG 2 };\n             DROP;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             NIL operation;\n             PAIR }\n           { IF_LEFT\n               { UNPAIR;\n                 SWAP;\n                 PUSH nat 0;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCondition: r1";\n                     FAILWITH }\n                   {  };\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 SIZE;\n                 MEM;\n                 IF\n                   { PUSH string "KeyAlreadyExists";\n                     FAILWITH }\n                   { DIG 4;\n                     DUP;\n                     DUG 5;\n                     SENDER;\n                     NOW;\n                     PAIR;\n                     PUSH nat 0;\n                     PAIR;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     PAIR;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     PAIR;\n                     SOME;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     SIZE;\n                     UPDATE;\n                     DIP { DIG 4; DROP };\n                     DUG 4 };\n                 DROP 2;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 NIL operation;\n                 PAIR }\n               { IF_LEFT\n                   { UNPAIR;\n                     SWAP;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     SENDER;\n                     MEM;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCondition: r2";\n                         FAILWITH }\n                       {  };\n                     DUP;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     SENDER;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     COMPARE;\n                     GE;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCondition: r3";\n                         FAILWITH }\n                       {  };\n                     PUSH nat 0;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCondition: r4";\n                         FAILWITH }\n                       {  };\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     SENDER;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     PUSH int 0;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     INT;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     SUB;\n                     COMPARE;\n                     GE;\n                     IF\n                       { DIG 2;\n                         DUP;\n                         DUG 3;\n                         INT;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         SUB;\n                         ABS }\n                       { PUSH string "AssignNat";\n                         FAILWITH };\n                     SOME;\n                     SENDER;\n                     UPDATE;\n                     DIP { DIG 4; DROP };\n                     DUG 4;\n                     DROP;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     UNPAIR;\n                     SWAP;\n                     UNPAIR;\n                     SWAP;\n                     UNPAIR;\n                     DROP;\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     CDR;\n                     CDR;\n                     CAR;\n                     ADD;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SOME;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     UPDATE;\n                     DIP { DIG 5; DROP };\n                     DUG 5;\n                     DROP 3;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     NIL operation;\n                     PAIR }\n                   { DROP;\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCaller";\n                         FAILWITH }\n                       {  };\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     DUP;\n                     PUSH nat 0;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { NIL nat;\n                         NIL nat;\n                         PUSH nat 0;\n                         PAIR;\n                         NIL nat;\n                         NIL nat;\n                         NIL nat;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         ITER { UNPAIR;\n                                DIG 12;\n                                DUP;\n                                DUG 13;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                CDR;\n                                CDR;\n                                CAR;\n                                COMPARE;\n                                GT;\n                                IF\n                                  { DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CONS }\n                                  { DIG 2;\n                                    DUP;\n                                    DUG 3 };\n                                DIP { DIG 2; DROP };\n                                DUG 2;\n                                DROP 2 };\n                         ITER { DIG 1;\n                                DUP;\n                                DUG 2;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                CONS;\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         ITER { DIG 7;\n                                DUP;\n                                DUG 8;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                GET;\n                                IF_NONE\n                                  { PUSH string "GetNoneValue";\n                                    FAILWITH }\n                                  {  };\n                                NIL nat;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                SOME;\n                                PAIR;\n                                DIG 3;\n                                DUP;\n                                DUG 4;\n                                ITER { DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       CAR;\n                                       DIG 2;\n                                       DUP;\n                                       DUG 3;\n                                       CDR;\n                                       DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       IF_NONE\n                                         { DUP;\n                                           DIG 3;\n                                           DUP;\n                                           DUG 4;\n                                           CONS;\n                                           DIG 2;\n                                           DUP;\n                                           DUG 3;\n                                           PAIR }\n                                         { PUSH int 0;\n                                           DIG 14;\n                                           DUP;\n                                           DUG 15;\n                                           DIG 5;\n                                           DUP;\n                                           DUG 6;\n                                           GET;\n                                           IF_NONE\n                                             { PUSH string "GetNoneValue";\n                                               FAILWITH }\n                                             {  };\n                                           DIG 7;\n                                           DUP;\n                                           DUG 8;\n                                           CDR;\n                                           CDR;\n                                           CAR;\n                                           DIG 1;\n                                           DUP;\n                                           DUG 2;\n                                           CDR;\n                                           CDR;\n                                           CAR;\n                                           COMPARE;\n                                           LT;\n                                           IF\n                                             { PUSH int 1 }\n                                             { PUSH int 0 };\n                                           DIP { DROP };\n                                           COMPARE;\n                                           GT;\n                                           IF\n                                             { DIG 1;\n                                               DUP;\n                                               DUG 2;\n                                               DIG 7;\n                                               DUP;\n                                               DUG 8;\n                                               CONS;\n                                               DIG 4;\n                                               DUP;\n                                               DUG 5;\n                                               CONS;\n                                               NONE nat;\n                                               PAIR }\n                                             { DIG 1;\n                                               DUP;\n                                               DUG 2;\n                                               DIG 4;\n                                               DUP;\n                                               DUG 5;\n                                               CONS;\n                                               DIG 3;\n                                               DUP;\n                                               DUG 4;\n                                               PAIR };\n                                           SWAP;\n                                           DROP };\n                                       DIP { DROP };\n                                       DIP { DROP };\n                                       DIP { DIG 1; DROP };\n                                       DUG 1;\n                                       DROP };\n                                DUP;\n                                CAR;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                CDR;\n                                NIL nat;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                IF_NONE\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2 }\n                                  { DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    DIG 7;\n                                    DUP;\n                                    DUG 8;\n                                    CONS;\n                                    SWAP;\n                                    DROP };\n                                ITER { DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       CONS;\n                                       DIP { DIG 1; DROP };\n                                       DUG 1;\n                                       DROP };\n                                DIP { DROP };\n                                DIP { DROP };\n                                DIP { DROP };\n                                DIP { DROP };\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         ITER { PUSH nat 3;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                CAR;\n                                COMPARE;\n                                LT;\n                                IF\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CDR;\n                                    DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CONS;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR }\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CDR;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR };\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         CDR;\n                         ITER { DIG 1;\n                                DUP;\n                                DUG 2;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                CONS;\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         ITER { DIG 2;\n                                DUP;\n                                DUG 3;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                MEM;\n                                IF\n                                  { PUSH string "KeyAlreadyExists";\n                                    FAILWITH }\n                                  { DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    PUSH bool True;\n                                    DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    UPDATE;\n                                    DIP { DIG 2; DROP };\n                                    DUG 2 };\n                                DROP };\n                         PUSH nat 1;\n                         DIP { DIG 4; DROP };\n                         DUG 4 }\n                       { PUSH string "InvalidState";\n                         FAILWITH };\n                     DROP;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     NIL operation;\n                     PAIR } } } };\n}\n'))),(0,m.kt)(o.Z,{value:"scenario",mdxType:"TabItem"},(0,m.kt)("p",null,"The ",(0,m.kt)(p.Z,{to:"/docs/contract/test-scenario",mdxType:"Link"},"scenario")," assumes three accounts are available:"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"admin"),", the current one"),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"alice")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"bob"))),(0,m.kt)("p",null,"To run the test, run the following script:"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre"},"cd ideabox\nnpm install\nnpm test\n")),(0,m.kt)("p",null,"in the ",(0,m.kt)(p.Z,{to:"/docs/dapp-tools/gitpod#user-interface",mdxType:"Link"},"Terminal")," of the gitpod environment:"),(0,m.kt)(T.Z,{url:"https://gitpod.io/#https://github.com/edukera/completium-contract-templates",txt:"open gitpod",mdxType:"DappButton"}),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="test.js"',title:'"test.js"'},"const assert     = require('assert');\nconst Completium = require('@completium/completium-cli');\n\nconst test = async () => {\n  const completium = new Completium ();\n  await completium.originate('ideabox.arl', {\n    init: '(' + completium.getAddress('admin') + ',5)'\n  });\n  // add 4 ideas\n  await completium.call('ideabox', {\n    entry : 'add_idea',\n    with  : '(0x1a85302e204e0860760ce002008b409e2825bc0c607b015d631100ccf49100ddc28e7880,0x248020ee0f60ae03602621812c0d60531005c22003809c25c2019c34c00b010d311838d2a06109f5c03a100630803b129037c790803741497807310016c9324c55f004f10a2d2634f8abf1054e44062569c24247945eb4f88006a9bb6e9220e15358cb85102b1be4ea054b2fa60cae4d4b42ad020e868b83ed0c204485c923230106058380410e20c58141800466826ea543050180066ac8518b27c682a9c001299681ac2b2ba6af89a540ada2eb9f98d0a484aaaaee696d62e95303e7e887c529c00ca10b2185d68bcaed0c530e134b316d0d620b61a5a3a7a6ead2000828bea8e0f8848e2d237870626b1968b8038096c9575b80a6de12041529510190b8507c14c54001a3a081a81a6c9e1245e3c01d784832be978080c84050203ab0806888625448011a83406e06d061014632a98e6571b0d46adc841f0b83c95b28b1a07914828b452be84ee41c09170557c1483010902f0d059000a9d86ec21e2c970507bbb080)'\n  });\n  await completium.call('ideabox', {\n    entry : 'add_idea',\n    with  : '(0x1285306e096620040e204302d8804e06718184036057008c6015403b1c07b018c06b100130108800,0x0a87b0040ee01620b6604b00b996043027980c6201db6029804e7803460092612502780d6558033800e85a4c06623134c00ae2cd1e00262cc086e54c6700c27cd803a308561b00362032142934589cc291c1207b31102d26d426002a9e64848c065246893e80f4f345a189a240c181c873898209b3e2c8292aaaf3f0820bf00399a2c3d1a581e21110db2023eaa8020819c5a22b10a9a86b6aebdb521001ba11e182f20a47b6d30821a0b3c3d14b7370936580038a679983ca6a08011a39e36b6032b8d382c16360999b10b2a803abda0d8306e2c2c377216349a9e1f4b00cb1224823d5f135c954276cc0c44200169e8ef64209bcd35991de68b15939d69b231f12e1d68905bc46583a896e63a1b120c8282b0be084d1a1f8f8bcb7190c73009c4929142d010925c6c1f14742602eed08cae2e1a64ab5454146a0b0f4b970269e84c1166d0844c164df6ef43a48d8a96c14106936e159e0943f98b94aa601eb18600c0a59440000)'\n  });\n  await completium.call('ideabox', {\n    entry : 'add_idea',\n    with  : '(0x130060a40040260960ce06303d815c07601709206638806e31402992100e602180b624454208971c4804e30b10e1c4038806100aa11e03682c127000e18612344000,0x130060a40040260960ce06303d815c07601709206638806e31402992100e602180b624454208971c4804e30b10e1c4038806100aa10024805900f210d840c002de2caa44d05381003baa003650200077624306009e1068a040a2093470509f1a4aa08e8601d25539b17d1c152e890f94807b040986150c087b2680190400108a74393b3a04002338000d2e402b243268242e3e150f0916bc8c1d26a1892479a440118a160c161c09090d26ae8c0035bd00440f40c0051c00250439aa1595259a3f54003d1695260402aa838001963b7b1218e2e99864444911e680328028a6c00cb3fc81d612ca11cb968e2c3753c9c886558f0f89d2c04d8c481a391e06813a4cd0f63c09010182f100)'\n  });\n  await completium.call('ideabox', {\n    entry : 'add_idea',\n    with  : '(0x3884b06602e0040c2086027009819c0846a0,0x3a80b09e0040c608607601708124201b03d8c026102da4039809601992b004ed80ce131886fa431450602ba210d4c220c24a861a00ee30c1d0100dc02984181001188f851e42261c6bce93401d04190d0844d1165c1a1d28681428cc396643caab4228e2fdf3cd1aee050cd289d64d10c20013538156df18868684c21389031020024015401c4014452001d0a312810b9bcc0235000adb491b565700104f06000bdd3e8ac116470534851b0fa01854b0b0d494a5c1220e529216c6178e1ab3d961494d0349908992989084091cc099554e1d53dbc41531da5927d0bc09360d1a061a823f200545000e47e0079080fc32c80032840467940564004a91080001400327966842f200426c440507f484419a107846351a0847fc20408018ad34120800888200425908721fe790854380c8305448108880438164fd100000)'\n  });\n  try {\n    await completium.call('ideabox', {\n      entry : 'vote',\n      with  : '(0,1)',\n      as    : 'alice'\n    });\n    assert(false, \"Non Registered Voter Should Not Be Able To Vote.\");\n  } catch (e) {\n    assert(true);\n  }\n  await completium.call('ideabox', {\n    entry : 'register',\n    with  : completium.getAddress('alice'),\n  });\n  await completium.call('ideabox', {\n    entry : 'vote',\n    with  : '(0,5)',\n    as    : 'alice'\n  });\n  try {\n    await completium.call('ideabox', {\n      entry : 'vote',\n      with  : '(0,5)',\n      as    : 'alice'\n    });\n    assert(false, \"Voter Should Not Be Able To Vote More Than 5 Times.\");\n  } catch (e) {\n    assert(true);\n  }\n  await completium.call('ideabox', {\n    entry : 'register',\n    with  : completium.getAddress('bob'),\n  });\n  await completium.call('ideabox', {\n    entry : 'vote',\n    with  : '(0,1)',\n    as    : 'bob'\n  });\n  await completium.call('ideabox', {\n    entry : 'vote',\n    with  : '(1,4)',\n    as    : 'bob'\n  });\n  await completium.call('ideabox', { entry : 'terminate' });\n  // Check nb votes and that only idea 0 is selected\n  const storage = await completium.getStorage('ideabox');\n  const idea0 = storage.idea.get('0');\n  const idea1 = storage.idea.get('1');\n  const nbvotes_0 = idea0[Object.keys(idea0)[3]].toNumber();\n  const nbvotes_1 = idea1[Object.keys(idea0)[3]].toNumber();\n  assert(nbvotes_0 == 6, \"Invalid Number Of Votes Idea 0\");\n  assert(nbvotes_1 == 4, \"Invalid Number Of Votes Idea 1\");\n  assert(true);\n}\n\ntest();\n"))),(0,m.kt)(o.Z,{value:"specification",mdxType:"TabItem"},(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="ideabox.arl"',title:'"ideabox.arl"'},'specification {\n  i1 : maxvotes * voter.count() = idea.sum(nbvotes) + voter.sum(remaining)\n}\n\nspecification entry add_idea(ititle : bytes, description : bytes) {\n  fails {\n    add_idea_f1 with (msg : string) :\n      msg = "InvalidState" and\n      state <> Activated;\n    add_idea_f2 with (msg : string) :\n      msg = "KeyAlreadyExists" and\n      false;\n  }\n  postcondition add_idea_p1 {\n    forall i in added.idea, i.id = before.idea.count() and\n    added.idea.count() = 1\n  }\n}\n\nspecification entry register(a_voter : address) {\n  fails {\n    register_f1 with (msg : string) :\n      msg = "InvalidState" and\n      state <> Activated;\n    register_f2 with (msg : string) :\n      msg = "InvalidCaller" and\n      caller <> chairman;\n    register_f3 with (msg : string) :\n      msg = "KeyAlreadyExists" and\n      voter.contains(a_voter);\n  }\n  postcondition register_p1 {\n    forall v in added.voter, v.addr = a_voter and\n    added.voter.count() = 1\n  }\n}\n\nspecification entry vote (n : nat, weight : nat) {\n  fails {\n    f0 with (msg : string) :\n      msg = "GetNoneValue" and\n      (not voter.contains(caller) or not idea.contains(n));\n    f1 with (msg : string) :\n      let some v = voter[caller] in\n        v.remaining < weight\n      otherwise true;\n    f2 with (msg : string) :\n      msg = "InvalidState" and\n      state <> Activated;\n  }\n  postcondition p1 {\n    let some v = voter[caller] in\n    let some bv = before.voter[caller] in\n      v.remaining = bv.remaining - weight\n    otherwise true otherwise true\n  }\n  postcondition p2 {\n    let some i = idea[n] in\n    let some bi = before.idea[n] in\n      i.nbvotes = bi.nbvotes + weight\n    otherwise true otherwise true\n  }\n}\n\nspecification entry terminate () {\n  postcondition p3 {\n    before.state = Activated ->\n    selected.count() <= 3\n  }\n  postcondition p4 {\n    before.state = Activated ->\n    forall s in selected,\n      let some i = idea[s.sid] in\n        i.nbvotes > maxvotes and\n        forall o in idea,\n          not selected.contains(o.id) ->\n          o.nbvotes <= i.nbvotes\n      otherwise false\n  }\n}\n')))))}L.isMDXComponent=!0},2361:function(){},4616:function(){}}]);