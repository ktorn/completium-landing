"use strict";(self.webpackChunkcompletium_landing=self.webpackChunkcompletium_landing||[]).push([[2223],{8215:function(n,e,t){var a=t(7294);e.Z=function(n){var e=n.children,t=n.hidden,r=n.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:r},e)}},6396:function(n,e,t){t.d(e,{Z:function(){return D}});var a=t(7462),r=t(7294),l=t(2389),i=t(9443);var o=function(){var n=(0,r.useContext)(i.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},d=t(1968),s=t(6010),u="tabItem_1uMI";function p(n){var e,t,a,l=n.lazy,i=n.block,p=n.defaultValue,D=n.values,m=n.groupId,c=n.className,I=r.Children.map(n.children,(function(n){if((0,r.isValidElement)(n)&&void 0!==n.props.value)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),U=null!=D?D:I.map((function(n){var e=n.props;return{value:e.value,label:e.label}})),P=(0,d.lx)(U,(function(n,e){return n.value===e.value}));if(P.length>0)throw new Error('Docusaurus error: Duplicate values "'+P.map((function(n){return n.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var G=null===p?p:null!=(e=null!=p?p:null==(t=I.find((function(n){return n.props.default})))?void 0:t.props.value)?e:null==(a=I[0])?void 0:a.props.value;if(null!==G&&!U.some((function(n){return n.value===G})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+G+'" but none of its children has the corresponding value. Available values are: '+U.map((function(n){return n.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=o(),k=N.tabGroupChoices,v=N.setTabGroupChoices,g=(0,r.useState)(G),f=g[0],h=g[1],A=[],E=(0,d.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var T=k[m];null!=T&&T!==f&&U.some((function(n){return n.value===T}))&&h(T)}var b=function(n){var e=n.currentTarget,t=A.indexOf(e),a=U[t].value;a!==f&&(E(e),h(a),null!=m&&v(m,a))},S=function(n){var e,t=null;switch(n.key){case"ArrowRight":var a=A.indexOf(n.currentTarget)+1;t=A[a]||A[0];break;case"ArrowLeft":var r=A.indexOf(n.currentTarget)-1;t=A[r]||A[A.length-1]}null==(e=t)||e.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":i},c)},U.map((function(n){var e=n.value,t=n.label;return r.createElement("li",{role:"tab",tabIndex:f===e?0:-1,"aria-selected":f===e,className:(0,s.Z)("tabs__item",u,{"tabs__item--active":f===e}),key:e,ref:function(n){return A.push(n)},onKeyDown:S,onFocus:b,onClick:b},null!=t?t:e)}))),l?(0,r.cloneElement)(I.filter((function(n){return n.props.value===f}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},I.map((function(n,e){return(0,r.cloneElement)(n,{key:e,hidden:n.props.value!==f})}))))}function D(n){var e=(0,l.Z)();return r.createElement(p,(0,a.Z)({key:String(e)},n))}},9852:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return u},contentTitle:function(){return p},metadata:function(){return D},toc:function(){return m},default:function(){return I}});var a=t(7462),r=t(3366),l=(t(7294),t(3905)),i=t(9960),o=t(6396),d=t(8215),s=["components"],u={id:"template2",title:"ERC20",sidebar_label:"ERC20",slug:"/templates/erc20"},p=void 0,D={unversionedId:"templates/template2",id:"templates/template2",title:"ERC20",description:"Introduction",source:"@site/docs/templates/template2.md",sourceDirName:"templates",slug:"/templates/erc20",permalink:"/docs/templates/erc20",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template2.md",tags:[],version:"current",frontMatter:{id:"template2",title:"ERC20",sidebar_label:"ERC20",slug:"/templates/erc20"},sidebar:"templates",previous:{title:"FA 1.2",permalink:"/docs/templates/fa12"},next:{title:"FA 2",permalink:"/docs/templates/nft"}},m=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[],level:3},{value:"Entrypoints",id:"entrypoints",children:[],level:3}],level:2},{value:"Originate",id:"originate",children:[],level:2},{value:"Code",id:"code",children:[],level:2}],c={toc:m};function I(n){var e=n.components,t=(0,r.Z)(n,s);return(0,l.kt)("wrapper",(0,a.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"It is strongly suggested to use the ",(0,l.kt)(i.Z,{to:"/docs/templates/fa12",mdxType:"Link"},"FA 1.2")," norm for fungible token."))),(0,l.kt)("h2",{id:"api"},"API"),(0,l.kt)("h3",{id:"storage"},"Storage"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"total")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nat")),(0,l.kt)("td",{parentName:"tr",align:null},"total number of unit tokens.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"onetoken")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nat")),(0,l.kt)("td",{parentName:"tr",align:null},"number of units for one token.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ledger")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection")),(0,l.kt)("td",{parentName:"tr",align:null},"Association between token holder and number of tokens.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"allowance")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"collection")),(0,l.kt)("td",{parentName:"tr",align:null},"Association between the pair owner and spender and the allowed amount.")))),(0,l.kt)("h3",{id:"entrypoints"},"Entrypoints"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"transfer")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"to"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"value")),(0,l.kt)("td",{parentName:"tr",align:null},"Transfers ",(0,l.kt)("inlineCode",{parentName:"td"},"value")," tokens from ",(0,l.kt)("em",{parentName:"td"},"caller")," to ",(0,l.kt)("inlineCode",{parentName:"td"},"to"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"approve")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"spender"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"value")),(0,l.kt)("td",{parentName:"tr",align:null},"Approves ",(0,l.kt)("inlineCode",{parentName:"td"},"spender")," to transfer ",(0,l.kt)("inlineCode",{parentName:"td"},"value")," tokens from ",(0,l.kt)("em",{parentName:"td"},"caller"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"transferFrom")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"from"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"to"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"value")),(0,l.kt)("td",{parentName:"tr",align:null},"Transfers ",(0,l.kt)("inlineCode",{parentName:"td"},"value")," tokens from ",(0,l.kt)("inlineCode",{parentName:"td"},"from")," to ",(0,l.kt)("inlineCode",{parentName:"td"},"to"),". It requires that ",(0,l.kt)("em",{parentName:"td"},"caller")," have been allowed by ",(0,l.kt)("inlineCode",{parentName:"td"},"from")," to transfer this amount to ",(0,l.kt)("inlineCode",{parentName:"td"},"to"),".")))),(0,l.kt)("h2",{id:"originate"},"Originate"),(0,l.kt)("p",null,"Deploy the contract from ",(0,l.kt)("a",{href:"https://archetype-lang.org/"},"Archetype")," code below with the following ",(0,l.kt)(i.Z,{to:"/docs/cli",mdxType:"Link"},"Completium CLI")," example command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"completium-cli deploy erc20.arl --init '(1_000_000_000_000_000, 1_000_000, @tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG)'\n")),(0,l.kt)("p",null,"The command sets:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"total")," variable to 10 millions"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"onetoken")," variable to 1 million"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"initialholder")," constant to ",(0,l.kt)("inlineCode",{parentName:"li"},"tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG"))),(0,l.kt)("h2",{id:"code"},"Code"),(0,l.kt)(o.Z,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"}],mdxType:"Tabs"},(0,l.kt)(d.Z,{value:"archetype",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="erc20.arl"',title:'"erc20.arl"'},"archetype erc20(total : nat, onetoken: nat, const initialowner : address)\n\nasset allowance identified by owner spender {\n  owner     : address;\n  spender     : address;\n  amount      : nat;\n}\n\nasset ledger identified by holder {\n  holder     : address;\n  tokens     : nat = 0;\n} initialized by {\n  { holder = initialowner; tokens = total }\n}\n\nentry %transfer (%to : pkey<ledger>, value : nat) {\n  require {\n    d0 : ledger[caller].tokens >= value\n  }\n  effect {\n    ledger.addupdate(%to,  { tokens += value });\n    ledger.update(caller, { tokens -= value })\n  }\n}\n\nentry approve(ispender : address, value : nat) {\n  require {\n    d1 : ledger[caller].tokens >= value;\n  }\n  effect {\n    allowance.addupdate((caller, ispender), { amount = value });\n  }\n}\n\nentry transferFrom(%from : address, %to : address, value : nat) {\n  require {\n    d3: allowance[(%from,caller)].amount >= value;\n    d4: ledger[%from].tokens >= value\n  }\n  effect {\n    (* update allowance *)\n    allowance.update((%from,caller), { amount -=  value });\n    (* update token *)\n    ledger.addupdate(%to, { tokens += value });\n    ledger.update(%from,  { tokens -= value });\n  }\n}\n"))),(0,l.kt)(d.Z,{value:"michelson",mdxType:"TabItem"},(0,l.kt)("p",null,"The ",(0,l.kt)(i.Z,{to:"/docs/contract/programming-language#micheslon",mdxType:"Link"},"Michelson")," code is generated with version 1.2.3 of Archetype."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'# (Pair 1000000000000000 (Pair 1000000 (Pair {  } { Elt "tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG" 1000000000000000 })))\n{\n  storage (pair (nat %total) (pair (nat %onetoken) (pair (map %allowance (pair address address) nat) (map %ledger address nat))));\n  parameter (or (pair %transfer (address %to) (nat %value)) (or (pair %approve (address %ispender) (nat %value)) (pair %transferFrom (address %from) (pair (address %to) (nat %value)))));\n  code { UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { UNPAIR;\n             SWAP;\n             DUP;\n             DIG 3;\n             DUP;\n             DUG 4;\n             SENDER;\n             GET;\n             IF_NONE\n               { PUSH string "GetNoneValue";\n                 FAILWITH }\n               {  };\n             COMPARE;\n             GE;\n             NOT;\n             IF\n               { PUSH string "InvalidCondition: d0";\n                 FAILWITH }\n               {  };\n             DIG 2;\n             DUP;\n             DUG 3;\n             DIG 2;\n             DUP;\n             DUG 3;\n             MEM;\n             IF\n               { DIG 2;\n                 DUP;\n                 DUG 3;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 GET;\n                 IF_NONE\n                   { PUSH string "GetNoneValue";\n                     FAILWITH }\n                   {  };\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 ADD;\n                 SOME;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 UPDATE;\n                 DIP { DIG 3; DROP };\n                 DUG 3;\n                 DROP }\n               { DIG 2;\n                 DUP;\n                 DUG 3;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 MEM;\n                 IF\n                   { PUSH string "KeyAlreadyExists";\n                     FAILWITH }\n                   { DIG 2;\n                     DUP;\n                     DUG 3;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     PUSH nat 0;\n                     ADD;\n                     SOME;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     UPDATE;\n                     DIP { DIG 2; DROP };\n                     DUG 2 } };\n             DIG 2;\n             DUP;\n             DUG 3;\n             SENDER;\n             GET;\n             IF_NONE\n               { PUSH string "GetNoneValue";\n                 FAILWITH }\n               {  };\n             DIG 3;\n             DUP;\n             DUG 4;\n             PUSH int 0;\n             DIG 3;\n             DUP;\n             DUG 4;\n             INT;\n             DIG 3;\n             DUP;\n             DUG 4;\n             SUB;\n             COMPARE;\n             GE;\n             IF\n               { DIG 2;\n                 DUP;\n                 DUG 3;\n                 INT;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 SUB;\n                 ABS }\n               { PUSH string "AssignNat";\n                 FAILWITH };\n             SOME;\n             SENDER;\n             UPDATE;\n             DIP { DIG 3; DROP };\n             DUG 3;\n             DROP 3;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             NIL operation;\n             PAIR }\n           { IF_LEFT\n               { UNPAIR;\n                 SWAP;\n                 DUP;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 SENDER;\n                 GET;\n                 IF_NONE\n                   { PUSH string "GetNoneValue";\n                     FAILWITH }\n                   {  };\n                 COMPARE;\n                 GE;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCondition: d1";\n                     FAILWITH }\n                   {  };\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 DIG 1;\n                 DUP;\n                 DUG 2;\n                 SOME;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 SENDER;\n                 PAIR;\n                 UPDATE;\n                 DIP { DIG 3; DROP };\n                 DUG 3;\n                 DROP 2;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 NIL operation;\n                 PAIR }\n               { UNPAIR;\n                 SWAP;\n                 UNPAIR;\n                 SWAP;\n                 DUP;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 SENDER;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 PAIR;\n                 GET;\n                 IF_NONE\n                   { PUSH string "GetNoneValue";\n                     FAILWITH }\n                   {  };\n                 COMPARE;\n                 GE;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCondition: d3";\n                     FAILWITH }\n                   {  };\n                 DUP;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 GET;\n                 IF_NONE\n                   { PUSH string "GetNoneValue";\n                     FAILWITH }\n                   {  };\n                 COMPARE;\n                 GE;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCondition: d4";\n                     FAILWITH }\n                   {  };\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 SENDER;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 PAIR;\n                 GET;\n                 IF_NONE\n                   { PUSH string "GetNoneValue";\n                     FAILWITH }\n                   {  };\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 PUSH int 0;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 INT;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 SUB;\n                 COMPARE;\n                 GE;\n                 IF\n                   { DIG 2;\n                     DUP;\n                     DUG 3;\n                     INT;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     SUB;\n                     ABS }\n                   { PUSH string "AssignNat";\n                     FAILWITH };\n                 SOME;\n                 SENDER;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 PAIR;\n                 UPDATE;\n                 DIP { DIG 5; DROP };\n                 DUG 5;\n                 DROP;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 MEM;\n                 IF\n                   { DIG 3;\n                     DUP;\n                     DUG 4;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     ADD;\n                     SOME;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     UPDATE;\n                     DIP { DIG 4; DROP };\n                     DUG 4;\n                     DROP }\n                   { DIG 3;\n                     DUP;\n                     DUG 4;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     MEM;\n                     IF\n                       { PUSH string "KeyAlreadyExists";\n                         FAILWITH }\n                       { DIG 3;\n                         DUP;\n                         DUG 4;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         PUSH nat 0;\n                         ADD;\n                         SOME;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         UPDATE;\n                         DIP { DIG 3; DROP };\n                         DUG 3 } };\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 GET;\n                 IF_NONE\n                   { PUSH string "GetNoneValue";\n                     FAILWITH }\n                   {  };\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 PUSH int 0;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 INT;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 SUB;\n                 COMPARE;\n                 GE;\n                 IF\n                   { DIG 2;\n                     DUP;\n                     DUG 3;\n                     INT;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     SUB;\n                     ABS }\n                   { PUSH string "AssignNat";\n                     FAILWITH };\n                 SOME;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 UPDATE;\n                 DIP { DIG 4; DROP };\n                 DUG 4;\n                 DROP 4;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 NIL operation;\n                 PAIR } } };\n}\n')))))}I.isMDXComponent=!0}}]);