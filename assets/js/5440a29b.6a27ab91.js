(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{132:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return d})),t.d(e,"metadata",(function(){return b})),t.d(e,"toc",(function(){return c})),t.d(e,"default",(function(){return P}));var a=t(3),r=(t(0),t(238)),i=(t(239),t(252)),l=t(253);const d={id:"template13",title:"Health care",sidebar_label:"Health care",slug:"/templates/healthcare"},b={unversionedId:"templates/template13",id:"templates/template13",isDocsHomePage:!1,title:"Health care",description:"Introduction",source:"@site/docs/templates/template13.md",slug:"/templates/healthcare",permalink:"/docs/templates/healthcare",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template13.md",version:"current",sidebar_label:"Health care",sidebar:"templates",previous:{title:"Connected Object",permalink:"/docs/templates/iot"},next:{title:"Idea box",permalink:"/docs/templates/ideabox"}},c=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Code",id:"code",children:[]}],o={toc:c};function P({components:n,...e}){return Object(r.b)("wrapper",Object(a.a)({},o,e,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"introduction"},"Introduction"),Object(r.b)("p",null,"This contract between a patient and its insurer establishes the rules of payment:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"between insurance and doctors"),Object(r.b)("li",{parentName:"ul"},"between the patient and the insurer")),Object(r.b)("p",null,"The insurer pays the consultation price to the doctor."),Object(r.b)("p",null,"The patient pays the insurer:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"a fee on a regular basis"),Object(r.b)("li",{parentName:"ul"},"an amount per consultation capped to a fixed deductible amount")),Object(r.b)("h2",{id:"api"},"API"),Object(r.b)("h3",{id:"storage"},"Storage"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Name"),Object(r.b)("th",{parentName:"tr",align:null},"Type"),Object(r.b)("th",{parentName:"tr",align:null},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"patient")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"address")),Object(r.b)("td",{parentName:"tr",align:null},"Patient's address.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"insurer")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"address")),Object(r.b)("td",{parentName:"tr",align:null},"Insurer's address.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"fee")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"tez")),Object(r.b)("td",{parentName:"tr",align:null},"Fee value, paid by patient to insurer every ",Object(r.b)("inlineCode",{parentName:"td"},"fee_period")," period of time.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"fee_period")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"duration")),Object(r.b)("td",{parentName:"tr",align:null},"Covering period for one ",Object(r.b)("inlineCode",{parentName:"td"},"fee")," payment.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"deductible")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"tez")),Object(r.b)("td",{parentName:"tr",align:null},"Maximum amount paid by ",Object(r.b)("inlineCode",{parentName:"td"},"patient")," to ",Object(r.b)("inlineCode",{parentName:"td"},"insurer")," for a consultation.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"doctor")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"collection")),Object(r.b)("td",{parentName:"tr",align:null},"A doctor is defined by an address and the debt due by ",Object(r.b)("inlineCode",{parentName:"td"},"insurer")," to doctor.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"last_fee_date")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"date")),Object(r.b)("td",{parentName:"tr",align:null},"Date of last fee payment. Used internally to compute number of due fees.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"patient_confirmed")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"bool")),Object(r.b)("td",{parentName:"tr",align:null},"Has patient confirmed contract ? Used internally to compute ",Object(r.b)("inlineCode",{parentName:"td"},"Running")," state.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"insurer_confirmed")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"bool")),Object(r.b)("td",{parentName:"tr",align:null},"Has insurer confirmed contract ? Used internally to compute ",Object(r.b)("inlineCode",{parentName:"td"},"Running")," state.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"deductible_debt")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"tez")),Object(r.b)("td",{parentName:"tr",align:null},"Sum of deductibles due by ",Object(r.b)("inlineCode",{parentName:"td"},"patient")," to ",Object(r.b)("inlineCode",{parentName:"td"},"insurer"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"_state")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"states")),Object(r.b)("td",{parentName:"tr",align:null},"One of ",Object(r.b)("inlineCode",{parentName:"td"},"Created"),", ",Object(r.b)("inlineCode",{parentName:"td"},"Running"),", ",Object(r.b)("inlineCode",{parentName:"td"},"Canceled"))))),Object(r.b)("h3",{id:"entrypoints"},"Entrypoints"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Name"),Object(r.b)("th",{parentName:"tr",align:null},"Parameters"),Object(r.b)("th",{parentName:"tr",align:null},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"confirm")),Object(r.b)("td",{parentName:"tr",align:null}),Object(r.b)("td",{parentName:"tr",align:null},"Called by ",Object(r.b)("inlineCode",{parentName:"td"},"patient")," and ",Object(r.b)("inlineCode",{parentName:"td"},"insurer")," to confirm contract.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"toRunning")),Object(r.b)("td",{parentName:"tr",align:null}),Object(r.b)("td",{parentName:"tr",align:null},"Internally called by contract to set contrat to ",Object(r.b)("inlineCode",{parentName:"td"},"Running")," state when confirmed by ",Object(r.b)("inlineCode",{parentName:"td"},"patient")," and ",Object(r.b)("inlineCode",{parentName:"td"},"insurer"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"cancel")),Object(r.b)("td",{parentName:"tr",align:null}),Object(r.b)("td",{parentName:"tr",align:null},"Called by ",Object(r.b)("inlineCode",{parentName:"td"},"patient")," or ",Object(r.b)("inlineCode",{parentName:"td"},"insurer")," to cancel contract.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"register_doctor")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"a")),Object(r.b)("td",{parentName:"tr",align:null},"Registers doctor at address ",Object(r.b)("inlineCode",{parentName:"td"},"a"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"declare_consultation")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"p")),Object(r.b)("td",{parentName:"tr",align:null},"A doctor declares a medical consultation for ",Object(r.b)("inlineCode",{parentName:"td"},"patient")," of price ",Object(r.b)("inlineCode",{parentName:"td"},"p"),". ",Object(r.b)("p",null),"It increments:",Object(r.b)("ul",null,Object(r.b)("li",null,Object(r.b)("inlineCode",{parentName:"td"},"deductible_debt")," (paid by ",Object(r.b)("inlineCode",{parentName:"td"},"patient")," to ",Object(r.b)("inlineCode",{parentName:"td"},"insurer"),") by the minimum of ",Object(r.b)("inlineCode",{parentName:"td"},"p")," and ",Object(r.b)("inlineCode",{parentName:"td"},"deductible")),Object(r.b)("li",null,"the debt of ",Object(r.b)("inlineCode",{parentName:"td"},"insurer")," (paid to doctor) by ",Object(r.b)("inlineCode",{parentName:"td"},"p"))))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"pay_doctor")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"doc")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"insurer")," pays doctor ",Object(r.b)("inlineCode",{parentName:"td"},"doc")," the debt value (accumulated by ",Object(r.b)("inlineCode",{parentName:"td"},"declare_declaration"),").")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"pay_fees")),Object(r.b)("td",{parentName:"tr",align:null}),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"patient")," pays ",Object(r.b)("inlineCode",{parentName:"td"},"insurer")," the fee. ",Object(r.b)("p",null),"The amount is computed based on ",Object(r.b)("inlineCode",{parentName:"td"},"last_fee_date")," as the number of periods ",Object(r.b)("inlineCode",{parentName:"td"},"period")," multiplied by ",Object(r.b)("inlineCode",{parentName:"td"},"fee"),". It updates ",Object(r.b)("inlineCode",{parentName:"td"},"last_fee_date"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"pay_deductible")),Object(r.b)("td",{parentName:"tr",align:null}),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"patient")," pays ",Object(r.b)("inlineCode",{parentName:"td"},"insurer")," the amount of ",Object(r.b)("inlineCode",{parentName:"td"},"deductible_debt")," (accumulated by ",Object(r.b)("inlineCode",{parentName:"td"},"declare_declaration"),").")))),Object(r.b)("h2",{id:"code"},"Code"),Object(r.b)(i.a,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"},{label:"Specification",value:"specification"}],mdxType:"Tabs"},Object(r.b)(l.a,{value:"archetype",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-archetype",metastring:'title="healthcare.arl"',title:'"healthcare.arl"'},"archetype health_care(\n  patient       : address,\n  insurer       : address,\n  fee           : tez,\n  fee_period    : duration,\n  deductible    : tez,\n)\n\nvariable last_fee_date : date = now\n\nvariable patient_confirmed : bool = false\nvariable insurer_confirmed : bool = false\n\nvariable deductible_debt : tez = 0tz\n\nasset doctor {\n  addr : address;\n  debt : tez = 0tz;\n}\n\nstates =\n| Created   initial\n| Running\n| Canceled\n\ntransition toRunning () {\n  called by selfaddress\n  from Created to Running\n  with effect { last_fee_date := now }\n}\n\nentry confirm() {\n  if caller = patient then patient_confirmed := true;\n  if caller = insurer then insurer_confirmed := true;\n  if patient_confirmed and insurer_confirmed then\n    transfer 0tz to entry self.toRunning()\n}\n\ntransition cancel () {\n  called by insurer or patient\n  from any to Canceled\n}\n\nentry register_doctor (a : address) {\n  called by patient\n  require { r1 : state = Running; }\n  effect  { doctor.add ({ addr = a }) }\n}\n\nentry declare_consultation (p : tez) {\n  require {\n     r2 : state = Running;\n     r3 : doctor.contains(caller);\n  }\n  effect {\n    doctor.update(caller, { debt += p });\n    deductible_debt += min(p, deductible)\n  }\n}\n\n(* Payment from Insurance to Doctor *)\n\nentry pay_doctor (doc : address) {\n  called by insurer\n  require { r4 : state = Running }\n  effect {\n    var decrease : tez = min(transferred, doctor[doc].debt);\n    transfer decrease to doc;\n    transfer (transferred - decrease) to insurer;\n    doctor.update (doc, { debt -= decrease })\n  }\n}\n\n(* Payments from Patient to Insuance *)\n\nentry pay_fees () {\n  called by patient\n  require { r5 : state = Running }\n  effect {\n    var nb_periods : int = (now - last_fee_date) div fee_period;\n    var due = nb_periods * fee;\n    var decrease : tez = min (transferred, due);\n    transfer decrease to insurer;\n    transfer (transferred - decrease) to patient;\n    last_fee_date += nb_periods * fee_period\n  }\n}\n\nentry pay_deductibles () {\n  called by patient\n  require { r6 : state = Running; }\n  effect {\n    var decrease : tez = min (transferred, deductible_debt);\n    transfer decrease to insurer;\n    transfer (transferred - decrease) to patient;\n    deductible_debt -= decrease\n  }\n}\n"))),Object(r.b)(l.a,{value:"michelson",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'# (Pair patient (Pair insurer (Pair fee (Pair fee_period (Pair deductible (Pair 1618187246 (Pair False (Pair False (Pair 0 (Pair 0 {  }))))))))))\n{\n  storage (pair (address %patient) (pair (address %insurer) (pair (mutez %fee) (pair (int %fee_period) (pair (mutez %deductible) (pair (timestamp %last_fee_date) (pair (bool %patient_confirmed) (pair (bool %insurer_confirmed) (pair (mutez %deductible_debt) (pair (nat %_state) (map %doctor address mutez)))))))))));\n  parameter (or (unit %toRunning) (or (unit %confirm) (or (unit %cancel) (or (address %register_doctor) (or (mutez %declare_consultation) (or (address %pay_doctor) (or (unit %pay_fees) (unit %pay_deductibles))))))));\n  code { NIL operation;\n         DIG 1;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { DROP;\n             SELF;\n             ADDRESS;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             DIG 1;\n             DUP;\n             DUG 2;\n             DUP;\n             PUSH nat 0;\n             COMPARE;\n             EQ;\n             IF\n               { NOW;\n                 DIP { DIG 6; DROP };\n                 DUG 6;\n                 PUSH nat 1;\n                 DIP { DIG 2; DROP };\n                 DUG 2 }\n               { PUSH string "InvalidState";\n                 FAILWITH };\n             DROP;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { DROP;\n                 DIG 10;\n                 DUP;\n                 DUG 11;\n                 SENDER;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { PUSH bool True;\n                     DIP { DIG 4; DROP };\n                     DUG 4 }\n                   {  };\n                 DIG 9;\n                 DUP;\n                 DUG 10;\n                 SENDER;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { PUSH bool True;\n                     DIP { DIG 3; DROP };\n                     DUG 3 }\n                   {  };\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 AND;\n                 IF\n                   { DIG 11;\n                     DUP;\n                     DUG 12;\n                     SELF;\n                     ADDRESS;\n                     CONTRACT %toRunning unit;\n                     IF_NONE\n                       { PUSH string "BadContract";\n                         FAILWITH }\n                       {  };\n                     PUSH mutez 0;\n                     UNIT;\n                     TRANSFER_TOKENS;\n                     CONS;\n                     DIP { DIG 11; DROP };\n                     DUG 11 }\n                   {  };\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { IF_LEFT\n                   { DROP;\n                     DIG 10;\n                     DUP;\n                     DUG 11;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     DIG 10;\n                     DUP;\n                     DUG 11;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     OR;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCaller";\n                         FAILWITH }\n                       {  };\n                     PUSH nat 2;\n                     DIP { DIG 1; DROP };\n                     DUG 1;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR }\n                   { IF_LEFT\n                       { DIG 11;\n                         DUP;\n                         DUG 12;\n                         SENDER;\n                         COMPARE;\n                         EQ;\n                         NOT;\n                         IF\n                           { PUSH string "InvalidCaller";\n                             FAILWITH }\n                           {  };\n                         PUSH nat 1;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         COMPARE;\n                         EQ;\n                         NOT;\n                         IF\n                           { PUSH string "InvalidCondition: r1";\n                             FAILWITH }\n                           {  };\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         MEM;\n                         IF\n                           { PUSH string "KeyAlreadyExists";\n                             FAILWITH }\n                           { DIG 1;\n                             DUP;\n                             DUG 2;\n                             PUSH mutez 0;\n                             SOME;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             UPDATE;\n                             DIP { DIG 1; DROP };\n                             DUG 1 };\n                         DROP;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         DIG 1;\n                         PAIR }\n                       { IF_LEFT\n                           { PUSH nat 1;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             COMPARE;\n                             EQ;\n                             NOT;\n                             IF\n                               { PUSH string "InvalidCondition: r2";\n                                 FAILWITH }\n                               {  };\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             SENDER;\n                             MEM;\n                             NOT;\n                             IF\n                               { PUSH string "InvalidCondition: r3";\n                                 FAILWITH }\n                               {  };\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             SENDER;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             ADD;\n                             SOME;\n                             SENDER;\n                             UPDATE;\n                             DIP { DIG 2; DROP };\n                             DUG 2;\n                             DROP;\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             PAIR;\n                             DUP;\n                             UNPAIR;\n                             COMPARE;\n                             LT;\n                             IF\n                               { CAR }\n                               { CDR };\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             ADD;\n                             DIP { DIG 3; DROP };\n                             DUG 3;\n                             DROP;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             DIG 1;\n                             PAIR }\n                           { IF_LEFT\n                               { DIG 10;\n                                 DUP;\n                                 DUG 11;\n                                 SENDER;\n                                 COMPARE;\n                                 EQ;\n                                 NOT;\n                                 IF\n                                   { PUSH string "InvalidCaller";\n                                     FAILWITH }\n                                   {  };\n                                 PUSH nat 1;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 COMPARE;\n                                 EQ;\n                                 NOT;\n                                 IF\n                                   { PUSH string "InvalidCondition: r4";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 GET;\n                                 IF_NONE\n                                   { PUSH string "GetNoneValue";\n                                     FAILWITH }\n                                   {  };\n                                 AMOUNT;\n                                 PAIR;\n                                 DUP;\n                                 UNPAIR;\n                                 COMPARE;\n                                 LT;\n                                 IF\n                                   { CAR }\n                                   { CDR };\n                                 DIG 13;\n                                 DUP;\n                                 DUG 14;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 CONTRACT unit;\n                                 IF_NONE\n                                   { PUSH string "BadContract";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 UNIT;\n                                 TRANSFER_TOKENS;\n                                 CONS;\n                                 DIP { DIG 13; DROP };\n                                 DUG 13;\n                                 DIG 13;\n                                 DUP;\n                                 DUG 14;\n                                 DIG 12;\n                                 DUP;\n                                 DUG 13;\n                                 CONTRACT unit;\n                                 IF_NONE\n                                   { PUSH string "BadContract";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 AMOUNT;\n                                 SUB;\n                                 UNIT;\n                                 TRANSFER_TOKENS;\n                                 CONS;\n                                 DIP { DIG 13; DROP };\n                                 DUG 13;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 GET;\n                                 IF_NONE\n                                   { PUSH string "GetNoneValue";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 SUB;\n                                 SOME;\n                                 DIG 4;\n                                 DUP;\n                                 DUG 5;\n                                 UPDATE;\n                                 DIP { DIG 3; DROP };\n                                 DUG 3;\n                                 DROP 3;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 DIG 1;\n                                 PAIR }\n                               { IF_LEFT\n                                   { DROP;\n                                     DIG 10;\n                                     DUP;\n                                     DUG 11;\n                                     SENDER;\n                                     COMPARE;\n                                     EQ;\n                                     NOT;\n                                     IF\n                                       { PUSH string "InvalidCaller";\n                                         FAILWITH }\n                                       {  };\n                                     PUSH nat 1;\n                                     DIG 2;\n                                     DUP;\n                                     DUG 3;\n                                     COMPARE;\n                                     EQ;\n                                     NOT;\n                                     IF\n                                       { PUSH string "InvalidCondition: r5";\n                                         FAILWITH }\n                                       {  };\n                                     DIG 7;\n                                     DUP;\n                                     DUG 8;\n                                     DIG 6;\n                                     DUP;\n                                     DUG 7;\n                                     NOW;\n                                     SUB;\n                                     EDIV;\n                                     IF_NONE\n                                       { PUSH string "DivByZero";\n                                         FAILWITH }\n                                       { DUP;\n                                         CAR;\n                                         SWAP;\n                                         DROP };\n                                     DIG 9;\n                                     DUP;\n                                     DUG 10;\n                                     PUSH nat 1;\n                                     DIG 2;\n                                     DUP;\n                                     DUG 3;\n                                     PAIR;\n                                     PAIR;\n                                     UNPAIR;\n                                     UNPAIR;\n                                     ABS;\n                                     DIG 2;\n                                     MUL;\n                                     EDIV;\n                                     IF_NONE\n                                       { PUSH string "DivByZero";\n                                         FAILWITH }\n                                       {  };\n                                     CAR;\n                                     DUP;\n                                     AMOUNT;\n                                     PAIR;\n                                     DUP;\n                                     UNPAIR;\n                                     COMPARE;\n                                     LT;\n                                     IF\n                                       { CAR }\n                                       { CDR };\n                                     DIG 14;\n                                     DUP;\n                                     DUG 15;\n                                     DIG 13;\n                                     DUP;\n                                     DUG 14;\n                                     CONTRACT unit;\n                                     IF_NONE\n                                       { PUSH string "BadContract";\n                                         FAILWITH }\n                                       {  };\n                                     DIG 2;\n                                     DUP;\n                                     DUG 3;\n                                     UNIT;\n                                     TRANSFER_TOKENS;\n                                     CONS;\n                                     DIP { DIG 14; DROP };\n                                     DUG 14;\n                                     DIG 14;\n                                     DUP;\n                                     DUG 15;\n                                     DIG 14;\n                                     DUP;\n                                     DUG 15;\n                                     CONTRACT unit;\n                                     IF_NONE\n                                       { PUSH string "BadContract";\n                                         FAILWITH }\n                                       {  };\n                                     DIG 2;\n                                     DUP;\n                                     DUG 3;\n                                     AMOUNT;\n                                     SUB;\n                                     UNIT;\n                                     TRANSFER_TOKENS;\n                                     CONS;\n                                     DIP { DIG 14; DROP };\n                                     DUG 14;\n                                     DIG 10;\n                                     DUP;\n                                     DUG 11;\n                                     PUSH nat 1;\n                                     DIG 4;\n                                     DUP;\n                                     DUG 5;\n                                     PAIR;\n                                     PAIR;\n                                     UNPAIR;\n                                     UNPAIR;\n                                     DIG 2;\n                                     MUL;\n                                     EDIV;\n                                     IF_NONE\n                                       { PUSH string "DivByZero";\n                                         FAILWITH }\n                                       {  };\n                                     CAR;\n                                     DIG 9;\n                                     DUP;\n                                     DUG 10;\n                                     ADD;\n                                     DIP { DIG 8; DROP };\n                                     DUG 8;\n                                     DROP 3;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     DIG 1;\n                                     PAIR }\n                                   { DROP;\n                                     DIG 10;\n                                     DUP;\n                                     DUG 11;\n                                     SENDER;\n                                     COMPARE;\n                                     EQ;\n                                     NOT;\n                                     IF\n                                       { PUSH string "InvalidCaller";\n                                         FAILWITH }\n                                       {  };\n                                     PUSH nat 1;\n                                     DIG 2;\n                                     DUP;\n                                     DUG 3;\n                                     COMPARE;\n                                     EQ;\n                                     NOT;\n                                     IF\n                                       { PUSH string "InvalidCondition: r6";\n                                         FAILWITH }\n                                       {  };\n                                     DIG 2;\n                                     DUP;\n                                     DUG 3;\n                                     AMOUNT;\n                                     PAIR;\n                                     DUP;\n                                     UNPAIR;\n                                     COMPARE;\n                                     LT;\n                                     IF\n                                       { CAR }\n                                       { CDR };\n                                     DIG 12;\n                                     DUP;\n                                     DUG 13;\n                                     DIG 11;\n                                     DUP;\n                                     DUG 12;\n                                     CONTRACT unit;\n                                     IF_NONE\n                                       { PUSH string "BadContract";\n                                         FAILWITH }\n                                       {  };\n                                     DIG 2;\n                                     DUP;\n                                     DUG 3;\n                                     UNIT;\n                                     TRANSFER_TOKENS;\n                                     CONS;\n                                     DIP { DIG 12; DROP };\n                                     DUG 12;\n                                     DIG 12;\n                                     DUP;\n                                     DUG 13;\n                                     DIG 12;\n                                     DUP;\n                                     DUG 13;\n                                     CONTRACT unit;\n                                     IF_NONE\n                                       { PUSH string "BadContract";\n                                         FAILWITH }\n                                       {  };\n                                     DIG 2;\n                                     DUP;\n                                     DUG 3;\n                                     AMOUNT;\n                                     SUB;\n                                     UNIT;\n                                     TRANSFER_TOKENS;\n                                     CONS;\n                                     DIP { DIG 12; DROP };\n                                     DUG 12;\n                                     DUP;\n                                     DIG 4;\n                                     DUP;\n                                     DUG 5;\n                                     SUB;\n                                     DIP { DIG 3; DROP };\n                                     DUG 3;\n                                     DROP;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     SWAP;\n                                     PAIR;\n                                     DIG 1;\n                                     PAIR } } } } } } } };\n}\n'))),Object(r.b)(l.a,{value:"specification",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-archetype",metastring:'title="healthcare.arl"',title:'"healthcare.arl"'},"specification entry pay_doctor (docid : address) {\n  postcondition p1 {\n    balance = before.balance\n  }\n}\n\nspecification entry pay_fee () {\n  postcondition p2 {\n    balance = before.balance\n  }\n}\n\nspecification entry pay_consulation () {\n  postcondition p3 {\n    balance = before.balance;\n  }\n}\n")))))}P.isMDXComponent=!0},244:function(n,e,t){"use strict";function a(n){var e,t,r="";if("string"==typeof n||"number"==typeof n)r+=n;else if("object"==typeof n)if(Array.isArray(n))for(e=0;e<n.length;e++)n[e]&&(t=a(n[e]))&&(r&&(r+=" "),r+=t);else for(e in n)n[e]&&(r&&(r+=" "),r+=e);return r}e.a=function(){for(var n,e,t=0,r="";t<arguments.length;)(n=arguments[t++])&&(e=a(n))&&(r&&(r+=" "),r+=e);return r}},250:function(n,e,t){"use strict";var a=t(0),r=t(251);e.a=function(){const n=Object(a.useContext)(r.a);if(null==n)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return n}},251:function(n,e,t){"use strict";var a=t(0);const r=Object(a.createContext)(void 0);e.a=r},252:function(n,e,t){"use strict";var a=t(0),r=t.n(a),i=t(250),l=t(244),d=t(57),b=t.n(d);const c=37,o=39;e.a=function(n){const{lazy:e,block:t,defaultValue:d,values:P,groupId:I,className:p}=n,{tabGroupChoices:s,setTabGroupChoices:D}=Object(i.a)(),[u,O]=Object(a.useState)(d),m=a.Children.toArray(n.children),A=[];if(null!=I){const n=s[I];null!=n&&n!==u&&P.some((e=>e.value===n))&&O(n)}const N=n=>{const e=n.target,t=A.indexOf(e),a=m[t].props.value;O(a),null!=I&&(D(I,a),setTimeout((()=>{(function(n){const{top:e,left:t,bottom:a,right:r}=n.getBoundingClientRect(),{innerHeight:i,innerWidth:l}=window;return e>=0&&r<=l&&a<=i&&t>=0})(e)||(e.scrollIntoView({block:"center",behavior:"smooth"}),e.classList.add(b.a.tabItemActive),setTimeout((()=>e.classList.remove(b.a.tabItemActive)),2e3))}),150))},U=n=>{var e;let t;switch(n.keyCode){case o:const e=A.indexOf(n.target)+1;t=A[e]||A[0];break;case c:const a=A.indexOf(n.target)-1;t=A[a]||A[A.length-1]}null===(e=t)||void 0===e||e.focus()};return r.a.createElement("div",{className:"tabs-container"},r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":t},p)},P.map((({value:n,label:e})=>r.a.createElement("li",{role:"tab",tabIndex:u===n?0:-1,"aria-selected":u===n,className:Object(l.a)("tabs__item",b.a.tabItem,{"tabs__item--active":u===n}),key:n,ref:n=>A.push(n),onKeyDown:U,onFocus:N,onClick:N},e)))),e?Object(a.cloneElement)(m.filter((n=>n.props.value===u))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},m.map(((n,e)=>Object(a.cloneElement)(n,{key:e,hidden:n.props.value!==u})))))}},253:function(n,e,t){"use strict";var a=t(0),r=t.n(a);e.a=function({children:n,hidden:e,className:t}){return r.a.createElement("div",{role:"tabpanel",hidden:e,className:t},n)}}}]);