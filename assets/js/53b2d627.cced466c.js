"use strict";(self.webpackChunkcompletium_landing=self.webpackChunkcompletium_landing||[]).push([[9862],{5338:function(n,t,D){D.r(t),D.d(t,{frontMatter:function(){return i},contentTitle:function(){return R},metadata:function(){return N},toc:function(){return l},default:function(){return d}});var e=D(7462),I=D(3366),P=(D(7294),D(3905)),U=D(9960),a=D(6396),A=D(8215),G=D(8820),r=["components"],i={id:"template4",title:"DEX",sidebar_label:"DEX",slug:"/templates/dex"},R=void 0,N={unversionedId:"templates/template4",id:"templates/template4",title:"DEX",description:"Introduction",source:"@site/docs/templates/template4.md",sourceDirName:"templates",slug:"/templates/dex",permalink:"/docs/templates/dex",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template4.md",tags:[],version:"current",frontMatter:{id:"template4",title:"DEX",sidebar_label:"DEX",slug:"/templates/dex"},sidebar:"templates",previous:{title:"Zero-Coupon bond",permalink:"/docs/templates/zcb"},next:{title:"ICO",permalink:"/docs/templates/ico"}},l=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[],level:3},{value:"Entrypoints",id:"entrypoints",children:[],level:3}],level:2},{value:"Code",id:"code",children:[],level:2}],o={toc:l};function d(n){var t=n.components,D=(0,I.Z)(n,r);return(0,P.kt)("wrapper",(0,e.Z)({},o,D,{components:t,mdxType:"MDXLayout"}),(0,P.kt)("h2",{id:"introduction"},"Introduction"),(0,P.kt)("p",null,"This Decentralized Exchange (DEX) presented here is based on the Uniswap-like exchange presented in this ",(0,P.kt)("a",{href:"https://web.stanford.edu/~guillean/papers/uniswap_analysis.pdf",target:"_blank"},"paper"),". The principle is the one of automated market maker (AMM), that is that the exchange rate from token A to token B is computed automatically."),(0,P.kt)("p",null,"To exchange ",(0,P.kt)("em",{parentName:"p"},"qA")," tokens A against ",(0,P.kt)("em",{parentName:"p"},"qB")," tokens B, the DEX establishes a pool of tokens A and a pool of tokens B, from which tokens are withdrawn or credited; if ",(0,P.kt)("em",{parentName:"p"},"pA")," and ",(0,P.kt)("em",{parentName:"p"},"pB")," are the numbers of tokens A and B in the pools, then the quantity ",(0,P.kt)("em",{parentName:"p"},"qB")," of token B received in exchange of a quantity ",(0,P.kt)("em",{parentName:"p"},"qA")," of token A is given by the following formula:"),(0,P.kt)(G.Z.Provider,null,(0,P.kt)(G.Z.Node,{formula:"qB = pB * \\frac{(1-f)*qA}{pA+(1-f)*qA}"})),(0,P.kt)("p",null,"This principle is explained in more details in the ",(0,P.kt)(U.Z,{to:"/docs/dapp-dex",mdxType:"Link"},"DEX DApp")," example."),(0,P.kt)("h2",{id:"api"},"API"),(0,P.kt)("h3",{id:"storage"},"Storage"),(0,P.kt)("table",null,(0,P.kt)("thead",{parentName:"table"},(0,P.kt)("tr",{parentName:"thead"},(0,P.kt)("th",{parentName:"tr",align:null},"Name"),(0,P.kt)("th",{parentName:"tr",align:null},"Type"),(0,P.kt)("th",{parentName:"tr",align:null},"Description"))),(0,P.kt)("tbody",{parentName:"table"},(0,P.kt)("tr",{parentName:"tbody"},(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("inlineCode",{parentName:"td"},"admin")),(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("inlineCode",{parentName:"td"},"address")),(0,P.kt)("td",{parentName:"tr",align:null},"Address that can register and unregister tokens in the DEX.")),(0,P.kt)("tr",{parentName:"tbody"},(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("inlineCode",{parentName:"td"},"token")),(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("inlineCode",{parentName:"td"},"collection")),(0,P.kt)("td",{parentName:"tr",align:null},"Token data: ",(0,P.kt)("ul",null,(0,P.kt)("li",null,"token identifier (key)"),(0,P.kt)("li",null,"FA 1.2 contract address"),(0,P.kt)("li",null,"token name"),(0,P.kt)("li",null,"XTZ value in pool"),(0,P.kt)("li",null,"number of tokens in pool"),(0,P.kt)("li",null,"number of liquidity tokens")))),(0,P.kt)("tr",{parentName:"tbody"},(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("inlineCode",{parentName:"td"},"liquidity")),(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("inlineCode",{parentName:"td"},"collection")),(0,P.kt)("td",{parentName:"tr",align:null},"Number of liquidity tokens per owner and token: ",(0,P.kt)("ul",null,(0,P.kt)("li",null,"token id (key)"),(0,P.kt)("li",null,"owner (key)"),(0,P.kt)("li",null,"number of liquidity tokens")))))),(0,P.kt)("h3",{id:"entrypoints"},"Entrypoints"),(0,P.kt)("table",null,(0,P.kt)("thead",{parentName:"table"},(0,P.kt)("tr",{parentName:"thead"},(0,P.kt)("th",{parentName:"tr",align:null},"Name"),(0,P.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,P.kt)("th",{parentName:"tr",align:null}))),(0,P.kt)("tbody",{parentName:"table"},(0,P.kt)("tr",{parentName:"tbody"},(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("inlineCode",{parentName:"td"},"registertoken")),(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("inlineCode",{parentName:"td"},"i"),", ",(0,P.kt)("inlineCode",{parentName:"td"},"a"),", ",(0,P.kt)("inlineCode",{parentName:"td"},"n")),(0,P.kt)("td",{parentName:"tr",align:null},"Admin adds token ",(0,P.kt)("inlineCode",{parentName:"td"},"{\xa0i; a; n; 0; 0; 0 }")," to DEX.")),(0,P.kt)("tr",{parentName:"tbody"},(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("inlineCode",{parentName:"td"},"deletetoken")),(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("inlineCode",{parentName:"td"},"i")),(0,P.kt)("td",{parentName:"tr",align:null},"Admin removes token ",(0,P.kt)("inlineCode",{parentName:"td"},"i")," from DEX.")),(0,P.kt)("tr",{parentName:"tbody"},(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("inlineCode",{parentName:"td"},"exchange")),(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("inlineCode",{parentName:"td"},"tA"),", ",(0,P.kt)("inlineCode",{parentName:"td"},"qA"),", ",(0,P.kt)("inlineCode",{parentName:"td"},"tB"),", ",(0,P.kt)("inlineCode",{parentName:"td"},"qB")),(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("em",{parentName:"td"},"Caller")," exchanges ",(0,P.kt)("inlineCode",{parentName:"td"},"qA")," tokens ",(0,P.kt)("inlineCode",{parentName:"td"},"tA")," for ",(0,P.kt)("inlineCode",{parentName:"td"},"qB")," tokens ",(0,P.kt)("inlineCode",{parentName:"td"},"tB"),".")),(0,P.kt)("tr",{parentName:"tbody"},(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("inlineCode",{parentName:"td"},"addLiquidity")),(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("inlineCode",{parentName:"td"},"tA"),", ",(0,P.kt)("inlineCode",{parentName:"td"},"qA")),(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("em",{parentName:"td"},"Caller")," provides ",(0,P.kt)("inlineCode",{parentName:"td"},"qA")," tokens ",(0,P.kt)("inlineCode",{parentName:"td"},"tA")," and the corresponding amount of XTZ is transferred.",(0,P.kt)("p",null),"Liquidity tokens are minted and affected to  ",(0,P.kt)("em",{parentName:"td"},"caller")," so that it reflects the proportion of ",(0,P.kt)("em",{parentName:"td"},"transferred")," XTZ towards the XTZ pool.")),(0,P.kt)("tr",{parentName:"tbody"},(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("inlineCode",{parentName:"td"},"removeLiquidity")),(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("inlineCode",{parentName:"td"},"tA"),", ",(0,P.kt)("inlineCode",{parentName:"td"},"qL")),(0,P.kt)("td",{parentName:"tr",align:null},(0,P.kt)("em",{parentName:"td"},"Caller")," redeems ",(0,P.kt)("inlineCode",{parentName:"td"},"qL")," liquidity token for token ",(0,P.kt)("inlineCode",{parentName:"td"},"tA"),"; 2 transactions are generated : ",(0,P.kt)("ul",null,(0,P.kt)("li",null,"transfer of XTZ in proportion of the token XTZ pool"),(0,P.kt)("li",null,"transfer of ",(0,P.kt)("inlineCode",{parentName:"td"},"tA")," tokens in proportion of the token pool")))))),(0,P.kt)("h2",{id:"code"},"Code"),(0,P.kt)(a.Z,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"}],mdxType:"Tabs"},(0,P.kt)(A.Z,{value:"archetype",mdxType:"TabItem"},(0,P.kt)("pre",null,(0,P.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="dex.arl"',title:'"dex.arl"'},'archetype dex(admin : address, initialminted : nat)\n\nconstant fee     : rational = 0.003\nconstant epsilon : nat      = 1\n\nasset token {\n  id        : string ;\n  addr      : address;\n  name      : string ;\n  xtzpool   : nat = 0;\n  tokpool   : nat = 0;\n  liqpool   : nat = 0;\n}\n\nasset liquidity identified by tokenid owner {\n  tokenid  : string ;\n  owner    : address;\n  liqt     : nat = 0;\n}\n\nentry registertoken (i : string, a : address, n : string) {\n  called by admin\n  failif { f1: i = "XTZ" }\n  effect { token.addupdate(i, { addr = a; name = n }); }\n}\n\nentry deletetoken (i : string) {\n  called by admin\n  effect { token.remove(i) }\n}\n\nfunction compute_qB(qA : nat, pA : nat, pB : nat) : rational {\n  var feeqA = (1 - fee) * qA;\n  return (pB * feeqA / (pA + feeqA))\n}\n\nentry exchange(tA : string, qA : nat, tB : string, qB : nat) {\n  require {\n    r0 otherwise "SRC_EQ_DST" : tA <> tB;\n  }\n  effect {\n    (* DEX receives *)\n    if tA = "XTZ" then begin\n      var pA = token[tB].xtzpool;\n      var pB = token[tB].tokpool;\n      var expected_qB = compute_qB(qA, pA, pB);\n      dorequire(abs(expected_qB - qB) <= epsilon, ("INVALID_B_AMOUNT", expected_qB));\n      var xtzin : nat = transferred;\n      dorequire(qA = xtzin, ("INVALID_A_AMOUNT", xtzin));\n      transfer 0tz to token[tB].addr\n        call %transfer<address * address * nat>((selfaddress, caller, qB));\n      token.update(tB, { xtzpool += xtzin; tokpool -= qB });\n    end else if tB = "XTZ" then begin\n      var pA = token[tA].tokpool;\n      var pB = token[tA].xtzpool;\n      var expected_qB = compute_qB(qA, pA, pB);\n      dorequire(abs(expected_qB - qB) <= epsilon, ("INVALID_B_AMOUNT", expected_qB));\n      transfer 0tz to token[tA].addr\n        call %transfer<address * address * nat>((caller, selfaddress, qA));\n      transfer (qB * 1utz) to caller;\n      token.update(tA, { xtzpool -= qB; tokpool += qA });\n    end else begin\n      var pA      = token[tA].tokpool;\n      var pXTZA   = token[tA].xtzpool;\n      var qXTZ    = abs(floor(compute_qB(qA, pA, pXTZA)));\n      var pXTZB   = token[tB].xtzpool;\n      var pB      = token[tB].tokpool;\n      var expected_qB = compute_qB(qXTZ, pXTZB, pB);\n      dorequire(abs(expected_qB - qB) <= epsilon, ("INVALID_B_AMOUNT", expected_qB));\n      transfer 0tz to token[tA].addr\n        call %transfer<address * address * nat>((caller, selfaddress, qA));\n      transfer 0tz to token[tB].addr\n        call %transfer<address * address * nat>((selfaddress, caller, qB));\n      token.update(tA, { xtzpool -= qXTZ; tokpool += qA });\n      token.update(tB, { xtzpool += qXTZ; tokpool -= qB });\n    end\n  }\n}\n\nentry addLiquidity(tA : string, qA : nat) {\n  (* transfer qA tokens tA to dex contract *)\n  transfer 0tz to token[tA].addr\n    call %transfer<address * address * nat>((caller, selfaddress, qA));\n  var xtzin : nat = transferred;\n  (* does qA tokens exchange for xtzin XTZ ? *)\n  var pA = token[tA].tokpool;\n  var pB = token[tA].xtzpool;\n  var expected_qB = compute_qB(qA, pA, pB);\n  dorequire(abs(expected_qB - xtzin) <= epsilon, ("INVALID_B_AMOUNT", expected_qB));\n  var mintedLiqT =\n    if token[tA].tokpool = 0\n    then initialminted\n    else abs(floor(token[tA].liqpool * xtzin / token[tA].xtzpool));\n  liquidity.addupdate((tA, caller), { liqt += mintedLiqT });\n  token.update(tA, { xtzpool += xtzin; tokpool += qA; liqpool += mintedLiqT })\n}\n\nentry removeLiquidity(tA : string, qL : nat) {\n  require {\n    r1 otherwise "NOT_ENOUGHT_LQT": qL <= liquidity[(tA, caller)].liqt\n  }\n  effect {\n    var liqratio = qL / token[tA].liqpool;\n    var xtzout = abs(floor(liqratio * token[tA].xtzpool));\n    transfer (xtzout * 1utz) to caller;\n    var qA = abs(floor(liqratio * token[tA].tokpool));\n    transfer 0tz to token[tA].addr\n      call %transfer<address * address * nat>((selfaddress, caller, qA));\n    liquidity.addupdate((tA, caller), { liqt -= qL });\n    token.update(tA, { xtzpool -= xtzout; tokpool -= qA; liqpool -= qL })\n  }\n}\n'))),(0,P.kt)(A.Z,{value:"michelson",mdxType:"TabItem"},(0,P.kt)("pre",null,(0,P.kt)("code",{parentName:"pre",className:"language-js"},'# (Pair admin (Pair initialminted (Pair {  } {  })))\n{\n  storage (pair (address %admin) (pair (nat %initialminted) (pair (map %token string (pair (address %addr) (pair (string %name) (pair (nat %xtzpool) (pair (nat %tokpool) (nat %liqpool)))))) (map %liquidity (pair string address) nat))));\n  parameter (or (pair %registertoken (string %i) (pair (address %a) (string %n))) (or (string %deletetoken) (or (pair %exchange (string %tA) (pair (nat %qA) (pair (string %tB) (nat %qB)))) (or (pair %addLiquidity (string %tA) (nat %qA)) (pair %removeLiquidity (string %tA) (nat %qL))))));\n  code { LAMBDA\n           (pair (pair (pair int nat) (pair int nat)) (or unit (or (or unit unit) (or unit unit))))\n           bool\n           { UNPAIR;\n             UNPAIR;\n             DIP { UNPAIR };\n             UNPAIR;\n             DUG 3;\n             MUL;\n             DIP { MUL };\n             SWAP;\n             COMPARE;\n             SWAP;\n             IF_LEFT\n               { DROP;\n                 EQ }\n               { IF_LEFT\n                   { IF_LEFT\n                       { DROP;\n                         LT }\n                       { DROP;\n                         LE } }\n                   { IF_LEFT\n                       { DROP;\n                         GT }\n                       { DROP;\n                         GE } } } };\n         LAMBDA\n           (pair (pair int nat) (pair nat (pair nat nat)))\n           (pair int nat)\n           { UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             PUSH unit Unit;\n             PUSH nat 1;\n             DIG 4;\n             DUP;\n             DUG 5;\n             INT;\n             PAIR;\n             UNIT;\n             RIGHT unit;\n             PUSH nat 1000;\n             PUSH int 3;\n             PAIR;\n             PUSH nat 1;\n             PUSH nat 1;\n             INT;\n             PAIR;\n             PAIR;\n             PAIR;\n             UNPAIR;\n             UNPAIR;\n             DIP { UNPAIR; SWAP; DUP };\n             UNPAIR;\n             SWAP;\n             DUP;\n             DIG 3;\n             MUL;\n             DUG 4;\n             DIG 3;\n             MUL;\n             DIP { MUL };\n             DIG 3;\n             IF_LEFT\n               { DROP;\n                 ADD }\n               { DROP;\n                 SWAP;\n                 SUB };\n             PAIR;\n             PAIR;\n             UNPAIR;\n             DIP { UNPAIR };\n             UNPAIR;\n             DIP { SWAP };\n             MUL;\n             DIP { MUL };\n             PAIR;\n             UNIT;\n             LEFT unit;\n             DIG 1;\n             DUP;\n             DUG 2;\n             PUSH nat 1;\n             DIG 6;\n             DUP;\n             DUG 7;\n             INT;\n             PAIR;\n             PAIR;\n             PAIR;\n             UNPAIR;\n             UNPAIR;\n             DIP { UNPAIR; SWAP; DUP };\n             UNPAIR;\n             SWAP;\n             DUP;\n             DIG 3;\n             MUL;\n             DUG 4;\n             DIG 3;\n             MUL;\n             DIP { MUL };\n             DIG 3;\n             IF_LEFT\n               { DROP;\n                 ADD }\n               { DROP;\n                 SWAP;\n                 SUB };\n             PAIR;\n             DIG 1;\n             DUP;\n             DUG 2;\n             PUSH nat 1;\n             DIG 5;\n             DUP;\n             DUG 6;\n             INT;\n             PAIR;\n             PAIR;\n             UNPAIR;\n             DIP { UNPAIR };\n             UNPAIR;\n             DIP { SWAP };\n             MUL;\n             DIP { MUL };\n             PAIR;\n             PAIR;\n             UNPAIR;\n             DIP { UNPAIR };\n             UNPAIR;\n             DIG 3;\n             PUSH int 0;\n             DIG 4;\n             DUP;\n             DUG 5;\n             COMPARE;\n             GE;\n             IF\n               { INT }\n               { NEG };\n             MUL;\n             DIP { MUL; ABS };\n             PAIR;\n             DIP { DIG 1; DROP };\n             DUG 1;\n             DROP;\n             DUG 4;\n             DROP 4 };\n         NIL operation;\n         DIG 3;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             DIG 6;\n             DUP;\n             DUG 7;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             PUSH string "XTZ";\n             DIG 3;\n             DUP;\n             DUG 4;\n             COMPARE;\n             EQ;\n             IF\n               { PUSH string "InvalidCondition: f1";\n                 FAILWITH }\n               {  };\n             DIG 4;\n             DUP;\n             DUG 5;\n             PUSH nat 0;\n             PUSH nat 0;\n             PAIR;\n             PUSH nat 0;\n             PAIR;\n             DIG 2;\n             DUP;\n             DUG 3;\n             PAIR;\n             DIG 3;\n             DUP;\n             DUG 4;\n             PAIR;\n             SOME;\n             DIG 4;\n             DUP;\n             DUG 5;\n             UPDATE;\n             DIP { DIG 4; DROP };\n             DUG 4;\n             DROP 3;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { DIG 4;\n                 DUP;\n                 DUG 5;\n                 SENDER;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCaller";\n                     FAILWITH }\n                   {  };\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 NONE (pair address (pair string (pair nat (pair nat nat))));\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 UPDATE;\n                 DIP { DIG 2; DROP };\n                 DUG 2;\n                 DROP;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { IF_LEFT\n                   { UNPAIR;\n                     SWAP;\n                     UNPAIR;\n                     SWAP;\n                     UNPAIR;\n                     SWAP;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     COMPARE;\n                     NEQ;\n                     NOT;\n                     IF\n                       { PUSH string "SRC_EQ_DST";\n                         FAILWITH }\n                       {  };\n                     PUSH string "XTZ";\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { DIG 5;\n                         DUP;\n                         DUG 6;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CAR;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CDR;\n                         CAR;\n                         DIG 11;\n                         DUP;\n                         DUG 12;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         PAIR;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         PAIR;\n                         PUSH nat 1000;\n                         PUSH int 3;\n                         PAIR;\n                         PAIR;\n                         EXEC;\n                         DIG 13;\n                         DUP;\n                         DUG 14;\n                         UNIT;\n                         RIGHT unit;\n                         LEFT (or unit unit);\n                         RIGHT unit;\n                         PUSH nat 1;\n                         PUSH nat 1;\n                         INT;\n                         PAIR;\n                         UNIT;\n                         RIGHT unit;\n                         PUSH nat 1;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         INT;\n                         PAIR;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         DIP { UNPAIR; SWAP; DUP };\n                         UNPAIR;\n                         SWAP;\n                         DUP;\n                         DIG 3;\n                         MUL;\n                         DUG 4;\n                         DIG 3;\n                         MUL;\n                         DIP { MUL };\n                         DIG 3;\n                         IF_LEFT\n                           { DROP;\n                             ADD }\n                           { DROP;\n                             SWAP;\n                             SUB };\n                         PAIR;\n                         UNPAIR;\n                         ABS;\n                         INT;\n                         PAIR;\n                         PAIR;\n                         PAIR;\n                         EXEC;\n                         NOT;\n                         IF\n                           { DUP;\n                             PUSH string "INVALID_B_AMOUNT";\n                             PAIR;\n                             FAILWITH }\n                           {  };\n                         PUSH mutez 1;\n                         AMOUNT;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           { DUP;\n                             CAR;\n                             SWAP;\n                             DROP };\n                         DUP;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         COMPARE;\n                         EQ;\n                         NOT;\n                         IF\n                           { DUP;\n                             PUSH string "INVALID_A_AMOUNT";\n                             PAIR;\n                             FAILWITH }\n                           {  };\n                         DIG 12;\n                         DUP;\n                         DUG 13;\n                         DIG 10;\n                         DUP;\n                         DUG 11;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         CONTRACT %transfer (pair address (pair address nat));\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         PUSH mutez 0;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         SENDER;\n                         PAIR;\n                         SELF;\n                         ADDRESS;\n                         PAIR;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 12; DROP };\n                         DUG 12;\n                         DIG 9;\n                         DUP;\n                         DUG 10;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         DIG 10;\n                         DUP;\n                         DUG 11;\n                         DIG 11;\n                         DUP;\n                         DUG 12;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         UNPAIR;\n                         SWAP;\n                         UNPAIR;\n                         SWAP;\n                         UNPAIR;\n                         DROP;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         CDR;\n                         CDR;\n                         CAR;\n                         ADD;\n                         SWAP;\n                         UNPAIR;\n                         DROP;\n                         PUSH int 0;\n                         DIG 11;\n                         DUP;\n                         DUG 12;\n                         INT;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         CDR;\n                         CDR;\n                         CDR;\n                         CAR;\n                         SUB;\n                         COMPARE;\n                         GE;\n                         IF\n                           { DIG 10;\n                             DUP;\n                             DUG 11;\n                             INT;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             CDR;\n                             CDR;\n                             CDR;\n                             CAR;\n                             SUB;\n                             ABS }\n                           { PUSH string "AssignNat";\n                             FAILWITH };\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SOME;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         UPDATE;\n                         DIP { DIG 10; DROP };\n                         DUG 10;\n                         DROP 5 }\n                       { PUSH string "XTZ";\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         COMPARE;\n                         EQ;\n                         IF\n                           { DIG 5;\n                             DUP;\n                             DUG 6;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CDR;\n                             CDR;\n                             CDR;\n                             CAR;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CDR;\n                             CDR;\n                             CAR;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             PAIR;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             PAIR;\n                             PUSH nat 1000;\n                             PUSH int 3;\n                             PAIR;\n                             PAIR;\n                             EXEC;\n                             DIG 13;\n                             DUP;\n                             DUG 14;\n                             UNIT;\n                             RIGHT unit;\n                             LEFT (or unit unit);\n                             RIGHT unit;\n                             PUSH nat 1;\n                             PUSH nat 1;\n                             INT;\n                             PAIR;\n                             UNIT;\n                             RIGHT unit;\n                             PUSH nat 1;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             INT;\n                             PAIR;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             PAIR;\n                             PAIR;\n                             UNPAIR;\n                             UNPAIR;\n                             DIP { UNPAIR; SWAP; DUP };\n                             UNPAIR;\n                             SWAP;\n                             DUP;\n                             DIG 3;\n                             MUL;\n                             DUG 4;\n                             DIG 3;\n                             MUL;\n                             DIP { MUL };\n                             DIG 3;\n                             IF_LEFT\n                               { DROP;\n                                 ADD }\n                               { DROP;\n                                 SWAP;\n                                 SUB };\n                             PAIR;\n                             UNPAIR;\n                             ABS;\n                             INT;\n                             PAIR;\n                             PAIR;\n                             PAIR;\n                             EXEC;\n                             NOT;\n                             IF\n                               { DUP;\n                                 PUSH string "INVALID_B_AMOUNT";\n                                 PAIR;\n                                 FAILWITH }\n                               {  };\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CAR;\n                             CONTRACT %transfer (pair address (pair address nat));\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             PUSH mutez 0;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             SELF;\n                             ADDRESS;\n                             PAIR;\n                             SENDER;\n                             PAIR;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 11; DROP };\n                             DUG 11;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             SENDER;\n                             CONTRACT unit;\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             PUSH mutez 1;\n                             PUSH nat 1;\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             INT;\n                             PAIR;\n                             PAIR;\n                             UNPAIR;\n                             UNPAIR;\n                             ABS;\n                             DIG 2;\n                             MUL;\n                             EDIV;\n                             IF_NONE\n                               { PUSH string "DivByZero";\n                                 FAILWITH }\n                               {  };\n                             CAR;\n                             UNIT;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 11; DROP };\n                             DUG 11;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             UNPAIR;\n                             SWAP;\n                             UNPAIR;\n                             SWAP;\n                             UNPAIR;\n                             DROP;\n                             PUSH int 0;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             INT;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             CDR;\n                             CDR;\n                             CAR;\n                             SUB;\n                             COMPARE;\n                             GE;\n                             IF\n                               { DIG 8;\n                                 DUP;\n                                 DUG 9;\n                                 INT;\n                                 DIG 5;\n                                 DUP;\n                                 DUG 6;\n                                 CDR;\n                                 CDR;\n                                 CAR;\n                                 SUB;\n                                 ABS }\n                               { PUSH string "AssignNat";\n                                 FAILWITH };\n                             SWAP;\n                             UNPAIR;\n                             DROP;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             CDR;\n                             CDR;\n                             CDR;\n                             CAR;\n                             ADD;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SOME;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             UPDATE;\n                             DIP { DIG 9; DROP };\n                             DUG 9;\n                             DROP 4 }\n                           { DIG 5;\n                             DUP;\n                             DUG 6;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CDR;\n                             CDR;\n                             CDR;\n                             CAR;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CDR;\n                             CDR;\n                             CAR;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             PAIR;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             PAIR;\n                             PUSH nat 1000;\n                             PUSH int 3;\n                             PAIR;\n                             PAIR;\n                             EXEC;\n                             UNPAIR;\n                             EDIV;\n                             IF_NONE\n                               { PUSH string "DivByZero";\n                                 FAILWITH }\n                               { CAR };\n                             ABS;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CDR;\n                             CDR;\n                             CAR;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CDR;\n                             CDR;\n                             CDR;\n                             CAR;\n                             DIG 14;\n                             DUP;\n                             DUG 15;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             PAIR;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             PAIR;\n                             PUSH nat 1000;\n                             PUSH int 3;\n                             PAIR;\n                             PAIR;\n                             EXEC;\n                             DIG 16;\n                             DUP;\n                             DUG 17;\n                             UNIT;\n                             RIGHT unit;\n                             LEFT (or unit unit);\n                             RIGHT unit;\n                             PUSH nat 1;\n                             PUSH nat 1;\n                             INT;\n                             PAIR;\n                             UNIT;\n                             RIGHT unit;\n                             PUSH nat 1;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             INT;\n                             PAIR;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             PAIR;\n                             PAIR;\n                             UNPAIR;\n                             UNPAIR;\n                             DIP { UNPAIR; SWAP; DUP };\n                             UNPAIR;\n                             SWAP;\n                             DUP;\n                             DIG 3;\n                             MUL;\n                             DUG 4;\n                             DIG 3;\n                             MUL;\n                             DIP { MUL };\n                             DIG 3;\n                             IF_LEFT\n                               { DROP;\n                                 ADD }\n                               { DROP;\n                                 SWAP;\n                                 SUB };\n                             PAIR;\n                             UNPAIR;\n                             ABS;\n                             INT;\n                             PAIR;\n                             PAIR;\n                             PAIR;\n                             EXEC;\n                             NOT;\n                             IF\n                               { DUP;\n                                 PUSH string "INVALID_B_AMOUNT";\n                                 PAIR;\n                                 FAILWITH }\n                               {  };\n                             DIG 14;\n                             DUP;\n                             DUG 15;\n                             DIG 12;\n                             DUP;\n                             DUG 13;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CAR;\n                             CONTRACT %transfer (pair address (pair address nat));\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             PUSH mutez 0;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             SELF;\n                             ADDRESS;\n                             PAIR;\n                             SENDER;\n                             PAIR;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 14; DROP };\n                             DUG 14;\n                             DIG 14;\n                             DUP;\n                             DUG 15;\n                             DIG 12;\n                             DUP;\n                             DUG 13;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CAR;\n                             CONTRACT %transfer (pair address (pair address nat));\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             PUSH mutez 0;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             SENDER;\n                             PAIR;\n                             SELF;\n                             ADDRESS;\n                             PAIR;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 14; DROP };\n                             DUG 14;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 12;\n                             DUP;\n                             DUG 13;\n                             DIG 13;\n                             DUP;\n                             DUG 14;\n                             DIG 12;\n                             DUP;\n                             DUG 13;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             UNPAIR;\n                             SWAP;\n                             UNPAIR;\n                             SWAP;\n                             UNPAIR;\n                             DROP;\n                             PUSH int 0;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             INT;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             CDR;\n                             CDR;\n                             CAR;\n                             SUB;\n                             COMPARE;\n                             GE;\n                             IF\n                               { DIG 8;\n                                 DUP;\n                                 DUG 9;\n                                 INT;\n                                 DIG 5;\n                                 DUP;\n                                 DUG 6;\n                                 CDR;\n                                 CDR;\n                                 CAR;\n                                 SUB;\n                                 ABS }\n                               { PUSH string "AssignNat";\n                                 FAILWITH };\n                             SWAP;\n                             UNPAIR;\n                             DROP;\n                             DIG 14;\n                             DUP;\n                             DUG 15;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             CDR;\n                             CDR;\n                             CDR;\n                             CAR;\n                             ADD;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SOME;\n                             DIG 12;\n                             DUP;\n                             DUG 13;\n                             UPDATE;\n                             DIP { DIG 12; DROP };\n                             DUG 12;\n                             DROP;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 12;\n                             DUP;\n                             DUG 13;\n                             DIG 13;\n                             DUP;\n                             DUG 14;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             UNPAIR;\n                             SWAP;\n                             UNPAIR;\n                             SWAP;\n                             UNPAIR;\n                             DROP;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             CDR;\n                             CDR;\n                             CAR;\n                             ADD;\n                             SWAP;\n                             UNPAIR;\n                             DROP;\n                             PUSH int 0;\n                             DIG 13;\n                             DUP;\n                             DUG 14;\n                             INT;\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             CDR;\n                             CDR;\n                             CDR;\n                             CAR;\n                             SUB;\n                             COMPARE;\n                             GE;\n                             IF\n                               { DIG 12;\n                                 DUP;\n                                 DUG 13;\n                                 INT;\n                                 DIG 6;\n                                 DUP;\n                                 DUG 7;\n                                 CDR;\n                                 CDR;\n                                 CDR;\n                                 CAR;\n                                 SUB;\n                                 ABS }\n                               { PUSH string "AssignNat";\n                                 FAILWITH };\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SOME;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             UPDATE;\n                             DIP { DIG 12; DROP };\n                             DUG 12;\n                             DROP 7 } };\n                     DROP 4;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR }\n                   { IF_LEFT\n                       { UNPAIR;\n                         SWAP;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         CONTRACT %transfer (pair address (pair address nat));\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         PUSH mutez 0;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         SELF;\n                         ADDRESS;\n                         PAIR;\n                         SENDER;\n                         PAIR;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 6; DROP };\n                         DUG 6;\n                         PUSH mutez 1;\n                         AMOUNT;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           { DUP;\n                             CAR;\n                             SWAP;\n                             DROP };\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CDR;\n                         CAR;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CAR;\n                         DIG 10;\n                         DUP;\n                         DUG 11;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         PAIR;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         PAIR;\n                         PUSH nat 1000;\n                         PUSH int 3;\n                         PAIR;\n                         PAIR;\n                         EXEC;\n                         DIG 12;\n                         DUP;\n                         DUG 13;\n                         UNIT;\n                         RIGHT unit;\n                         LEFT (or unit unit);\n                         RIGHT unit;\n                         PUSH nat 1;\n                         PUSH nat 1;\n                         INT;\n                         PAIR;\n                         UNIT;\n                         RIGHT unit;\n                         PUSH nat 1;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         INT;\n                         PAIR;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         DIP { UNPAIR; SWAP; DUP };\n                         UNPAIR;\n                         SWAP;\n                         DUP;\n                         DIG 3;\n                         MUL;\n                         DUG 4;\n                         DIG 3;\n                         MUL;\n                         DIP { MUL };\n                         DIG 3;\n                         IF_LEFT\n                           { DROP;\n                             ADD }\n                           { DROP;\n                             SWAP;\n                             SUB };\n                         PAIR;\n                         UNPAIR;\n                         ABS;\n                         INT;\n                         PAIR;\n                         PAIR;\n                         PAIR;\n                         EXEC;\n                         NOT;\n                         IF\n                           { DUP;\n                             PUSH string "INVALID_B_AMOUNT";\n                             PAIR;\n                             FAILWITH }\n                           {  };\n                         PUSH nat 0;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CDR;\n                         CAR;\n                         COMPARE;\n                         EQ;\n                         IF\n                           { DIG 8;\n                             DUP;\n                             DUG 9 }\n                           { PUSH nat 1;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CDR;\n                             CDR;\n                             CAR;\n                             INT;\n                             PAIR;\n                             PUSH nat 1;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CDR;\n                             CDR;\n                             CDR;\n                             CDR;\n                             MUL;\n                             INT;\n                             PAIR;\n                             PAIR;\n                             UNPAIR;\n                             DIP { UNPAIR };\n                             UNPAIR;\n                             DIG 3;\n                             PUSH int 0;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             COMPARE;\n                             GE;\n                             IF\n                               { INT }\n                               { NEG };\n                             MUL;\n                             DIP { MUL; ABS };\n                             PAIR;\n                             UNPAIR;\n                             EDIV;\n                             IF_NONE\n                               { PUSH string "DivByZero";\n                                 FAILWITH }\n                               { CAR };\n                             ABS };\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         SENDER;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         PAIR;\n                         MEM;\n                         IF\n                           { DIG 7;\n                             DUP;\n                             DUG 8;\n                             SENDER;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             PAIR;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             ADD;\n                             SOME;\n                             SENDER;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             PAIR;\n                             UPDATE;\n                             DIP { DIG 8; DROP };\n                             DUG 8;\n                             DROP }\n                           { DIG 7;\n                             DUP;\n                             DUG 8;\n                             SENDER;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             PAIR;\n                             MEM;\n                             IF\n                               { PUSH string "KeyAlreadyExists";\n                                 FAILWITH }\n                               { DIG 7;\n                                 DUP;\n                                 DUG 8;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 PUSH nat 0;\n                                 ADD;\n                                 SOME;\n                                 SENDER;\n                                 DIG 9;\n                                 DUP;\n                                 DUG 10;\n                                 PAIR;\n                                 UPDATE;\n                                 DIP { DIG 7; DROP };\n                                 DUG 7 } };\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         DIG 9;\n                         DUP;\n                         DUG 10;\n                         DIG 10;\n                         DUP;\n                         DUG 11;\n                         DIG 9;\n                         DUP;\n                         DUG 10;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         UNPAIR;\n                         SWAP;\n                         UNPAIR;\n                         SWAP;\n                         UNPAIR;\n                         DROP;\n                         DIG 9;\n                         DUP;\n                         DUG 10;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         CDR;\n                         CDR;\n                         CAR;\n                         ADD;\n                         SWAP;\n                         UNPAIR;\n                         DROP;\n                         DIG 11;\n                         DUP;\n                         DUG 12;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         CDR;\n                         CDR;\n                         CDR;\n                         CAR;\n                         ADD;\n                         SWAP;\n                         DROP;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         CDR;\n                         CDR;\n                         CDR;\n                         CDR;\n                         ADD;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SOME;\n                         DIG 9;\n                         DUP;\n                         DUG 10;\n                         UPDATE;\n                         DIP { DIG 9; DROP };\n                         DUG 9;\n                         DROP 8;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         DIG 1;\n                         PAIR }\n                       { UNPAIR;\n                         SWAP;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         SENDER;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         PAIR;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         COMPARE;\n                         LE;\n                         NOT;\n                         IF\n                           { PUSH string "NOT_ENOUGHT_LQT";\n                             FAILWITH }\n                           {  };\n                         PUSH nat 1;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CDR;\n                         CDR;\n                         INT;\n                         PAIR;\n                         PUSH nat 1;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         INT;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         DIP { UNPAIR };\n                         UNPAIR;\n                         DIG 3;\n                         PUSH int 0;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         COMPARE;\n                         GE;\n                         IF\n                           { INT }\n                           { NEG };\n                         MUL;\n                         DIP { MUL; ABS };\n                         PAIR;\n                         PUSH nat 1;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CAR;\n                         INT;\n                         PAIR;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         PAIR;\n                         UNPAIR;\n                         DIP { UNPAIR };\n                         UNPAIR;\n                         DIP { SWAP };\n                         MUL;\n                         DIP { MUL };\n                         PAIR;\n                         UNPAIR;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           { CAR };\n                         ABS;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         SENDER;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         PUSH mutez 1;\n                         PUSH nat 1;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         INT;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 8; DROP };\n                         DUG 8;\n                         PUSH nat 1;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CDR;\n                         CAR;\n                         INT;\n                         PAIR;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         PAIR;\n                         UNPAIR;\n                         DIP { UNPAIR };\n                         UNPAIR;\n                         DIP { SWAP };\n                         MUL;\n                         DIP { MUL };\n                         PAIR;\n                         UNPAIR;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           { CAR };\n                         ABS;\n                         DIG 9;\n                         DUP;\n                         DUG 10;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         CONTRACT %transfer (pair address (pair address nat));\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         PUSH mutez 0;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         SENDER;\n                         PAIR;\n                         SELF;\n                         ADDRESS;\n                         PAIR;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 9; DROP };\n                         DUG 9;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         SENDER;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         PAIR;\n                         MEM;\n                         IF\n                           { DIG 5;\n                             DUP;\n                             DUG 6;\n                             SENDER;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             PAIR;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             PUSH int 0;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             INT;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             SUB;\n                             COMPARE;\n                             GE;\n                             IF\n                               { DIG 5;\n                                 DUP;\n                                 DUG 6;\n                                 INT;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 SUB;\n                                 ABS }\n                               { PUSH string "AssignNat";\n                                 FAILWITH };\n                             SOME;\n                             SENDER;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             PAIR;\n                             UPDATE;\n                             DIP { DIG 6; DROP };\n                             DUG 6;\n                             DROP }\n                           { DIG 5;\n                             DUP;\n                             DUG 6;\n                             SENDER;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             PAIR;\n                             MEM;\n                             IF\n                               { PUSH string "KeyAlreadyExists";\n                                 FAILWITH }\n                               { DIG 5;\n                                 DUP;\n                                 DUG 6;\n                                 PUSH int 0;\n                                 DIG 5;\n                                 DUP;\n                                 DUG 6;\n                                 INT;\n                                 PUSH nat 0;\n                                 SUB;\n                                 COMPARE;\n                                 GE;\n                                 IF\n                                   { DIG 4;\n                                     DUP;\n                                     DUG 5;\n                                     INT;\n                                     PUSH nat 0;\n                                     SUB;\n                                     ABS }\n                                   { PUSH string "AssignNat";\n                                     FAILWITH };\n                                 SOME;\n                                 SENDER;\n                                 DIG 7;\n                                 DUP;\n                                 DUG 8;\n                                 PAIR;\n                                 UPDATE;\n                                 DIP { DIG 5; DROP };\n                                 DUG 5 } };\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         UNPAIR;\n                         SWAP;\n                         UNPAIR;\n                         SWAP;\n                         UNPAIR;\n                         DROP;\n                         PUSH int 0;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         INT;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         CDR;\n                         CDR;\n                         CAR;\n                         SUB;\n                         COMPARE;\n                         GE;\n                         IF\n                           { DIG 6;\n                             DUP;\n                             DUG 7;\n                             INT;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             CDR;\n                             CDR;\n                             CAR;\n                             SUB;\n                             ABS }\n                           { PUSH string "AssignNat";\n                             FAILWITH };\n                         SWAP;\n                         UNPAIR;\n                         DROP;\n                         PUSH int 0;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         INT;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         CDR;\n                         CDR;\n                         CDR;\n                         CAR;\n                         SUB;\n                         COMPARE;\n                         GE;\n                         IF\n                           { DIG 6;\n                             DUP;\n                             DUG 7;\n                             INT;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             CDR;\n                             CDR;\n                             CDR;\n                             CAR;\n                             SUB;\n                             ABS }\n                           { PUSH string "AssignNat";\n                             FAILWITH };\n                         SWAP;\n                         DROP;\n                         PUSH int 0;\n                         DIG 10;\n                         DUP;\n                         DUG 11;\n                         INT;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         CDR;\n                         CDR;\n                         CDR;\n                         CDR;\n                         SUB;\n                         COMPARE;\n                         GE;\n                         IF\n                           { DIG 9;\n                             DUP;\n                             DUG 10;\n                             INT;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             CDR;\n                             CDR;\n                             CDR;\n                             CDR;\n                             SUB;\n                             ABS }\n                           { PUSH string "AssignNat";\n                             FAILWITH };\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SOME;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         UPDATE;\n                         DIP { DIG 7; DROP };\n                         DUG 7;\n                         DROP 6;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         DIG 1;\n                         PAIR } } } };\n         DIP { DROP 2 } };\n}\n')))))}d.isMDXComponent=!0}}]);