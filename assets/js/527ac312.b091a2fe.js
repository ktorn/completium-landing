(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{128:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return c})),t.d(e,"metadata",(function(){return d})),t.d(e,"toc",(function(){return b})),t.d(e,"default",(function(){return D}));var a=t(3),r=(t(0),t(238)),l=t(239),i=t(252),o=t(253);const c={id:"template2",title:"ERC20",sidebar_label:"ERC20",slug:"/templates/erc20"},d={unversionedId:"templates/template2",id:"templates/template2",isDocsHomePage:!1,title:"ERC20",description:"Introduction",source:"@site/docs/templates/template2.md",slug:"/templates/erc20",permalink:"/docs/templates/erc20",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template2.md",version:"current",sidebar_label:"ERC20",sidebar:"templates",previous:{title:"FA 1.2",permalink:"/docs/templates/fa12"},next:{title:"FA 2",permalink:"/docs/templates/nft"}},b=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Originate",id:"originate",children:[]},{value:"Code",id:"code",children:[]}],s={toc:b};function D({components:n,...e}){return Object(r.b)("wrapper",Object(a.a)({},s,e,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"introduction"},"Introduction"),Object(r.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"It is strongly suggested to use the ",Object(r.b)(l.a,{to:"/docs/templates/fa12",mdxType:"Link"},"FA 1.2")," norm for fungible token."))),Object(r.b)("h2",{id:"api"},"API"),Object(r.b)("h3",{id:"storage"},"Storage"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Name"),Object(r.b)("th",{parentName:"tr",align:null},"Type"),Object(r.b)("th",{parentName:"tr",align:null},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"total")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"nat")),Object(r.b)("td",{parentName:"tr",align:null},"total number of unit tokens.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"onetoken")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"nat")),Object(r.b)("td",{parentName:"tr",align:null},"number of units for one token.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"ledger")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"collection")),Object(r.b)("td",{parentName:"tr",align:null},"Association between token holder and number of tokens.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"allowance")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"collection")),Object(r.b)("td",{parentName:"tr",align:null},"Association between the pair owner and spender and the allowed amount.")))),Object(r.b)("h3",{id:"entrypoints"},"Entrypoints"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Name"),Object(r.b)("th",{parentName:"tr",align:null},"Parameters"),Object(r.b)("th",{parentName:"tr",align:null},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"transfer")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"to"),", ",Object(r.b)("inlineCode",{parentName:"td"},"value")),Object(r.b)("td",{parentName:"tr",align:null},"Transfers ",Object(r.b)("inlineCode",{parentName:"td"},"value")," tokens from ",Object(r.b)("em",{parentName:"td"},"caller")," to ",Object(r.b)("inlineCode",{parentName:"td"},"to"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"approve")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"spender"),", ",Object(r.b)("inlineCode",{parentName:"td"},"value")),Object(r.b)("td",{parentName:"tr",align:null},"Approves ",Object(r.b)("inlineCode",{parentName:"td"},"spender")," to transfer ",Object(r.b)("inlineCode",{parentName:"td"},"value")," tokens from ",Object(r.b)("em",{parentName:"td"},"caller"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"transferFrom")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"from"),", ",Object(r.b)("inlineCode",{parentName:"td"},"to"),", ",Object(r.b)("inlineCode",{parentName:"td"},"value")),Object(r.b)("td",{parentName:"tr",align:null},"Transfers ",Object(r.b)("inlineCode",{parentName:"td"},"value")," tokens from ",Object(r.b)("inlineCode",{parentName:"td"},"from")," to ",Object(r.b)("inlineCode",{parentName:"td"},"to"),". It requires that ",Object(r.b)("em",{parentName:"td"},"caller")," have been allowed by ",Object(r.b)("inlineCode",{parentName:"td"},"from")," to transfer this amount to ",Object(r.b)("inlineCode",{parentName:"td"},"to"),".")))),Object(r.b)("h2",{id:"originate"},"Originate"),Object(r.b)("p",null,"Deploy the contract from ",Object(r.b)("a",{href:"https://archetype-lang.org/"},"Archetype")," code below with the following ",Object(r.b)(l.a,{to:"/docs/cli",mdxType:"Link"},"Completium CLI")," example command:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"completium-cli deploy erc20.arl --init '(1_000_000_000_000_000, 1_000_000, @tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG)'\n")),Object(r.b)("p",null,"The command sets:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"total")," variable to 10 millions"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"onetoken")," variable to 1 million"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"initialholder")," constant to ",Object(r.b)("inlineCode",{parentName:"li"},"tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG"))),Object(r.b)("h2",{id:"code"},"Code"),Object(r.b)(i.a,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"}],mdxType:"Tabs"},Object(r.b)(o.a,{value:"archetype",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-archetype",metastring:'title="erc20.arl"',title:'"erc20.arl"'},"archetype erc20(total : nat, onetoken: nat, const initialowner : address)\n\nasset allowance identified by owner spender {\n  owner     : address;\n  spender     : address;\n  amount      : nat;\n}\n\nasset ledger identified by holder {\n  holder     : address;\n  tokens     : nat = 0;\n} initialized by {\n  { holder = initialowner; tokens = total }\n}\n\nentry %transfer (%to : pkey<ledger>, value : nat) {\n  require {\n    d0 : ledger[caller].tokens >= value\n  }\n  effect {\n    ledger.addupdate(%to,  { tokens += value });\n    ledger.update(caller, { tokens -= value })\n  }\n}\n\nentry approve(ispender : address, value : nat) {\n  require {\n    d1 : ledger[caller].tokens >= value;\n  }\n  effect {\n    allowance.addupdate((caller, ispender), { amount = value });\n  }\n}\n\nentry transferFrom(%from : address, %to : address, value : nat) {\n  require {\n    d3: allowance[(%from,caller)].amount >= value;\n    d4: ledger[%from].tokens >= value\n  }\n  effect {\n    (* update allowance *)\n    allowance.update((%from,caller), { amount -=  value });\n    (* update token *)\n    ledger.addupdate(%to, { tokens += value });\n    ledger.update(%from,  { tokens -= value });\n  }\n}\n"))),Object(r.b)(o.a,{value:"michelson",mdxType:"TabItem"},Object(r.b)("p",null,"The ",Object(r.b)(l.a,{to:"/docs/contract/programming-language#micheslon",mdxType:"Link"},"Michelson")," code is generated with version 1.2.3 of Archetype."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'# (Pair 1000000000000000 (Pair 1000000 (Pair {  } { Elt "tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG" 1000000000000000 })))\n{\n  storage (pair (nat %total) (pair (nat %onetoken) (pair (map %allowance (pair address address) nat) (map %ledger address nat))));\n  parameter (or (pair %transfer (address %to) (nat %value)) (or (pair %approve (address %ispender) (nat %value)) (pair %transferFrom (address %from) (pair (address %to) (nat %value)))));\n  code { UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { UNPAIR;\n             SWAP;\n             DUP;\n             DIG 3;\n             DUP;\n             DUG 4;\n             SENDER;\n             GET;\n             IF_NONE\n               { PUSH string "GetNoneValue";\n                 FAILWITH }\n               {  };\n             COMPARE;\n             GE;\n             NOT;\n             IF\n               { PUSH string "InvalidCondition: d0";\n                 FAILWITH }\n               {  };\n             DIG 2;\n             DUP;\n             DUG 3;\n             DIG 2;\n             DUP;\n             DUG 3;\n             MEM;\n             IF\n               { DIG 2;\n                 DUP;\n                 DUG 3;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 GET;\n                 IF_NONE\n                   { PUSH string "GetNoneValue";\n                     FAILWITH }\n                   {  };\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 ADD;\n                 SOME;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 UPDATE;\n                 DIP { DIG 3; DROP };\n                 DUG 3;\n                 DROP }\n               { DIG 2;\n                 DUP;\n                 DUG 3;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 MEM;\n                 IF\n                   { PUSH string "KeyAlreadyExists";\n                     FAILWITH }\n                   { DIG 2;\n                     DUP;\n                     DUG 3;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     PUSH nat 0;\n                     ADD;\n                     SOME;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     UPDATE;\n                     DIP { DIG 2; DROP };\n                     DUG 2 } };\n             DIG 2;\n             DUP;\n             DUG 3;\n             SENDER;\n             GET;\n             IF_NONE\n               { PUSH string "GetNoneValue";\n                 FAILWITH }\n               {  };\n             DIG 3;\n             DUP;\n             DUG 4;\n             PUSH int 0;\n             DIG 3;\n             DUP;\n             DUG 4;\n             INT;\n             DIG 3;\n             DUP;\n             DUG 4;\n             SUB;\n             COMPARE;\n             GE;\n             IF\n               { DIG 2;\n                 DUP;\n                 DUG 3;\n                 INT;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 SUB;\n                 ABS }\n               { PUSH string "AssignNat";\n                 FAILWITH };\n             SOME;\n             SENDER;\n             UPDATE;\n             DIP { DIG 3; DROP };\n             DUG 3;\n             DROP 3;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             NIL operation;\n             PAIR }\n           { IF_LEFT\n               { UNPAIR;\n                 SWAP;\n                 DUP;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 SENDER;\n                 GET;\n                 IF_NONE\n                   { PUSH string "GetNoneValue";\n                     FAILWITH }\n                   {  };\n                 COMPARE;\n                 GE;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCondition: d1";\n                     FAILWITH }\n                   {  };\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 DIG 1;\n                 DUP;\n                 DUG 2;\n                 SOME;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 SENDER;\n                 PAIR;\n                 UPDATE;\n                 DIP { DIG 3; DROP };\n                 DUG 3;\n                 DROP 2;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 NIL operation;\n                 PAIR }\n               { UNPAIR;\n                 SWAP;\n                 UNPAIR;\n                 SWAP;\n                 DUP;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 SENDER;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 PAIR;\n                 GET;\n                 IF_NONE\n                   { PUSH string "GetNoneValue";\n                     FAILWITH }\n                   {  };\n                 COMPARE;\n                 GE;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCondition: d3";\n                     FAILWITH }\n                   {  };\n                 DUP;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 GET;\n                 IF_NONE\n                   { PUSH string "GetNoneValue";\n                     FAILWITH }\n                   {  };\n                 COMPARE;\n                 GE;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCondition: d4";\n                     FAILWITH }\n                   {  };\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 SENDER;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 PAIR;\n                 GET;\n                 IF_NONE\n                   { PUSH string "GetNoneValue";\n                     FAILWITH }\n                   {  };\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 PUSH int 0;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 INT;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 SUB;\n                 COMPARE;\n                 GE;\n                 IF\n                   { DIG 2;\n                     DUP;\n                     DUG 3;\n                     INT;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     SUB;\n                     ABS }\n                   { PUSH string "AssignNat";\n                     FAILWITH };\n                 SOME;\n                 SENDER;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 PAIR;\n                 UPDATE;\n                 DIP { DIG 5; DROP };\n                 DUG 5;\n                 DROP;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 MEM;\n                 IF\n                   { DIG 3;\n                     DUP;\n                     DUG 4;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     ADD;\n                     SOME;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     UPDATE;\n                     DIP { DIG 4; DROP };\n                     DUG 4;\n                     DROP }\n                   { DIG 3;\n                     DUP;\n                     DUG 4;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     MEM;\n                     IF\n                       { PUSH string "KeyAlreadyExists";\n                         FAILWITH }\n                       { DIG 3;\n                         DUP;\n                         DUG 4;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         PUSH nat 0;\n                         ADD;\n                         SOME;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         UPDATE;\n                         DIP { DIG 3; DROP };\n                         DUG 3 } };\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 GET;\n                 IF_NONE\n                   { PUSH string "GetNoneValue";\n                     FAILWITH }\n                   {  };\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 PUSH int 0;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 INT;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 SUB;\n                 COMPARE;\n                 GE;\n                 IF\n                   { DIG 2;\n                     DUP;\n                     DUG 3;\n                     INT;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     SUB;\n                     ABS }\n                   { PUSH string "AssignNat";\n                     FAILWITH };\n                 SOME;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 UPDATE;\n                 DIP { DIG 4; DROP };\n                 DUG 4;\n                 DROP 4;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 NIL operation;\n                 PAIR } } };\n}\n')))))}D.isMDXComponent=!0},244:function(n,e,t){"use strict";function a(n){var e,t,r="";if("string"==typeof n||"number"==typeof n)r+=n;else if("object"==typeof n)if(Array.isArray(n))for(e=0;e<n.length;e++)n[e]&&(t=a(n[e]))&&(r&&(r+=" "),r+=t);else for(e in n)n[e]&&(r&&(r+=" "),r+=e);return r}e.a=function(){for(var n,e,t=0,r="";t<arguments.length;)(n=arguments[t++])&&(e=a(n))&&(r&&(r+=" "),r+=e);return r}},250:function(n,e,t){"use strict";var a=t(0),r=t(251);e.a=function(){const n=Object(a.useContext)(r.a);if(null==n)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return n}},251:function(n,e,t){"use strict";var a=t(0);const r=Object(a.createContext)(void 0);e.a=r},252:function(n,e,t){"use strict";var a=t(0),r=t.n(a),l=t(250),i=t(244),o=t(57),c=t.n(o);const d=37,b=39;e.a=function(n){const{lazy:e,block:t,defaultValue:o,values:s,groupId:D,className:p}=n,{tabGroupChoices:m,setTabGroupChoices:u}=Object(l.a)(),[I,U]=Object(a.useState)(o),P=a.Children.toArray(n.children),G=[];if(null!=D){const n=m[D];null!=n&&n!==I&&s.some((e=>e.value===n))&&U(n)}const O=n=>{const e=n.target,t=G.indexOf(e),a=P[t].props.value;U(a),null!=D&&(u(D,a),setTimeout((()=>{(function(n){const{top:e,left:t,bottom:a,right:r}=n.getBoundingClientRect(),{innerHeight:l,innerWidth:i}=window;return e>=0&&r<=i&&a<=l&&t>=0})(e)||(e.scrollIntoView({block:"center",behavior:"smooth"}),e.classList.add(c.a.tabItemActive),setTimeout((()=>e.classList.remove(c.a.tabItemActive)),2e3))}),150))},N=n=>{var e;let t;switch(n.keyCode){case b:const e=G.indexOf(n.target)+1;t=G[e]||G[0];break;case d:const a=G.indexOf(n.target)-1;t=G[a]||G[G.length-1]}null===(e=t)||void 0===e||e.focus()};return r.a.createElement("div",{className:"tabs-container"},r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":t},p)},s.map((({value:n,label:e})=>r.a.createElement("li",{role:"tab",tabIndex:I===n?0:-1,"aria-selected":I===n,className:Object(i.a)("tabs__item",c.a.tabItem,{"tabs__item--active":I===n}),key:n,ref:n=>G.push(n),onKeyDown:N,onFocus:O,onClick:O},e)))),e?Object(a.cloneElement)(P.filter((n=>n.props.value===I))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},P.map(((n,e)=>Object(a.cloneElement)(n,{key:e,hidden:n.props.value!==I})))))}},253:function(n,e,t){"use strict";var a=t(0),r=t.n(a);e.a=function({children:n,hidden:e,className:t}){return r.a.createElement("div",{role:"tabpanel",hidden:e,className:t},n)}}}]);