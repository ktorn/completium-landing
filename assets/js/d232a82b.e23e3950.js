(self.webpackChunkcompletium_landing=self.webpackChunkcompletium_landing||[]).push([[3951],{8215:function(n,t,e){"use strict";var a=e(7294);t.Z=function(n){var t=n.children,e=n.hidden,D=n.className;return a.createElement("div",{role:"tabpanel",hidden:e,className:D},t)}},5064:function(n,t,e){"use strict";e.d(t,{Z:function(){return U}});var a=e(7294),D=e(9443);var r=function(){var n=(0,a.useContext)(D.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},i=e(6010),s="tabItem_1uMI",I="tabItemActive_2DSg";var P=37,o=39;var U=function(n){var t=n.lazy,e=n.block,D=n.defaultValue,U=n.values,l=n.groupId,d=n.className,G=r(),N=G.tabGroupChoices,m=G.setTabGroupChoices,p=(0,a.useState)(D),c=p[0],R=p[1],u=a.Children.toArray(n.children),A=[];if(null!=l){var C=N[l];null!=C&&C!==c&&U.some((function(n){return n.value===C}))&&R(C)}var S=function(n){var t=n.currentTarget,e=A.indexOf(t),a=U[e].value;R(a),null!=l&&(m(l,a),setTimeout((function(){var n,e,a,D,r,i,s,P;(n=t.getBoundingClientRect(),e=n.top,a=n.left,D=n.bottom,r=n.right,i=window,s=i.innerHeight,P=i.innerWidth,e>=0&&r<=P&&D<=s&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(I),setTimeout((function(){return t.classList.remove(I)}),2e3))}),150))},O=function(n){var t,e;switch(n.keyCode){case o:var a=A.indexOf(n.target)+1;e=A[a]||A[0];break;case P:var D=A.indexOf(n.target)-1;e=A[D]||A[A.length-1]}null==(t=e)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":e},d)},U.map((function(n){var t=n.value,e=n.label;return a.createElement("li",{role:"tab",tabIndex:c===t?0:-1,"aria-selected":c===t,className:(0,i.Z)("tabs__item",s,{"tabs__item--active":c===t}),key:t,ref:function(n){return A.push(n)},onKeyDown:O,onFocus:S,onClick:S},e)}))),t?(0,a.cloneElement)(u.filter((function(n){return n.props.value===c}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},u.map((function(n,t){return(0,a.cloneElement)(n,{key:t,hidden:n.props.value!==c})}))))}},9443:function(n,t,e){"use strict";var a=(0,e(7294).createContext)(void 0);t.Z=a},3026:function(n,t,e){"use strict";e.r(t),e.d(t,{frontMatter:function(){return o},contentTitle:function(){return U},metadata:function(){return l},toc:function(){return d},default:function(){return N}});var a=e(2122),D=e(9756),r=(e(7294),e(3905)),i=e(6742),s=e(5064),I=e(8215),P=["components"],o={id:"template9",title:"Competition",sidebar_label:"Competition",slug:"/templates/competition"},U=void 0,l={unversionedId:"templates/template9",id:"templates/template9",isDocsHomePage:!1,title:"Competition",description:"Introduction",source:"@site/docs/templates/template9.md",sourceDirName:"templates",slug:"/templates/competition",permalink:"/docs/templates/competition",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template9.md",version:"current",frontMatter:{id:"template9",title:"Competition",sidebar_label:"Competition",slug:"/templates/competition"},sidebar:"templates",previous:{title:"Idea box",permalink:"/docs/templates/ideabox"},next:{title:"Auction",permalink:"/docs/templates/auction"}},d=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Code",id:"code",children:[]}],G={toc:d};function N(n){var t=n.components,e=(0,D.Z)(n,P);return(0,r.kt)("wrapper",(0,a.Z)({},G,e,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"This contract collects competitors' scores, and distribute prize to top scores. Submitted scores must be signed by an external oracle to be registered."),(0,r.kt)("p",null,"You may see this contract in action in the ",(0,r.kt)(i.Z,{to:"/docs/dapp-game/",mdxType:"Link"},"2048 competition")," DApp example."),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"storage"},"Storage"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"organizer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the organizer.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"prize")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"tez")),(0,r.kt)("td",{parentName:"tr",align:null},"Prize value in tez.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"oracle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"key")),(0,r.kt)("td",{parentName:"tr",align:null},"Key of the score oracle.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"submission")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"collection")),(0,r.kt)("td",{parentName:"tr",align:null},"A submission is defined by:",(0,r.kt)("ul",null,(0,r.kt)("li",null,"a competitor address"),(0,r.kt)("li",null,"a score"),(0,r.kt)("li",null,"a timestamp")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_state")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"states")),(0,r.kt)("td",{parentName:"tr",align:null},"Contract state, one of ",(0,r.kt)("inlineCode",{parentName:"td"},"Created"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"InProgress"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"Closed"),".")))),(0,r.kt)("h3",{id:"entrypoints"},"Entrypoints"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"confirmed")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Called by ",(0,r.kt)("inlineCode",{parentName:"td"},"organizer")," to open the competition. Prize must be transferred.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"submit")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"packed_score"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"signed_score")),(0,r.kt)("td",{parentName:"tr",align:null},"Adds a submission; ",(0,r.kt)("inlineCode",{parentName:"td"},"packed_score")," is packed version of the pair ",(0,r.kt)("em",{parentName:"td"},"competitor address")," and ",(0,r.kt)("em",{parentName:"td"},"score"),"; ",(0,r.kt)("inlineCode",{parentName:"td"},"signed_score")," is this packed data signed by ",(0,r.kt)("inlineCode",{parentName:"td"},"oracle"),". ",(0,r.kt)("p",null),"It fails if the data is not signed by ",(0,r.kt)("inlineCode",{parentName:"td"},"oracle"),"; it updates the score of the competitor if score already exists.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"close")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Sets contract state to ",(0,r.kt)("inlineCode",{parentName:"td"},"Closed")," and distribute prize to top scores: ",(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("em",{parentName:"td"},"50%"),", ",(0,r.kt)("em",{parentName:"td"},"30%"),", ",(0,r.kt)("em",{parentName:"td"},"20%")," if more than 3 submissions"),(0,r.kt)("li",null,(0,r.kt)("em",{parentName:"td"},"60%"),", ",(0,r.kt)("em",{parentName:"td"},"40%")," if 2 submissions"),(0,r.kt)("li",null,(0,r.kt)("em",{parentName:"td"},"100%")," if only one submission")))))),(0,r.kt)("h2",{id:"code"},"Code"),(0,r.kt)(s.Z,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"}],mdxType:"Tabs"},(0,r.kt)(I.Z,{value:"archetype",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="competition.arl"',title:'"competition.arl"'},'archetype competition(\n  organizer   : address,\n  prize       : tez,\n  oracle      : key,\n)\n\nasset submission {\n  competitor : address;\n  score      : nat;\n  timestamp  : date;\n}\n\n(* state machine *)\nstates =\n | Created     initial\n | InProgress\n | Closed\n\ntransition confirm () {\n  called by organizer\n  from Created to InProgress\n  when { transferred = prize }\n}\n\nentry submit (packed_score : bytes, signed_score : signature) {\n  require {\n    c1 : state = InProgress;\n  }\n  effect {\n    if check_signature(oracle, signed_score, packed_score) then (\n      match unpack<address * nat>(packed_score) with\n      | some(s) ->\n        submission.addupdate(s[0], {\n          score = s[1];\n          timestamp = now\n        })\n      | none -> fail("CANNOT_UNPACK_SCORE")\n      end\n    ) else fail("NOT_SIGNED_BY_ORACLE");\n  }\n}\n\ntransition close () {\n  called by organizer\n  from InProgress to Closed\n  with effect {\n    var submissions = submission.sort(desc(score), timestamp);\n    if submissions.count() >= 3 then begin\n      var first  = submissions.nth(0);\n      var second = submissions.nth(1);\n      var third  = submissions.nth(2);\n      var q1 = 50% * prize;\n      var q2 = 30% * prize;\n      var q3 = 20% * prize;\n      transfer q1 to first;\n      transfer q2 to second;\n      transfer q3 to third;\n      transfer (prize - q1 - q2 - q3) to organizer\n    end else if submissions.count() >= 2 then begin\n      var first  = submissions.nth(0);\n      var second = submissions.nth(1);\n      var q1 = 60% * prize;\n      var q2 = 40% * prize;\n      transfer q1 to first;\n      transfer q2 to second;\n      transfer (prize - q1 - q2) to organizer\n    end else if submissions.count() >= 1 then begin\n      var first = submissions.nth(0);\n      transfer prize to first\n    end else transfer prize to organizer\n  }\n}\n'))),(0,r.kt)(I.Z,{value:"michelson",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'# (Pair organizer (Pair prize (Pair oracle (Pair 0 {  }))))\n{\n  storage (pair (address %organizer) (pair (mutez %prize) (pair (key %oracle) (pair (nat %_state) (map %submission address (pair (nat %score) (timestamp %timestamp)))))));\n  parameter (or (unit %confirm) (or (pair %submit (bytes %packed_score) (signature %signed_score)) (unit %close)));\n  code { NIL operation;\n         DIG 1;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { DROP;\n             DIG 4;\n             DUP;\n             DUG 5;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             DIG 1;\n             DUP;\n             DUG 2;\n             DUP;\n             PUSH nat 0;\n             COMPARE;\n             EQ;\n             IF\n               { DIG 4;\n                 DUP;\n                 DUG 5;\n                 AMOUNT;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { PUSH nat 1;\n                     DIP { DIG 2; DROP };\n                     DUG 2 }\n                   {  } }\n               { PUSH string "InvalidState";\n                 FAILWITH };\n             DROP;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { UNPAIR;\n                 SWAP;\n                 PUSH nat 1;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCondition: c1";\n                     FAILWITH }\n                   {  };\n                 DIG 1;\n                 DUP;\n                 DUG 2;\n                 DIG 1;\n                 DUP;\n                 DUG 2;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 CHECK_SIGNATURE;\n                 IF\n                   { DIG 1;\n                     DUP;\n                     DUG 2;\n                     UNPACK (pair address nat);\n                     IF_NONE\n                       { PUSH string "CANNOT_UNPACK_SCORE";\n                         FAILWITH }\n                       { DIG 3;\n                         DUP;\n                         DUG 4;\n                         NOW;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         CDR;\n                         PAIR;\n                         SOME;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         CAR;\n                         UPDATE;\n                         DIP { DIG 3; DROP };\n                         DUG 3;\n                         DROP } }\n                   { PUSH string "NOT_SIGNED_BY_ORACLE";\n                     FAILWITH };\n                 DROP 2;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { DROP;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 SENDER;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCaller";\n                     FAILWITH }\n                   {  };\n                 DIG 1;\n                 DUP;\n                 DUG 2;\n                 DUP;\n                 PUSH nat 1;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { NIL address;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     ITER { UNPAIR;\n                            NIL address;\n                            DIG 1;\n                            DUP;\n                            DUG 2;\n                            SOME;\n                            PAIR;\n                            DIG 3;\n                            DUP;\n                            DUG 4;\n                            ITER { DIG 1;\n                                   DUP;\n                                   DUG 2;\n                                   CAR;\n                                   DIG 2;\n                                   DUP;\n                                   DUG 3;\n                                   CDR;\n                                   DIG 1;\n                                   DUP;\n                                   DUG 2;\n                                   IF_NONE\n                                     { DUP;\n                                       DIG 3;\n                                       DUP;\n                                       DUG 4;\n                                       CONS;\n                                       DIG 2;\n                                       DUP;\n                                       DUG 3;\n                                       PAIR }\n                                     { PUSH int 0;\n                                       DIG 10;\n                                       DUP;\n                                       DUG 11;\n                                       DIG 5;\n                                       DUP;\n                                       DUG 6;\n                                       GET;\n                                       IF_NONE\n                                         { PUSH string "GetNoneValue";\n                                           FAILWITH }\n                                         {  };\n                                       DIG 8;\n                                       DUP;\n                                       DUG 9;\n                                       CAR;\n                                       DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       CAR;\n                                       COMPARE;\n                                       LT;\n                                       IF\n                                         { PUSH int 1 }\n                                         { DIG 8;\n                                           DUP;\n                                           DUG 9;\n                                           CDR;\n                                           DIG 1;\n                                           DUP;\n                                           DUG 2;\n                                           CDR;\n                                           COMPARE;\n                                           GT;\n                                           IF\n                                             { PUSH int 1 }\n                                             { PUSH int 0 } };\n                                       DIP { DROP };\n                                       COMPARE;\n                                       GT;\n                                       IF\n                                         { DIG 1;\n                                           DUP;\n                                           DUG 2;\n                                           DIG 6;\n                                           DUP;\n                                           DUG 7;\n                                           CONS;\n                                           DIG 4;\n                                           DUP;\n                                           DUG 5;\n                                           CONS;\n                                           NONE address;\n                                           PAIR }\n                                         { DIG 1;\n                                           DUP;\n                                           DUG 2;\n                                           DIG 4;\n                                           DUP;\n                                           DUG 5;\n                                           CONS;\n                                           DIG 3;\n                                           DUP;\n                                           DUG 4;\n                                           PAIR };\n                                       SWAP;\n                                       DROP };\n                                   DIP { DROP };\n                                   DIP { DROP };\n                                   DIP { DIG 1; DROP };\n                                   DUG 1;\n                                   DROP };\n                            DUP;\n                            CAR;\n                            DIG 1;\n                            DUP;\n                            DUG 2;\n                            CDR;\n                            NIL address;\n                            DIG 2;\n                            DUP;\n                            DUG 3;\n                            IF_NONE\n                              { DIG 1;\n                                DUP;\n                                DUG 2 }\n                              { DIG 2;\n                                DUP;\n                                DUG 3;\n                                DIG 6;\n                                DUP;\n                                DUG 7;\n                                CONS;\n                                SWAP;\n                                DROP };\n                            ITER { DIG 1;\n                                   DUP;\n                                   DUG 2;\n                                   DIG 1;\n                                   DUP;\n                                   DUG 2;\n                                   CONS;\n                                   DIP { DIG 1; DROP };\n                                   DUG 1;\n                                   DROP };\n                            DIP { DROP };\n                            DIP { DROP };\n                            DIP { DROP };\n                            DIP { DIG 2; DROP };\n                            DUG 2;\n                            DROP 2 };\n                     PUSH nat 3;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     SIZE;\n                     COMPARE;\n                     GE;\n                     IF\n                       { NONE address;\n                         PUSH nat 0;\n                         PAIR;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         ITER { PUSH nat 0;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                CAR;\n                                COMPARE;\n                                EQ;\n                                IF\n                                  { DUP;\n                                    SOME;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR }\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CDR;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR };\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         CDR;\n                         IF_NONE\n                           { PUSH string "NoneValue";\n                             FAILWITH }\n                           {  };\n                         NONE address;\n                         PUSH nat 0;\n                         PAIR;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         ITER { PUSH nat 1;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                CAR;\n                                COMPARE;\n                                EQ;\n                                IF\n                                  { DUP;\n                                    SOME;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR }\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CDR;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR };\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         CDR;\n                         IF_NONE\n                           { PUSH string "NoneValue";\n                             FAILWITH }\n                           {  };\n                         NONE address;\n                         PUSH nat 0;\n                         PAIR;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         ITER { PUSH nat 2;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                CAR;\n                                COMPARE;\n                                EQ;\n                                IF\n                                  { DUP;\n                                    SOME;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR }\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CDR;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR };\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         CDR;\n                         IF_NONE\n                           { PUSH string "NoneValue";\n                             FAILWITH }\n                           {  };\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         PUSH nat 2;\n                         PUSH int 1;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         DIG 9;\n                         DUP;\n                         DUG 10;\n                         PUSH nat 10;\n                         PUSH int 3;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         DIG 10;\n                         DUP;\n                         DUG 11;\n                         PUSH nat 5;\n                         PUSH int 1;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         DIG 13;\n                         DUP;\n                         DUG 14;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 13; DROP };\n                         DUG 13;\n                         DIG 13;\n                         DUP;\n                         DUG 14;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 13; DROP };\n                         DUG 13;\n                         DIG 13;\n                         DUP;\n                         DUG 14;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 13; DROP };\n                         DUG 13;\n                         DIG 13;\n                         DUP;\n                         DUG 14;\n                         DIG 13;\n                         DUP;\n                         DUG 14;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 16;\n                         DUP;\n                         DUG 17;\n                         SUB;\n                         SUB;\n                         SUB;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 13; DROP };\n                         DUG 13;\n                         DROP 6 }\n                       { PUSH nat 2;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         SIZE;\n                         COMPARE;\n                         GE;\n                         IF\n                           { NONE address;\n                             PUSH nat 0;\n                             PAIR;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             ITER { PUSH nat 0;\n                                    DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    CAR;\n                                    COMPARE;\n                                    EQ;\n                                    IF\n                                      { DUP;\n                                        SOME;\n                                        PUSH nat 1;\n                                        DIG 3;\n                                        DUP;\n                                        DUG 4;\n                                        CAR;\n                                        ADD;\n                                        PAIR }\n                                      { DIG 1;\n                                        DUP;\n                                        DUG 2;\n                                        CDR;\n                                        PUSH nat 1;\n                                        DIG 3;\n                                        DUP;\n                                        DUG 4;\n                                        CAR;\n                                        ADD;\n                                        PAIR };\n                                    DIP { DIG 1; DROP };\n                                    DUG 1;\n                                    DROP };\n                             CDR;\n                             IF_NONE\n                               { PUSH string "NoneValue";\n                                 FAILWITH }\n                               {  };\n                             NONE address;\n                             PUSH nat 0;\n                             PAIR;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             ITER { PUSH nat 1;\n                                    DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    CAR;\n                                    COMPARE;\n                                    EQ;\n                                    IF\n                                      { DUP;\n                                        SOME;\n                                        PUSH nat 1;\n                                        DIG 3;\n                                        DUP;\n                                        DUG 4;\n                                        CAR;\n                                        ADD;\n                                        PAIR }\n                                      { DIG 1;\n                                        DUP;\n                                        DUG 2;\n                                        CDR;\n                                        PUSH nat 1;\n                                        DIG 3;\n                                        DUP;\n                                        DUG 4;\n                                        CAR;\n                                        ADD;\n                                        PAIR };\n                                    DIP { DIG 1; DROP };\n                                    DUG 1;\n                                    DROP };\n                             CDR;\n                             IF_NONE\n                               { PUSH string "NoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             PUSH nat 5;\n                             PUSH int 3;\n                             PAIR;\n                             PAIR;\n                             UNPAIR;\n                             UNPAIR;\n                             ABS;\n                             DIG 2;\n                             MUL;\n                             EDIV;\n                             IF_NONE\n                               { PUSH string "DivByZero";\n                                 FAILWITH }\n                               {  };\n                             CAR;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             PUSH nat 5;\n                             PUSH int 2;\n                             PAIR;\n                             PAIR;\n                             UNPAIR;\n                             UNPAIR;\n                             ABS;\n                             DIG 2;\n                             MUL;\n                             EDIV;\n                             IF_NONE\n                               { PUSH string "DivByZero";\n                                 FAILWITH }\n                               {  };\n                             CAR;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             CONTRACT unit;\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             UNIT;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 11; DROP };\n                             DUG 11;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             CONTRACT unit;\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             UNIT;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 11; DROP };\n                             DUG 11;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             CONTRACT unit;\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             DIG 13;\n                             DUP;\n                             DUG 14;\n                             SUB;\n                             SUB;\n                             UNIT;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 11; DROP };\n                             DUG 11;\n                             DROP 4 }\n                           { PUSH nat 1;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             SIZE;\n                             COMPARE;\n                             GE;\n                             IF\n                               { NONE address;\n                                 PUSH nat 0;\n                                 PAIR;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 ITER { PUSH nat 0;\n                                        DIG 2;\n                                        DUP;\n                                        DUG 3;\n                                        CAR;\n                                        COMPARE;\n                                        EQ;\n                                        IF\n                                          { DUP;\n                                            SOME;\n                                            PUSH nat 1;\n                                            DIG 3;\n                                            DUP;\n                                            DUG 4;\n                                            CAR;\n                                            ADD;\n                                            PAIR }\n                                          { DIG 1;\n                                            DUP;\n                                            DUG 2;\n                                            CDR;\n                                            PUSH nat 1;\n                                            DIG 3;\n                                            DUP;\n                                            DUG 4;\n                                            CAR;\n                                            ADD;\n                                            PAIR };\n                                        DIP { DIG 1; DROP };\n                                        DUG 1;\n                                        DROP };\n                                 CDR;\n                                 IF_NONE\n                                   { PUSH string "NoneValue";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 8;\n                                 DUP;\n                                 DUG 9;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 CONTRACT unit;\n                                 IF_NONE\n                                   { PUSH string "BadContract";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 8;\n                                 DUP;\n                                 DUG 9;\n                                 UNIT;\n                                 TRANSFER_TOKENS;\n                                 CONS;\n                                 DIP { DIG 8; DROP };\n                                 DUG 8;\n                                 DROP }\n                               { DIG 7;\n                                 DUP;\n                                 DUG 8;\n                                 DIG 7;\n                                 DUP;\n                                 DUG 8;\n                                 CONTRACT unit;\n                                 IF_NONE\n                                   { PUSH string "BadContract";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 7;\n                                 DUP;\n                                 DUG 8;\n                                 UNIT;\n                                 TRANSFER_TOKENS;\n                                 CONS;\n                                 DIP { DIG 7; DROP };\n                                 DUG 7 } } };\n                     DROP;\n                     PUSH nat 2;\n                     DIP { DIG 2; DROP };\n                     DUG 2 }\n                   { PUSH string "InvalidState";\n                     FAILWITH };\n                 DROP;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR } } };\n}\n')))))}N.isMDXComponent=!0}}]);