(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{227:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return d})),t.d(e,"metadata",(function(){return o})),t.d(e,"toc",(function(){return s})),t.d(e,"default",(function(){return u}));var a=t(3),r=(t(0),t(238)),i=t(239),l=t(252),b=t(253);const d={id:"template6",title:"Zero-Coupon bond",sidebar_label:"Zero-Coupon bond",slug:"/templates/zcb"},o={unversionedId:"templates/template6",id:"templates/template6",isDocsHomePage:!1,title:"Zero-Coupon bond",description:"Introduction",source:"@site/docs/templates/template6.md",slug:"/templates/zcb",permalink:"/docs/templates/zcb",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template6.md",version:"current",sidebar_label:"Zero-Coupon bond",sidebar:"templates",previous:{title:"FA 2",permalink:"/docs/templates/nft"},next:{title:"DEX",permalink:"/docs/templates/dex"}},s=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Code",id:"code",children:[]}],c={toc:s};function u({components:n,...e}){return Object(r.b)("wrapper",Object(a.a)({},c,e,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"introduction"},"Introduction"),Object(r.b)("p",null,"A ",Object(r.b)("a",{href:"https://en.wikipedia.org/wiki/Zero-coupon_bond",target:"_blank"},"Zero-Coupon")," bond is a bond in which the face value is repaid some predefined time after it has been released (maturity time)."),Object(r.b)("p",null,"In this contract, the present value of the bond (value at which the bond is traded) is computed as the face value (value at which the bond is redeemed at maturity time) minus a discount percent of face value."),Object(r.b)("p",null,"A detailed presentation of the process is available in the ",Object(r.b)(i.a,{to:"/docs/dapp-zcb/",mdxType:"Link"},"Zero-Coupon Bond")," DApp example."),Object(r.b)("h2",{id:"api"},"API"),Object(r.b)("h3",{id:"storage"},"Storage"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Name"),Object(r.b)("th",{parentName:"tr",align:null},"Type"),Object(r.b)("th",{parentName:"tr",align:null},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"issuer")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"address")),Object(r.b)("td",{parentName:"tr",align:null},"Bond issuer's address.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"subscriber")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"address")),Object(r.b)("td",{parentName:"tr",align:null},"Bond subscriber's address.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"facevalue")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"tez")),Object(r.b)("td",{parentName:"tr",align:null},"Value at which the bond is redeemed at maturity time.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"discout")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"rational")),Object(r.b)("td",{parentName:"tr",align:null},"Discount applied to ",Object(r.b)("inlineCode",{parentName:"td"},"facevalue")," to compute present value (at emission)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"maturityduration")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"duration")),Object(r.b)("td",{parentName:"tr",align:null},"Duration before maturity time.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"paybackduration")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"duration")),Object(r.b)("td",{parentName:"tr",align:null},"Duration of payback period after maturity date")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"issuersigned")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"bool")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"true")," is issuer has signed, ",Object(r.b)("inlineCode",{parentName:"td"},"false")," otherwise.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"subscribersigned")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"bool")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"true")," is subscriber has signed, ",Object(r.b)("inlineCode",{parentName:"td"},"false")," otherwise.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"_state")),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"states")),Object(r.b)("td",{parentName:"tr",align:null},"One of ",Object(r.b)("inlineCode",{parentName:"td"},"Created"),", ",Object(r.b)("inlineCode",{parentName:"td"},"Signed"),", ",Object(r.b)("inlineCode",{parentName:"td"},"Terminated"),", ",Object(r.b)("inlineCode",{parentName:"td"},"Disputed"))))),Object(r.b)("h3",{id:"entrypoints"},"Entrypoints"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Name"),Object(r.b)("th",{parentName:"tr",align:null},"Parameters"),Object(r.b)("th",{parentName:"tr",align:null},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"toSigned")),Object(r.b)("td",{parentName:"tr",align:null}),Object(r.b)("td",{parentName:"tr",align:null},"Called by ",Object(r.b)("inlineCode",{parentName:"td"},"sign")," to set contract's state to ",Object(r.b)("inlineCode",{parentName:"td"},"Signed"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"sign")),Object(r.b)("td",{parentName:"tr",align:null}),Object(r.b)("td",{parentName:"tr",align:null},"Called by ",Object(r.b)("inlineCode",{parentName:"td"},"issuer")," or ",Object(r.b)("inlineCode",{parentName:"td"},"subscriber"),". ",Object(r.b)("inlineCode",{parentName:"td"},"subscriber")," must transfer the present value to the contract.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"terminate")),Object(r.b)("td",{parentName:"tr",align:null}),Object(r.b)("td",{parentName:"tr",align:null},"Called by ",Object(r.b)("inlineCode",{parentName:"td"},"issuer")," during payback period, to transfer the face value to ",Object(r.b)("inlineCode",{parentName:"td"},"subscriber"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"dispute")),Object(r.b)("td",{parentName:"tr",align:null}),Object(r.b)("td",{parentName:"tr",align:null},"Called by ",Object(r.b)("inlineCode",{parentName:"td"},"subscriber")," if ",Object(r.b)("inlineCode",{parentName:"td"},"issuer")," has not terminated the contract in the payback period.")))),Object(r.b)("h2",{id:"code"},"Code"),Object(r.b)(l.a,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"}],mdxType:"Tabs"},Object(r.b)(b.a,{value:"archetype",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-archetype",metastring:'title="zcb.arl"',title:'"zcb.arl"'},'archetype zero_coupon_bond (\n  issuer : address,\n  subscriber : address,\n  facevalue : tez,\n  discount : rational,\n  maturityduration : duration,\n  paybackduration  : duration,\n  issuersigned : bool,\n  subscribersigned : bool\n)\n\nvariable signaturedate    : option<date> = none\n\nstates =\n  | Created initial\n  | Signed\n  | Terminated\n  | Disputed\n\ntransition toSigned() {\n  called by selfaddress\n  from Created to Signed with effect {\n    signaturedate := some(now)\n  }\n}\n\nentry sign () {\n  if caller = issuer then\n    issuersigned := true\n  else if caller = subscriber then begin\n    subscribersigned := true;\n    var presentvalue = discount * facevalue;\n    dorequire(transferred >= presentvalue, "SUBSCRIBER_INVALID_TRANSFERRED");\n    transfer presentvalue to issuer;\n  end\n  else fail("CALLER_NOT_A_SIGNER");\n  if issuersigned and subscribersigned then\n    transfer 0tz to entry self.toSigned();\n}\n\ntransition terminate () {\n  called by issuer\n  from Signed to Terminated when {\n    match signaturedate with\n    | some(d) ->\n      d + maturityduration <=  now <= d + maturityduration + paybackduration and\n      transferred >= facevalue\n    | none -> false\n    end\n  } with effect {\n    transfer facevalue to subscriber\n  }\n}\n\ntransition dispute () {\n  called by subscriber\n  from Signed to Disputed when {\n    match signaturedate with\n    | some(d) ->\n      d + maturityduration + paybackduration <=  now\n    | none -> false\n    end\n  }\n}\n'))),Object(r.b)(b.a,{value:"michelson",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'# (Pair issuer (Pair subscriber (Pair facevalue (Pair discount (Pair maturityduration (Pair paybackduration (Pair issuersigned (Pair subscribersigned (Pair None 0)))))))))\n{\n  storage (pair (address %issuer) (pair (address %subscriber) (pair (mutez %facevalue) (pair (pair %discount int nat) (pair (int %maturityduration) (pair (int %paybackduration) (pair (bool %issuersigned) (pair (bool %subscribersigned) (pair (option %signaturedate timestamp) (nat %_state))))))))));\n  parameter (or (unit %toSigned) (or (unit %sign) (or (unit %terminate) (unit %dispute))));\n  code { NIL operation;\n         DIG 1;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { DROP;\n             SELF;\n             ADDRESS;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             DUP;\n             DUP;\n             PUSH nat 0;\n             COMPARE;\n             EQ;\n             IF\n               { NOW;\n                 SOME;\n                 DIP { DIG 2; DROP };\n                 DUG 2;\n                 PUSH nat 1;\n                 DIP { DIG 1; DROP };\n                 DUG 1 }\n               { PUSH string "InvalidState";\n                 FAILWITH };\n             DROP;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { DROP;\n                 DIG 9;\n                 DUP;\n                 DUG 10;\n                 SENDER;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { PUSH bool True;\n                     DIP { DIG 3; DROP };\n                     DUG 3 }\n                   { DIG 8;\n                     DUP;\n                     DUG 9;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { PUSH bool True;\n                         DIP { DIG 2; DROP };\n                         DUG 2;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         DUP;\n                         AMOUNT;\n                         COMPARE;\n                         GE;\n                         NOT;\n                         IF\n                           { PUSH string "SUBSCRIBER_INVALID_TRANSFERRED";\n                             FAILWITH }\n                           {  };\n                         DIG 11;\n                         DUP;\n                         DUG 12;\n                         DIG 11;\n                         DUP;\n                         DUG 12;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 11; DROP };\n                         DUG 11;\n                         DROP }\n                       { PUSH string "CALLER_NOT_A_SIGNER";\n                         FAILWITH } };\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 AND;\n                 IF\n                   { DIG 10;\n                     DUP;\n                     DUG 11;\n                     SELF;\n                     ADDRESS;\n                     CONTRACT %toSigned unit;\n                     IF_NONE\n                       { PUSH string "BadContract";\n                         FAILWITH }\n                       {  };\n                     PUSH mutez 0;\n                     UNIT;\n                     TRANSFER_TOKENS;\n                     CONS;\n                     DIP { DIG 10; DROP };\n                     DUG 10 }\n                   {  };\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { IF_LEFT\n                   { DROP;\n                     DIG 9;\n                     DUP;\n                     DUG 10;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCaller";\n                         FAILWITH }\n                       {  };\n                     DUP;\n                     DUP;\n                     PUSH nat 1;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { DIG 2;\n                         DUP;\n                         DUG 3;\n                         IF_NONE\n                           { PUSH bool False }\n                           { DIG 9;\n                             DUP;\n                             DUG 10;\n                             AMOUNT;\n                             COMPARE;\n                             GE;\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             ADD;\n                             ADD;\n                             NOW;\n                             COMPARE;\n                             LE;\n                             NOW;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             ADD;\n                             COMPARE;\n                             LE;\n                             AND;\n                             AND;\n                             SWAP;\n                             DROP };\n                         IF\n                           { DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             CONTRACT unit;\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             UNIT;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 11; DROP };\n                             DUG 11;\n                             PUSH nat 2;\n                             DIP { DIG 1; DROP };\n                             DUG 1 }\n                           {  } }\n                       { PUSH string "InvalidState";\n                         FAILWITH };\n                     DROP;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR }\n                   { DROP;\n                     DIG 8;\n                     DUP;\n                     DUG 9;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCaller";\n                         FAILWITH }\n                       {  };\n                     DUP;\n                     DUP;\n                     PUSH nat 1;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { DIG 2;\n                         DUP;\n                         DUG 3;\n                         IF_NONE\n                           { PUSH bool False }\n                           { NOW;\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             ADD;\n                             ADD;\n                             COMPARE;\n                             LE;\n                             SWAP;\n                             DROP };\n                         IF\n                           { PUSH nat 3;\n                             DIP { DIG 1; DROP };\n                             DUG 1 }\n                           {  } }\n                       { PUSH string "InvalidState";\n                         FAILWITH };\n                     DROP;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR } } } };\n}\n')))))}u.isMDXComponent=!0},244:function(n,e,t){"use strict";function a(n){var e,t,r="";if("string"==typeof n||"number"==typeof n)r+=n;else if("object"==typeof n)if(Array.isArray(n))for(e=0;e<n.length;e++)n[e]&&(t=a(n[e]))&&(r&&(r+=" "),r+=t);else for(e in n)n[e]&&(r&&(r+=" "),r+=e);return r}e.a=function(){for(var n,e,t=0,r="";t<arguments.length;)(n=arguments[t++])&&(e=a(n))&&(r&&(r+=" "),r+=e);return r}},250:function(n,e,t){"use strict";var a=t(0),r=t(251);e.a=function(){const n=Object(a.useContext)(r.a);if(null==n)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return n}},251:function(n,e,t){"use strict";var a=t(0);const r=Object(a.createContext)(void 0);e.a=r},252:function(n,e,t){"use strict";var a=t(0),r=t.n(a),i=t(250),l=t(244),b=t(57),d=t.n(b);const o=37,s=39;e.a=function(n){const{lazy:e,block:t,defaultValue:b,values:c,groupId:u,className:p}=n,{tabGroupChoices:m,setTabGroupChoices:P}=Object(i.a)(),[O,N]=Object(a.useState)(b),I=a.Children.toArray(n.children),D=[];if(null!=u){const n=m[u];null!=n&&n!==O&&c.some((e=>e.value===n))&&N(n)}const A=n=>{const e=n.target,t=D.indexOf(e),a=I[t].props.value;N(a),null!=u&&(P(u,a),setTimeout((()=>{(function(n){const{top:e,left:t,bottom:a,right:r}=n.getBoundingClientRect(),{innerHeight:i,innerWidth:l}=window;return e>=0&&r<=l&&a<=i&&t>=0})(e)||(e.scrollIntoView({block:"center",behavior:"smooth"}),e.classList.add(d.a.tabItemActive),setTimeout((()=>e.classList.remove(d.a.tabItemActive)),2e3))}),150))},j=n=>{var e;let t;switch(n.keyCode){case s:const e=D.indexOf(n.target)+1;t=D[e]||D[0];break;case o:const a=D.indexOf(n.target)-1;t=D[a]||D[D.length-1]}null===(e=t)||void 0===e||e.focus()};return r.a.createElement("div",{className:"tabs-container"},r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":t},p)},c.map((({value:n,label:e})=>r.a.createElement("li",{role:"tab",tabIndex:O===n?0:-1,"aria-selected":O===n,className:Object(l.a)("tabs__item",d.a.tabItem,{"tabs__item--active":O===n}),key:n,ref:n=>D.push(n),onKeyDown:j,onFocus:A,onClick:A},e)))),e?Object(a.cloneElement)(I.filter((n=>n.props.value===O))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},I.map(((n,e)=>Object(a.cloneElement)(n,{key:e,hidden:n.props.value!==O})))))}},253:function(n,e,t){"use strict";var a=t(0),r=t.n(a);e.a=function({children:n,hidden:e,className:t}){return r.a.createElement("div",{role:"tabpanel",hidden:e,className:t},n)}}}]);