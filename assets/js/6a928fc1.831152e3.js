(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{147:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",(function(){return i})),n.d(e,"metadata",(function(){return s})),n.d(e,"toc",(function(){return r})),n.d(e,"default",(function(){return p}));var a=n(3),c=(n(0),n(238)),o=n(239);const i={id:"contract3",title:"Test Scenario",sidebar_label:"Test Scenario",slug:"/contract/test-scenario",hide_title:!1},s={unversionedId:"contract/contract3",id:"contract/contract3",isDocsHomePage:!1,title:"Test Scenario",description:"Test scenario is the current industry standard to ensure a contract has the expected behavior. Basically a test is a program that originates the contract(s), calls them and checks the storage value(s) and account(s) balances.",source:"@site/docs/contract/contract3.md",slug:"/contract/test-scenario",permalink:"/docs/contract/test-scenario",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/contract/contract3.md",version:"current",sidebar_label:"Test Scenario",sidebar:"contract",previous:{title:"Call another Contract",permalink:"/docs/contract/tuto/archetype-callcontr"}},r=[{value:"Completium JS library",id:"completium-js-library",children:[]},{value:"Create test project",id:"create-test-project",children:[]},{value:"Example",id:"example",children:[]},{value:"Run test",id:"run-test",children:[]},{value:"Sandbox",id:"sandbox",children:[]}],l={toc:r};function p({components:t,...e}){return Object(c.b)("wrapper",Object(a.a)({},l,e,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Test scenario is the current industry standard to ensure a contract has the expected behavior. Basically a test is a program that originates the contract(s), calls them and checks the storage value(s) and account(s) balances."),Object(c.b)("p",null,"This article presents how to write and execute tests with Completium."),Object(c.b)("h2",{id:"completium-js-library"},"Completium JS library"),Object(c.b)("p",null,"Completium provides a Javascript ",Object(c.b)(o.a,{to:"/docs/cli/jslibrary",mdxType:"Link"},"programming library")," to program interactions with contracts. It benefits from the configuration of endpoints and accounts established with the ",Object(c.b)(o.a,{to:"/docs/cli",mdxType:"Link"},"CLI"),"."),Object(c.b)("p",null,"Before using ",Object(c.b)("inlineCode",{parentName:"p"},"$completium-cli")," as a programming library, ",Object(c.b)(o.a,{to:"/docs/cli",mdxType:"Link"},"install")," the CLI to configure ",Object(c.b)(o.a,{to:"/docs/cli/network",mdxType:"Link"},"endpoint")," and ",Object(c.b)(o.a,{to:"/docs/cli/account",mdxType:"Link"},"account(s)"),"."),Object(c.b)("h2",{id:"create-test-project"},"Create test project"),Object(c.b)("p",null,"Follow the standard npm process to create a javascript project and install ",Object(c.b)("inlineCode",{parentName:"p"},"completium-cli"),":"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"$ mkdir test\n$ cd test\n$ npm init -y\n$ npm i @completium/completium-cli\n")),Object(c.b)("h2",{id:"example"},"Example"),Object(c.b)("p",null,"The following example illustrates how to test the ",Object(c.b)(o.a,{to:"/docs/contract/tuto/archetype-statem",mdxType:"Link"},"State machine")," contract of the Archetype ",Object(c.b)(o.a,{to:"/docs/contract/programming-language#archetype",mdxType:"Link"},"tutorial"),"."),Object(c.b)("p",null,"The goal is to check whether the contract is in the right state after a series of calls to ",Object(c.b)("inlineCode",{parentName:"p"},"init"),", ",Object(c.b)("inlineCode",{parentName:"p"},"inc_value")," twice and ",Object(c.b)("inlineCode",{parentName:"p"},"complete")," entrypoints, and to check whether the caller's balance is unchanged while transferring 5tz to ",Object(c.b)("inlineCode",{parentName:"p"},"init")," (within cost of transactions)."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js",metastring:'title="test.js"',title:'"test.js"'},'const assert     = require(\'assert\');\nconst Completium = require(\'@completium/completium-cli\');\n\nconst test = async () => {\n  const completium = new Completium ();\n  // Scenario\n  const balance_before = (await completium.getBalance()).toNumber();\n  var cost = 0;\n  var op = await completium.originate(\'state_machine.arl\');\n  cost += op.cost.toNumber();\n  // send 5tz to contract\n  var op = await completium.call("state_machine", {\n    entry : "init",\n    amount: "5tz" });\n  cost += op.cost.toNumber();\n  var op = await completium.call("state_machine", { entry : "inc_value" });\n  cost += op.cost.toNumber();\n  var op = await completium.call("state_machine", { entry : "inc_value" });\n  cost += op.cost.toNumber();\n  // Should return the 5tz sent with `init`\n  var op = await completium.call("state_machine", { entry : "complete" });\n  cost += op.cost.toNumber();\n  // Test final state and balance\n  const storage = await completium.getStorage("state_machine");\n  const balance   = (await completium.getBalance()).toNumber();\n  assert(storage._state == 3, "Invalid contract state");\n  assert(balance == balance_before - cost, "Invalid caller balance");\n}\n\ntest();\n')),Object(c.b)("p",null,"The cost of transactions is accumulated in the local ",Object(c.b)("inlineCode",{parentName:"p"},"cost")," variable. It is used to test that the caller has got back the 5 tezies send to ",Object(c.b)("inlineCode",{parentName:"p"},"init")," entrypoint."),Object(c.b)("p",null,"The script is using the current account and endpoint, shown with the Completium ",Object(c.b)(o.a,{to:"/docs/cli",mdxType:"Link"},"CLI")," commands:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash",metastring:"{1,4}","{1,4}":!0},"$ completium-cli show endpoint\nCurrent network: edo\nCurrent endpoint: https://edonet-tezos.giganode.io\n$ completium-cli show account\nCurrent account: admin\nPublic key hash: tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb\nBalance on sandbox: 9998.466387 \ua729\n")),Object(c.b)("p",null,"This means the script is using the ",Object(c.b)("inlineCode",{parentName:"p"},"edo")," network with the account ",Object(c.b)("inlineCode",{parentName:"p"},"admin"),". It is possible to programmatically switch account and endpoint from within the test scenario."),Object(c.b)("h2",{id:"run-test"},"Run test"),Object(c.b)("p",null,"Edit the package file to set the test command:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-json",metastring:'{7} title="package.json"',"{7}":!0,title:'"package.json"'},'{\n  "name": "demo",\n  "version": "1.0.0",\n  "description": "",\n  "main": "test.js",\n  "scripts": {\n    "test": "node test.js"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC",\n  "dependencies": {\n    "@completium/completium-cli": "^0.1.8"\n  }\n}\n')),Object(c.b)("p",null,"Launch the test with:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"npm test\n")),Object(c.b)("h2",{id:"sandbox"},"Sandbox"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"$completium-cli")," provides the possibility to run the scenario on a local ",Object(c.b)(o.a,{to:"/docs/cli/network#sandbox",mdxType:"Link"},"sandbox")," network."),Object(c.b)("p",null,"In order to launch the test in a sandbox, run the following script:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-sh"},"completium-cli start sandbox\ncompletium-cli set endpoint http://localhost:20000\nnpm test\ncompletium-cli stop sandbox\n")))}p.isMDXComponent=!0}}]);