"use strict";(self.webpackChunkcompletium_landing=self.webpackChunkcompletium_landing||[]).push([[4545],{5788:function(e,n,i){i.r(n),i.d(n,{frontMatter:function(){return r},contentTitle:function(){return o},metadata:function(){return d},toc:function(){return s},default:function(){return c}});var t=i(7462),a=i(3366),l=(i(7294),i(3905)),m=["components"],r={id:"miles9",title:"Implementation",sidebar_label:"Implementation",slug:"/dapp-miles/miles-contract-implementation"},o=void 0,d={unversionedId:"dapp-miles/miles9",id:"dapp-miles/miles9",title:"Implementation",description:"Add",source:"@site/docs/dapp-miles/miles9.md",sourceDirName:"dapp-miles",slug:"/dapp-miles/miles-contract-implementation",permalink:"/docs/dapp-miles/miles-contract-implementation",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/dapp-miles/miles9.md",tags:[],version:"current",frontMatter:{id:"miles9",title:"Implementation",sidebar_label:"Implementation",slug:"/dapp-miles/miles-contract-implementation"}},s=[{value:"Add",id:"add",children:[],level:3},{value:"Consume",id:"consume",children:[],level:3},{value:"Clear expired",id:"clear-expired",children:[],level:3}],p={toc:s};function c(e){var n=e.components,i=(0,a.Z)(e,m);return(0,l.kt)("wrapper",(0,t.Z)({},p,i,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"add"},"Add"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-archetype"},"entry add (\n    ow                 : address,\n    newmile_id         : string,\n    newmile_amount     : nat,\n    newmile_expiration : date) {\n   called by admin\n   failif {\n     c2 : mile.contains(newmile_id);\n   }\n   effect {\n    owner.addupdate (ow, { miles += [{\n         id = newmile_id;\n         amount = newmile_amount;\n         expiration = newmile_expiration\n        }]\n    })\n   }\n}\n\n")),(0,l.kt)("h3",{id:"consume"},"Consume"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-archetype"},'entry consume (quantity : nat) {\n  effect {\n    var miles = owner[caller].miles.sort(expiration).select(the.expiration >= now);\n    dorequire (miles.sum(the.amount) >= quantity, "NotEnoughMiles");\n    var remainder = quantity;\n    for : loop m in miles do\n      if remainder > 0 then begin\n        if mile[m].amount > remainder then begin\n          mile.update(m, { amount -= remainder });\n          remainder := 0\n        end else if mile[m].amount = remainder then begin\n          remainder := 0;\n          owner[caller].miles.remove(m)\n        end else begin\n          remainder -= mile[m].amount;\n          owner[caller].miles.remove(m)\n        end\n      end\n    done;\n    assert p1\n  }\n}\n')),(0,l.kt)("h3",{id:"clear-expired"},"Clear expired"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-archetype"},"entry clear_expired () {\n  called by admin\n  effect {\n    for : loop2 o in owner do\n      owner[o].miles.removeif(the.expiration < now)\n    done\n  }\n}\n")))}c.isMDXComponent=!0}}]);