(self.webpackChunkcompletium_landing=self.webpackChunkcompletium_landing||[]).push([[9764],{3079:function(e,n,t){"use strict";var i=t(7294),r=t(282),a=t(9277),s=t(3457),o=t(6742),c=t(4996);n.Z=function(e){var n=i.useMemo((function(){return(0,a.Z)({palette:{type:"dark"}})}),[!0]);return i.createElement("div",{style:{textAlign:"center",paddingTop:"0px",paddingBottom:"40px"}},i.createElement(s.Z,{theme:n},e.internal?i.createElement(r.Z,{variant:"outlined",size:"large",component:o.Z,to:(0,c.Z)("docs/"+e.url+"/")},e.txt):i.createElement(r.Z,{variant:"outlined",size:"large",onClick:function(){return window.open(e.url,"_blank")}},e.txt)))}},807:function(e,n,t){"use strict";t(7294),t(4996)},7105:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return m},toc:function(){return d},default:function(){return p}});var i=t(2122),r=t(9756),a=(t(7294),t(3905)),s=(t(807),t(7134),t(3079),["components"]),o={id:"game9",title:"Implementation",sidebar_label:"Implementation",slug:"/dapp-game/implementation"},c=void 0,m={unversionedId:"dapp-game/game9",id:"dapp-game/game9",isDocsHomePage:!1,title:"Implementation",description:"Submit",source:"@site/docs/dapp-game/game9.md",sourceDirName:"dapp-game",slug:"/dapp-game/implementation",permalink:"/docs/dapp-game/implementation",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/dapp-game/game9.md",version:"current",frontMatter:{id:"game9",title:"Implementation",sidebar_label:"Implementation",slug:"/dapp-game/implementation"}},d=[{value:"Submit",id:"submit",children:[]},{value:"Decide",id:"decide",children:[]}],u={toc:d};function p(e){var n=e.components,t=(0,r.Z)(e,s);return(0,a.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"submit"},"Submit"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},'entry submit (packed_score : bytes, signed_score : signature) {\n  require {\n    c1 : state = InProgress;\n  }\n\n  effect {\n    if check_signature(oracle, signed_score, packed_score) then (\n      match_option unpack<address * nat>(packed_score) with\n      | some(s) ->\n        if (s[0] <> caller) then fail ("bad caller");\n        submission.addupdate(caller, {\n          score = s[1];\n          timestamp = now\n        })\n      | none -> fail("cannot unpack score")\n      end\n    ) else fail("not signed by oracle");\n  }\n}\n')),(0,a.kt)("h2",{id:"decide"},"Decide"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype"},"transition decide () {\n  called by organizer\n  from InProgress\n  to Done\n  with effect {\n    var submissions = submission.sort(desc(score), timestamp);\n      if submissions.count() >= 3\n      then (\n        var first  = submissions.nth(0);\n        var second = submissions.nth(1);\n        var third  = submissions.nth(2);\n        var q1 = 0.5 * prize;\n        var q2 = 0.3 * prize;\n        var q3 = 0.2 * prize;\n        transfer q1 to first;\n        transfer q2 to second;\n        transfer q3 to third;\n        transfer (prize - q1 - q2 - q3) to organizer)\n        else if (submissions.count() >= 2)\n             then (\n               var first  = submissions.nth(0);\n               var second = submissions.nth(1);\n               var q1 = 0.6 * prize;\n               var q2 = 0.4 * prize;\n               transfer q1 to first;\n               transfer q2 to second;\n               transfer (prize - q1 - q2) to organizer)\n             else if (submissions.count() >= 1)\n               then (\n                 var first = submissions.nth(0);\n                 transfer prize to first)\n               else transfer prize to organizer\n  }\n}\n")))}p.isMDXComponent=!0}}]);