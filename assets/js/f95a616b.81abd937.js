"use strict";(self.webpackChunkcompletium_landing=self.webpackChunkcompletium_landing||[]).push([[9990],{8215:function(n,e,t){var a=t(7294);e.Z=function(n){var e=n.children,t=n.hidden,r=n.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:r},e)}},6396:function(n,e,t){t.d(e,{Z:function(){return m}});var a=t(7462),r=t(7294),i=t(2389),l=t(9443);var d=function(){var n=(0,r.useContext)(l.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},o=t(1968),u=t(6010),s="tabItem_1uMI";function p(n){var e,t,a,i=n.lazy,l=n.block,p=n.defaultValue,m=n.values,P=n.groupId,c=n.className,N=r.Children.map(n.children,(function(n){if((0,r.isValidElement)(n)&&void 0!==n.props.value)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),D=null!=m?m:N.map((function(n){var e=n.props;return{value:e.value,label:e.label}})),I=(0,o.lx)(D,(function(n,e){return n.value===e.value}));if(I.length>0)throw new Error('Docusaurus error: Duplicate values "'+I.map((function(n){return n.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var A=null===p?p:null!=(e=null!=p?p:null==(t=N.find((function(n){return n.props.default})))?void 0:t.props.value)?e:null==(a=N[0])?void 0:a.props.value;if(null!==A&&!D.some((function(n){return n.value===A})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+A+'" but none of its children has the corresponding value. Available values are: '+D.map((function(n){return n.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=d(),k=b.tabGroupChoices,g=b.setTabGroupChoices,S=(0,r.useState)(A),R=S[0],U=S[1],f=[],h=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=P){var v=k[P];null!=v&&v!==R&&D.some((function(n){return n.value===v}))&&U(v)}var C=function(n){var e=n.currentTarget,t=f.indexOf(e),a=D[t].value;a!==R&&(h(e),U(a),null!=P&&g(P,a))},E=function(n){var e,t=null;switch(n.key){case"ArrowRight":var a=f.indexOf(n.currentTarget)+1;t=f[a]||f[0];break;case"ArrowLeft":var r=f.indexOf(n.currentTarget)-1;t=f[r]||f[f.length-1]}null==(e=t)||e.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":l},c)},D.map((function(n){var e=n.value,t=n.label;return r.createElement("li",{role:"tab",tabIndex:R===e?0:-1,"aria-selected":R===e,className:(0,u.Z)("tabs__item",s,{"tabs__item--active":R===e}),key:e,ref:function(n){return f.push(n)},onKeyDown:E,onFocus:C,onClick:C},null!=t?t:e)}))),i?(0,r.cloneElement)(N.filter((function(n){return n.props.value===R}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},N.map((function(n,e){return(0,r.cloneElement)(n,{key:e,hidden:n.props.value!==R})}))))}function m(n){var e=(0,i.Z)();return r.createElement(p,(0,a.Z)({key:String(e)},n))}},3430:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return m},toc:function(){return P},default:function(){return N}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),l=t(9960),d=t(6396),o=t(8215),u=["components"],s={id:"template6",title:"Zero-Coupon bond",sidebar_label:"Zero-Coupon bond",slug:"/templates/zcb"},p=void 0,m={unversionedId:"templates/template6",id:"templates/template6",title:"Zero-Coupon bond",description:"Introduction",source:"@site/docs/templates/template6.md",sourceDirName:"templates",slug:"/templates/zcb",permalink:"/docs/templates/zcb",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template6.md",tags:[],version:"current",frontMatter:{id:"template6",title:"Zero-Coupon bond",sidebar_label:"Zero-Coupon bond",slug:"/templates/zcb"},sidebar:"templates",previous:{title:"FA 2",permalink:"/docs/templates/nft"},next:{title:"DEX",permalink:"/docs/templates/dex"}},P=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[],level:3},{value:"Entrypoints",id:"entrypoints",children:[],level:3}],level:2},{value:"Code",id:"code",children:[],level:2}],c={toc:P};function N(n){var e=n.components,t=(0,r.Z)(n,u);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{href:"https://en.wikipedia.org/wiki/Zero-coupon_bond",target:"_blank"},"Zero-Coupon")," bond is a bond in which the face value is repaid some predefined time after it has been released (maturity time)."),(0,i.kt)("p",null,"In this contract, the present value of the bond (value at which the bond is traded) is computed as the face value (value at which the bond is redeemed at maturity time) minus a discount percent of face value."),(0,i.kt)("p",null,"A detailed presentation of the process is available in the ",(0,i.kt)(l.Z,{to:"/docs/dapp-zcb/",mdxType:"Link"},"Zero-Coupon Bond")," DApp example."),(0,i.kt)("h2",{id:"api"},"API"),(0,i.kt)("h3",{id:"storage"},"Storage"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"issuer")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"address")),(0,i.kt)("td",{parentName:"tr",align:null},"Bond issuer's address.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"subscriber")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"address")),(0,i.kt)("td",{parentName:"tr",align:null},"Bond subscriber's address.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"facevalue")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tez")),(0,i.kt)("td",{parentName:"tr",align:null},"Value at which the bond is redeemed at maturity time.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"discout")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"rational")),(0,i.kt)("td",{parentName:"tr",align:null},"Discount applied to ",(0,i.kt)("inlineCode",{parentName:"td"},"facevalue")," to compute present value (at emission)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"maturityduration")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"duration")),(0,i.kt)("td",{parentName:"tr",align:null},"Duration before maturity time.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"paybackduration")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"duration")),(0,i.kt)("td",{parentName:"tr",align:null},"Duration of payback period after maturity date")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"issuersigned")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"bool")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")," is issuer has signed, ",(0,i.kt)("inlineCode",{parentName:"td"},"false")," otherwise.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"subscribersigned")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"bool")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")," is subscriber has signed, ",(0,i.kt)("inlineCode",{parentName:"td"},"false")," otherwise.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"_state")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"states")),(0,i.kt)("td",{parentName:"tr",align:null},"One of ",(0,i.kt)("inlineCode",{parentName:"td"},"Created"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"Signed"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"Terminated"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"Disputed"))))),(0,i.kt)("h3",{id:"entrypoints"},"Entrypoints"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"toSigned")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Called by ",(0,i.kt)("inlineCode",{parentName:"td"},"sign")," to set contract's state to ",(0,i.kt)("inlineCode",{parentName:"td"},"Signed"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"sign")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Called by ",(0,i.kt)("inlineCode",{parentName:"td"},"issuer")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"subscriber"),". ",(0,i.kt)("inlineCode",{parentName:"td"},"subscriber")," must transfer the present value to the contract.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"terminate")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Called by ",(0,i.kt)("inlineCode",{parentName:"td"},"issuer")," during payback period, to transfer the face value to ",(0,i.kt)("inlineCode",{parentName:"td"},"subscriber"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"dispute")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Called by ",(0,i.kt)("inlineCode",{parentName:"td"},"subscriber")," if ",(0,i.kt)("inlineCode",{parentName:"td"},"issuer")," has not terminated the contract in the payback period.")))),(0,i.kt)("h2",{id:"code"},"Code"),(0,i.kt)(d.Z,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"archetype",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="zcb.arl"',title:'"zcb.arl"'},'archetype zero_coupon_bond (\n  issuer : address,\n  subscriber : address,\n  facevalue : tez,\n  discount : rational,\n  maturityduration : duration,\n  paybackduration  : duration,\n  issuersigned : bool,\n  subscribersigned : bool\n)\n\nvariable signaturedate    : option<date> = none\n\nstates =\n  | Created initial\n  | Signed\n  | Terminated\n  | Disputed\n\ntransition toSigned() {\n  called by selfaddress\n  from Created to Signed with effect {\n    signaturedate := some(now)\n  }\n}\n\nentry sign () {\n  if caller = issuer then\n    issuersigned := true\n  else if caller = subscriber then begin\n    subscribersigned := true;\n    var presentvalue = discount * facevalue;\n    dorequire(transferred >= presentvalue, "SUBSCRIBER_INVALID_TRANSFERRED");\n    transfer presentvalue to issuer;\n  end\n  else fail("CALLER_NOT_A_SIGNER");\n  if issuersigned and subscribersigned then\n    transfer 0tz to entry self.toSigned();\n}\n\ntransition terminate () {\n  called by issuer\n  from Signed to Terminated when {\n    match signaturedate with\n    | some(d) ->\n      d + maturityduration <=  now <= d + maturityduration + paybackduration and\n      transferred >= facevalue\n    | none -> false\n    end\n  } with effect {\n    transfer facevalue to subscriber\n  }\n}\n\ntransition dispute () {\n  called by subscriber\n  from Signed to Disputed when {\n    match signaturedate with\n    | some(d) ->\n      d + maturityduration + paybackduration <=  now\n    | none -> false\n    end\n  }\n}\n'))),(0,i.kt)(o.Z,{value:"michelson",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'# (Pair issuer (Pair subscriber (Pair facevalue (Pair discount (Pair maturityduration (Pair paybackduration (Pair issuersigned (Pair subscribersigned (Pair None 0)))))))))\n{\n  storage (pair (address %issuer) (pair (address %subscriber) (pair (mutez %facevalue) (pair (pair %discount int nat) (pair (int %maturityduration) (pair (int %paybackduration) (pair (bool %issuersigned) (pair (bool %subscribersigned) (pair (option %signaturedate timestamp) (nat %_state))))))))));\n  parameter (or (unit %toSigned) (or (unit %sign) (or (unit %terminate) (unit %dispute))));\n  code { NIL operation;\n         DIG 1;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { DROP;\n             SELF;\n             ADDRESS;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             DUP;\n             DUP;\n             PUSH nat 0;\n             COMPARE;\n             EQ;\n             IF\n               { NOW;\n                 SOME;\n                 DIP { DIG 2; DROP };\n                 DUG 2;\n                 PUSH nat 1;\n                 DIP { DIG 1; DROP };\n                 DUG 1 }\n               { PUSH string "InvalidState";\n                 FAILWITH };\n             DROP;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { DROP;\n                 DIG 9;\n                 DUP;\n                 DUG 10;\n                 SENDER;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { PUSH bool True;\n                     DIP { DIG 3; DROP };\n                     DUG 3 }\n                   { DIG 8;\n                     DUP;\n                     DUG 9;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { PUSH bool True;\n                         DIP { DIG 2; DROP };\n                         DUG 2;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         DUP;\n                         AMOUNT;\n                         COMPARE;\n                         GE;\n                         NOT;\n                         IF\n                           { PUSH string "SUBSCRIBER_INVALID_TRANSFERRED";\n                             FAILWITH }\n                           {  };\n                         DIG 11;\n                         DUP;\n                         DUG 12;\n                         DIG 11;\n                         DUP;\n                         DUG 12;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 11; DROP };\n                         DUG 11;\n                         DROP }\n                       { PUSH string "CALLER_NOT_A_SIGNER";\n                         FAILWITH } };\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 AND;\n                 IF\n                   { DIG 10;\n                     DUP;\n                     DUG 11;\n                     SELF;\n                     ADDRESS;\n                     CONTRACT %toSigned unit;\n                     IF_NONE\n                       { PUSH string "BadContract";\n                         FAILWITH }\n                       {  };\n                     PUSH mutez 0;\n                     UNIT;\n                     TRANSFER_TOKENS;\n                     CONS;\n                     DIP { DIG 10; DROP };\n                     DUG 10 }\n                   {  };\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { IF_LEFT\n                   { DROP;\n                     DIG 9;\n                     DUP;\n                     DUG 10;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCaller";\n                         FAILWITH }\n                       {  };\n                     DUP;\n                     DUP;\n                     PUSH nat 1;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { DIG 2;\n                         DUP;\n                         DUG 3;\n                         IF_NONE\n                           { PUSH bool False }\n                           { DIG 9;\n                             DUP;\n                             DUG 10;\n                             AMOUNT;\n                             COMPARE;\n                             GE;\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             ADD;\n                             ADD;\n                             NOW;\n                             COMPARE;\n                             LE;\n                             NOW;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             ADD;\n                             COMPARE;\n                             LE;\n                             AND;\n                             AND;\n                             SWAP;\n                             DROP };\n                         IF\n                           { DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             CONTRACT unit;\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             UNIT;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 11; DROP };\n                             DUG 11;\n                             PUSH nat 2;\n                             DIP { DIG 1; DROP };\n                             DUG 1 }\n                           {  } }\n                       { PUSH string "InvalidState";\n                         FAILWITH };\n                     DROP;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR }\n                   { DROP;\n                     DIG 8;\n                     DUP;\n                     DUG 9;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCaller";\n                         FAILWITH }\n                       {  };\n                     DUP;\n                     DUP;\n                     PUSH nat 1;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { DIG 2;\n                         DUP;\n                         DUG 3;\n                         IF_NONE\n                           { PUSH bool False }\n                           { NOW;\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             ADD;\n                             ADD;\n                             COMPARE;\n                             LE;\n                             SWAP;\n                             DROP };\n                         IF\n                           { PUSH nat 3;\n                             DIP { DIG 1; DROP };\n                             DUG 1 }\n                           {  } }\n                       { PUSH string "InvalidState";\n                         FAILWITH };\n                     DROP;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR } } } };\n}\n')))))}N.isMDXComponent=!0}}]);