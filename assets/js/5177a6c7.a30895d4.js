(self.webpackChunkcompletium_landing=self.webpackChunkcompletium_landing||[]).push([[832],{9286:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return d},toc:function(){return s},default:function(){return u}});var a=n(2122),r=n(9756),l=(n(7294),n(3905)),i=(n(6742),["components"]),o={id:"template17",title:"Multisig",sidebar_label:"Multisig",slug:"/templates/multisig"},p=void 0,d={unversionedId:"templates/template17",id:"templates/template17",isDocsHomePage:!1,title:"Multisig",description:"This generic-purpose multi-signature contract is used to execute operations (transfer, contract entrypoints) that have been approved by a required number of managers.",source:"@site/docs/templates/template17.md",sourceDirName:"templates",slug:"/templates/multisig",permalink:"/docs/templates/multisig",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template17.md",version:"current",frontMatter:{id:"template17",title:"Multisig",sidebar_label:"Multisig",slug:"/templates/multisig"},sidebar:"templates",previous:{title:"Health care",permalink:"/docs/templates/healthcare"},next:{title:"Raffle",permalink:"/docs/templates/raffle"}},s=[{value:"Propose",id:"propose",children:[{value:"Calling one entrypoint",id:"calling-one-entrypoint",children:[]},{value:"Michelson types and values",id:"michelson-types-and-values",children:[]}]},{value:"State Machine",id:"state-machine",children:[{value:"Transitions",id:"transitions",children:[]}]},{value:"Number of required managers",id:"number-of-required-managers",children:[]},{value:"Feeless",id:"feeless",children:[{value:"Data to sign",id:"data-to-sign",children:[]}]},{value:"Storage",id:"storage",children:[]},{value:"API",id:"api",children:[]},{value:"Example usage scenario",id:"example-usage-scenario",children:[]},{value:"Code",id:"code",children:[]}],m={toc:s};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This generic-purpose multi-signature contract is used to execute operations (transfer, contract entrypoints) that have been approved by a required number of managers."),(0,l.kt)("p",null,"The process is three steps:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("em",{parentName:"strong"},"propose"))," : a manager proposes a list of operations to execute"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("em",{parentName:"strong"},"approve"))," : managers may approve the proposal"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("em",{parentName:"strong"},"execute"))," : operations may be executed (by anyone) when the required number of approvals has been reached")),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"The source code and unitary tests are available in this ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/completium/archetype-multisig"},"repository"),"."))),(0,l.kt)("h2",{id:"propose"},"Propose"),(0,l.kt)("p",null,"A proposal is made of a list of operations materialised as a lambda value of type ",(0,l.kt)("inlineCode",{parentName:"p"},"lambda unit (list operation)"),", that is a function with no argument that returns a list of operations."),(0,l.kt)("p",null,"A lambda value is an anonymous function that can be stored, passed as an argument to a function or an entry point, and executed programmatically."),(0,l.kt)("p",null,"Passing a lambda value rather than a list of operations is necessary because, in Michleson, there is no literal for operations (for security reason); operations are only obtained with the ",(0,l.kt)("em",{parentName:"p"},"transfer")," instruction."),(0,l.kt)("p",null,"A proposal also has a ",(0,l.kt)("em",{parentName:"p"},"validity")," duration; it cannot be executed beyond the expiration date, which is the date of proposal plus the validity duration."),(0,l.kt)("h3",{id:"calling-one-entrypoint"},"Calling one entrypoint"),(0,l.kt)("p",null,"The lambda value that returns the list of one operation which calls an entrypoint of a contract is presented here:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  DROP;                                    # drops the Unit argument\n  NIL operation;                           # stacks the empty operation list\n  PUSH address "${contract_address}";      # stacks the contract address\n  CONTRACT %${entrypoint_name} ${type};    # creates an option of contract\'s entrypoint (from address)\n  IF_NONE                                  # if contract address or entry not found\n    { PUSH string "EntryNotFound";         # stacks error message\n      FAILWITH }                           # fails\n    {  };\n  PUSH mutez 0;                            # stacks number of tez to send contract\n  PUSH ${type} ${value};                   # stacks entrypoint argument\n  TRANSFER_TOKENS;                         # generates operation\n  CONS;                                    # adds it to the empty operation list\n}\n')),(0,l.kt)("p",null,"where:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"contract_address")," is the address of the contract to call"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"entrypoint_name")," is the name of the entrypoint to execute"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"type")," is the type of the argument"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"value")," is the value to pass to the entrypoint")),(0,l.kt)("p",null,"NB : these values must be set in the lambda value."),(0,l.kt)("h3",{id:"michelson-types-and-values"},"Michelson types and values"),(0,l.kt)("p",null,"The table below presents the Michelson syntax for the main types and corresponding value examples to pass to the entrypoint, as well as the Archetype types:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Archetype type"),(0,l.kt)("th",{parentName:"tr",align:null},"Michelson type"),(0,l.kt)("th",{parentName:"tr",align:null},"Michelson value example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"False"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nat")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nat")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"2022"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-42"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"Hello multisig"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"address")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"address")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"tz1hyc1CRQpjskJUUaGrh85UZXPi6kU4JuGd"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bytes")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bytes")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"0x000001"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"option<TYPE>")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"option TYPE")),(0,l.kt)("td",{parentName:"tr",align:null},"example of ",(0,l.kt)("inlineCode",{parentName:"td"},"option nat"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"None"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"Some 42"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"list<TYPE>")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"list TYPE")),(0,l.kt)("td",{parentName:"tr",align:null},"example of ",(0,l.kt)("inlineCode",{parentName:"td"},"list nat"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"{ 42; 5567; 756786 }"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"(TYPE1 * TYPE2)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"pair TYPE1 TYPE2")),(0,l.kt)("td",{parentName:"tr",align:null},"example of ",(0,l.kt)("inlineCode",{parentName:"td"},"pair nat string"),": ",(0,l.kt)("inlineCode",{parentName:"td"},'Pair 45 "Hello"'))))),(0,l.kt)("h2",{id:"state-machine"},"State Machine"),(0,l.kt)("p",null,"The contract has 3 states :"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"State"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Starting"),(0,l.kt)("td",{parentName:"tr",align:null},"Initial state. The declared owner sets the parameters of the contract (add/remove manager, number of required approval, ...). No proposal can be submitted.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Running"),(0,l.kt)("td",{parentName:"tr",align:null},"Contract ownership is transferred to the contract itself (",(0,l.kt)("inlineCode",{parentName:"td"},"owner = selfaddress"),"). The Propose/approve/execute process is operational.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Paused"),(0,l.kt)("td",{parentName:"tr",align:null},"No proposal can be submitted.")))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Note that in ",(0,l.kt)("inlineCode",{parentName:"p"},"Running")," state, the owner of the contract is the contract itself. This implies that changes in the contract parameters must follow the propose/approve/execute process (including pausing the contract).")),(0,l.kt)("h3",{id:"transitions"},"Transitions"),(0,l.kt)("p",null,"The table below presents the entrypoints to go from one state to another"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"From"),(0,l.kt)("th",{parentName:"tr",align:null},"To"),(0,l.kt)("th",{parentName:"tr",align:null},"entrypoint"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Starting"),(0,l.kt)("td",{parentName:"tr",align:null},"Running"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"run"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Running"),(0,l.kt)("td",{parentName:"tr",align:null},"Paused"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"pause"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Paused"),(0,l.kt)("td",{parentName:"tr",align:null},"Running"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"unpause"))))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"unpause")," mechanism uses its own approval mechanism: the required number of manager needs to call entrypoint ",(0,l.kt)("inlineCode",{parentName:"p"},"approve_unpause")," for the ",(0,l.kt)("inlineCode",{parentName:"p"},"unpause")," entrypoint to be executable.")),(0,l.kt)("h2",{id:"number-of-required-managers"},"Number of required managers"),(0,l.kt)("p",null,"The best practice to setup the multisig process is that the maximum value for the ",(0,l.kt)("inlineCode",{parentName:"p"},"required")," data (number of required managers to execute the operations) is the ",(0,l.kt)("em",{parentName:"p"},"number of registered managers minus 1"),"."),(0,l.kt)("p",null,"This rule is coded in the contract in the execution condition ",(0,l.kt)("inlineCode",{parentName:"p"},"r7")," of the ",(0,l.kt)("inlineCode",{parentName:"p"},"require")," entrypoint:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-archetype"},"entry %require(new_required : nat) {\n  called by owner\n  state is Running\n  require {\n    r7 : 0 < new_required < manager.count()\n  }\n  effect {\n    required := new_required\n  }\n}\n")),(0,l.kt)("p",null,"This is for security reason: if one of the manager's private key is compromised, it is necessary to have one extra manager to vote for the removal of the compromised manager."),(0,l.kt)("p",null,"The extra manager may typically be the initial owner of the contract."),(0,l.kt)("h2",{id:"feeless"},"Feeless"),(0,l.kt)("p",null,"The contract provides with (one step) feeless process for proposal and approval, respectively with the entrypoints ",(0,l.kt)("inlineCode",{parentName:"p"},"propose_feeless")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"approve_feeless"),"."),(0,l.kt)("p",null,"The feeless approach splits the process in two:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the manager signs the required data to propose or approve"),(0,l.kt)("li",{parentName:"ul"},'an "injector" can then call the feeless entries with the signed data')),(0,l.kt)("p",null," The benefit is that managers do not pay the blockchain fee. Hence managers are not required to have tez, nor to have a revealed address on the blockchain; they are just required to be able to sign with a wallet."),(0,l.kt)("p",null," The injector is the one paying the fee to the blockchain. It is typically a backend process."),(0,l.kt)("h3",{id:"data-to-sign"},"Data to sign"),(0,l.kt)("p",null," The table below presents the data to sign for each feeless entrypoint:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Entrypoint"),(0,l.kt)("th",{parentName:"tr",align:null},"Michelson data type"),(0,l.kt)("th",{parentName:"tr",align:null},"Michelson value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"propose_feeless")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"pair address (pair nat (pair string (pair (lambda unit (list operation)) nat)))")),(0,l.kt)("td",{parentName:"tr",align:null},"Tuple of:",(0,l.kt)("ul",null,(0,l.kt)("li",null,"manager address (public key hash)"),(0,l.kt)("li",null,"manager counter"),(0,l.kt)("li",null,(0,l.kt)("inlineCode",{parentName:"td"},'"propose"')),(0,l.kt)("li",null,"lambda value"),(0,l.kt)("li",null,"validity duration (before expiration)")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"approve_feeless")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"pair address (pair nat (pair string nat))")),(0,l.kt)("td",{parentName:"tr",align:null},"Tuple of: ",(0,l.kt)("ul",null,(0,l.kt)("li",null,"manager address (public key hash)"),(0,l.kt)("li",null,"manager counter"),(0,l.kt)("li",null,(0,l.kt)("inlineCode",{parentName:"td"},'"approve"')),(0,l.kt)("li",null,"validity duration (before expiration)")))))),(0,l.kt)("p",null," Each manager is associated to a counter that is incremented by the contract each time a feeless entry is called. This is a security feature to prevent from replay attack (so that one cannot use the signed data twice)."),(0,l.kt)("h2",{id:"storage"},"Storage"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Element"),(0,l.kt)("th",{parentName:"tr",align:null},"Michelson type"),(0,l.kt)("th",{parentName:"tr",align:null},"Desc."))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"owner")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"address")),(0,l.kt)("td",{parentName:"tr",align:null},"Contract's owner address.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nat")),(0,l.kt)("td",{parentName:"tr",align:null},"Minimum number of approvals to execute operations.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"min_duration")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nat")),(0,l.kt)("td",{parentName:"tr",align:null},"Minimum validity duration of a proposal.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"max_duration")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nat")),(0,l.kt)("td",{parentName:"tr",align:null},"Maximum validity duration of a proposal.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"id_count")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nat")),(0,l.kt)("td",{parentName:"tr",align:null},"Id of next proposal.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"manager")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"map address nat")),(0,l.kt)("td",{parentName:"tr",align:null},"Map of managers; a manager is associated to a counter (security data for feeless process).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"proposal")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"map nat (pair nat (pair (set address) (lambda Unit (list operation))))")),(0,l.kt)("td",{parentName:"tr",align:null},"Map of proposals; a proposal is associated to: ",(0,l.kt)("ul",null,(0,l.kt)("li",null,"expiration date"),(0,l.kt)("li",null,"set of approvers"),(0,l.kt)("li",null,"list of operations (as a lambda)")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"owner_candidate")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"option address")),(0,l.kt)("td",{parentName:"tr",align:null},"Optional address of owner candidate.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"approve_unpause_set")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"set address")),(0,l.kt)("td",{parentName:"tr",align:null},"Set of addresses that approve unpausing the contract.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_state")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nat")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("ul",null,(0,l.kt)("li",null,(0,l.kt)("inlineCode",{parentName:"td"},"O")," : Starting"),(0,l.kt)("li",null,(0,l.kt)("inlineCode",{parentName:"td"},"1")," : Running"),(0,l.kt)("li",null,(0,l.kt)("inlineCode",{parentName:"td"},"2")," : Paused")))))),(0,l.kt)("h2",{id:"api"},"API"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Entrypoint"),(0,l.kt)("th",{parentName:"tr",align:null},"Called by"),(0,l.kt)("th",{parentName:"tr",align:null},"Argument Michelson type"),(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Desc."))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"declare_ownership")),(0,l.kt)("td",{parentName:"tr",align:null},"Owner"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"address")),(0,l.kt)("td",{parentName:"tr",align:null},"Candidate address for new owner."),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"accept_ownership")),(0,l.kt)("td",{parentName:"tr",align:null},"Owner candidate"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"address")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"Owner is now caller.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"set_metadata_uri")),(0,l.kt)("td",{parentName:"tr",align:null},"Owner"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bytes")),(0,l.kt)("td",{parentName:"tr",align:null},"metadata"),(0,l.kt)("td",{parentName:"tr",align:null},"See ",(0,l.kt)("a",{parentName:"td",href:"https://gitlab.com/tezos/tzip/-/blob/master/proposals/tzip-16/tzip-16.md"},"TZIP-16"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"pause")),(0,l.kt)("td",{parentName:"tr",align:null},"Owner"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"approve_unpause")),(0,l.kt)("td",{parentName:"tr",align:null},"Manager"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"unpause")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"any")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"control")),(0,l.kt)("td",{parentName:"tr",align:null},"Owner"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"pair address bool")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("ul",null,(0,l.kt)("li",null,"manager address"),(0,l.kt)("li",null,(0,l.kt)("inlineCode",{parentName:"td"},"True")," to add, ",(0,l.kt)("inlineCode",{parentName:"td"},"False")," to remove"))),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"run")),(0,l.kt)("td",{parentName:"tr",align:null},"Owner"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"Transfers ownership to contract and set state to ",(0,l.kt)("inlineCode",{parentName:"td"},"Running"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"require")),(0,l.kt)("td",{parentName:"tr",align:null},"Owner"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nat")),(0,l.kt)("td",{parentName:"tr",align:null},"new ",(0,l.kt)("inlineCode",{parentName:"td"},"required")," value"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"set_duration")),(0,l.kt)("td",{parentName:"tr",align:null},"Owner"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"pair nat nat")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("ul",null,(0,l.kt)("li",null,"minimum validity duration"),(0,l.kt)("li",null,"maximum validity duration"))),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"propose")),(0,l.kt)("td",{parentName:"tr",align:null},"Manager"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"pair (lambda Unit (list operation)) (pair nat bool))")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("ul",null,(0,l.kt)("li",null,"lambda value for operations"),(0,l.kt)("li",null,"validity duration"),(0,l.kt)("li",null,"approved by calling manager"))),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"approve")),(0,l.kt)("td",{parentName:"tr",align:null},"Manager"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nat")),(0,l.kt)("td",{parentName:"tr",align:null},"proposal id"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"execute")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"any")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nat")),(0,l.kt)("td",{parentName:"tr",align:null},"proposal id"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"propose_feeless")),(0,l.kt)("td",{parentName:"tr",align:null},"Manager"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"pair (lambda Unit (list operation)) (pair nat (pair bool (pair signature key))))")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("ul",null,(0,l.kt)("li",null,"lambda value for operations"),(0,l.kt)("li",null,"validity duration"),(0,l.kt)("li",null,"approved by calling manager"),(0,l.kt)("li",null,"data signed by manager"),(0,l.kt)("li",null,"manager's public key"))),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"approve_feeless")),(0,l.kt)("td",{parentName:"tr",align:null},"Manager"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"pair nat (pair signature key)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("ul",null,(0,l.kt)("li",null,"proposal id"),(0,l.kt)("li",null,"data signed by manager"),(0,l.kt)("li",null,"manager's public key"))),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"get_manager_counter")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"any")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"address")),(0,l.kt)("td",{parentName:"tr",align:null},"manager address"),(0,l.kt)("td",{parentName:"tr",align:null},"view (TZIP4) to get the counter of a manager")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"get_approvals")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"any")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nat")),(0,l.kt)("td",{parentName:"tr",align:null},"proposal id"),(0,l.kt)("td",{parentName:"tr",align:null},"view (TZIP4) to get the set of managers that approved the proposal")))),(0,l.kt)("h2",{id:"example-usage-scenario"},"Example usage scenario"),(0,l.kt)("p",null,"The Usage scenario presented here has an owner and three managers:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Contract is deployed with parameters:",(0,l.kt)("ul",null,(0,l.kt)("li",null,"owner: (an address)"),(0,l.kt)("li",null,"required: ",(0,l.kt)("inlineCode",{parentName:"li"},"1")),(0,l.kt)("li",null,"min_duration: ",(0,l.kt)("inlineCode",{parentName:"li"},"3600")," (one hour)"),(0,l.kt)("li",null,"max_duration: ",(0,l.kt)("inlineCode",{parentName:"li"},"15552000")," (180 days)"))),(0,l.kt)("li",{parentName:"ul"},"Owner calls ",(0,l.kt)("inlineCode",{parentName:"li"},"control")," to add manager 1"),(0,l.kt)("li",{parentName:"ul"},"Owner calls ",(0,l.kt)("inlineCode",{parentName:"li"},"control")," to add manager 2"),(0,l.kt)("li",{parentName:"ul"},"Owner calls ",(0,l.kt)("inlineCode",{parentName:"li"},"control")," to add manager 3"),(0,l.kt)("li",{parentName:"ul"},"Owner calls ",(0,l.kt)("inlineCode",{parentName:"li"},"require")," to set required number of approvals to ",(0,l.kt)("inlineCode",{parentName:"li"},"2")),(0,l.kt)("li",{parentName:"ul"},"Owner calls ",(0,l.kt)("inlineCode",{parentName:"li"},"run"),"; it transfers the contract ownership to managers and sets the contract state to ",(0,l.kt)("inlineCode",{parentName:"li"},"Running")),(0,l.kt)("li",{parentName:"ul"},"Manager 1 calls ",(0,l.kt)("inlineCode",{parentName:"li"},"propose")," to propose an action (for example call another contract)"),(0,l.kt)("li",{parentName:"ul"},"Manager 2 calls ",(0,l.kt)("inlineCode",{parentName:"li"},"approve")," to approve it (with proposal id ",(0,l.kt)("inlineCode",{parentName:"li"},"0"),")"),(0,l.kt)("li",{parentName:"ul"},"Manager 3 calls ",(0,l.kt)("inlineCode",{parentName:"li"},"approve")," to approve it (with proposal id ",(0,l.kt)("inlineCode",{parentName:"li"},"0"),")"),(0,l.kt)("li",{parentName:"ul"},"Owner calls ",(0,l.kt)("inlineCode",{parentName:"li"},"execute")," with proposal id ",(0,l.kt)("inlineCode",{parentName:"li"},"0")," to execute the proposed action"),(0,l.kt)("li",{parentName:"ul"},"Manager 2 calls ",(0,l.kt)("inlineCode",{parentName:"li"},"propose")," to pause the contract"),(0,l.kt)("li",{parentName:"ul"},"Manager 1 calls ",(0,l.kt)("inlineCode",{parentName:"li"},"approve")," (with proposal id ",(0,l.kt)("inlineCode",{parentName:"li"},"1"),")"),(0,l.kt)("li",{parentName:"ul"},"Owner calls ",(0,l.kt)("inlineCode",{parentName:"li"},"execute")," with proposal id ",(0,l.kt)("inlineCode",{parentName:"li"},"1"),"; as a result contract is paused"),(0,l.kt)("li",{parentName:"ul"},"Manager 3 calls ",(0,l.kt)("inlineCode",{parentName:"li"},"approve_unpause")),(0,l.kt)("li",{parentName:"ul"},"Manager 2 calls ",(0,l.kt)("inlineCode",{parentName:"li"},"approve_unpause")),(0,l.kt)("li",{parentName:"ul"},"Owner calls ",(0,l.kt)("inlineCode",{parentName:"li"},"unpause")),(0,l.kt)("li",{parentName:"ul"},"...")),(0,l.kt)("h2",{id:"code"},"Code"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-archetype"},'/**\n * Generic multisig contract\n */\narchetype multisig(\n  owner        : address,\n  required     : nat,\n  max_duration : duration,\n  min_duration : duration\n)\n\n//----------------------------------------------------------------------------\n// Errors\n//----------------------------------------------------------------------------\n\nconstant EXPIRED_PROPOSAL    : string = "EXPIRED_PROPOSAL"\nconstant NOT_APPROVED        : string = "NOT_APPROVED"\nconstant INVALID_SIGNATURE   : string = "INVALID_SIGNATURE"\nconstant WRONG_DURATION      : string = "WRONG_DURATION"\nconstant CONTRACT_PAUSED     : string = "CONTRACT_PAUSED"\nconstant CONTRACT_NOT_PAUSED : string = "CONTRACT_NOT_PAUSED"\n\n//----------------------------------------------------------------------------\n// Assets\n//----------------------------------------------------------------------------\n\nvariable id_count : nat = 0\nasset manager {\n  addr    : address;\n  counter : nat = 0  // protects from double-spending attack\n}\n\nasset pending to big_map {\n  id         : nat;\n  expiration : date;\n  approvals  : set<address>;\n  actions    : lambda<unit, list<operation>>;\n}\n\n//----------------------------------------------------------------------------\n// States\n//----------------------------------------------------------------------------\n\nstates =\n| Starting initial\n| Running\n| Paused\n\n//----------------------------------------------------------------------------\n// Owner role transfer\n//----------------------------------------------------------------------------\n\nvariable owner_candidate : option<address> = none\n\nentry declare_ownership(candidate : address) {\n  called by owner\n  effect {\n    owner_candidate := some(candidate);\n  }\n}\n\nentry claim_ownership() {\n  called by opt_get(owner_candidate)\n  effect {\n    owner := opt_get(owner_candidate);\n    owner_candidate := none\n  }\n}\n\n//----------------------------------------------------------------------------\n// Metadata\n//----------------------------------------------------------------------------\n\nentry set_metadata_uri(idata : bytes) {\n  called by owner\n  effect {\n    metadata := put(metadata, "", idata)\n  }\n}\n\n//----------------------------------------------------------------------------\n// Contract execution pause/resume\n//----------------------------------------------------------------------------\n\ntransition pause() {\n  called by owner\n  from Running to Paused\n}\n\nvariable approve_unpause_set : set<address> = []\n\nentry approve_unpause () {\n  called by manager\n  state is Paused\n  effect {\n    approve_unpause_set.add(caller)\n  }\n}\n\ntransition unpause() {\n  from Paused to Running\n  when { approve_unpause_set.length() >= required }\n  with effect {\n    approve_unpause_set := []\n  }\n}\n\n//----------------------------------------------------------------------------\n// Control entry to add / remove a manager\n// May be called in Starting or Running states\n//----------------------------------------------------------------------------\n\nentry control(maddr : address, allowed : bool) {\n  called by owner\n  //state is Starting or Running\n  require {\n    r4 : allowed <> manager.contains(maddr);\n  }\n  effect {\n    if allowed then\n      manager.add({ addr = maddr })\n    else\n      manager.remove(maddr)\n  }\n}\n\n//----------------------------------------------------------------------------\n// Transition to Running state\n// owner becomes selfaddress\n//----------------------------------------------------------------------------\n\ntransition run() {\n  called by owner\n  require {\n    r0 : manager.count() > required\n  }\n  from Starting to Running\n  with effect {\n    owner := selfaddress\n  }\n}\n\n//----------------------------------------------------------------------------\n// Set parameters in Running state\n//----------------------------------------------------------------------------\n\nentry %require(new_required : nat) {\n  called by owner\n  state is Running\n  require {\n    r7 : 0 < new_required < manager.count()\n  }\n  effect {\n    required := new_required\n  }\n}\n\nentry set_duration(min : duration, max : duration) {\n  called by owner\n  state is Running\n  effect {\n    min_duration := min;\n    max_duration := max;\n  }\n}\n\n//----------------------------------------------------------------------------\n// propose, approve, execute\n//----------------------------------------------------------------------------\n\nentry propose(\n  actions_to_exec : lambda<unit, list<operation>>,\n  validity : duration,\n  approved_by_caller : bool) {\n  called by manager\n  state is Running\n  require {\n    r3 : min_duration <= validity <= max_duration otherwise WRONG_DURATION\n  }\n  effect {\n    var init_approvals : set<address> = [];\n    if approved_by_caller then\n      init_approvals.add(caller);\n    pending.add({\n      id_count;\n      (now + validity);\n      init_approvals;\n      actions_to_exec\n    });\n    id_count += 1;\n  }\n}\n\nentry approve(proposal_id : nat) {\n  called by manager\n  state is Running\n  effect {\n    if pending[proposal_id].expiration < now then\n      pending.remove(proposal_id)\n    else\n      pending[proposal_id].approvals.add(caller)\n  }\n}\n\nentry execute(proposal_id : nat) {\n  state is Running\n  require {\n    r1 : pending[proposal_id].expiration >= now otherwise EXPIRED_PROPOSAL;\n    r2 : length(pending[proposal_id].approvals) >= required otherwise NOT_APPROVED\n  }\n  effect {\n    operations := exec_lambda(pending[proposal_id].actions, Unit);\n    pending.remove(proposal_id)\n  }\n}\n\n//----------------------------------------------------------------------------\n// Fee-less process\n//----------------------------------------------------------------------------\n\nentry propose_feeless(\n  actions_to_exec : lambda<unit, list<operation>>,\n  validity : duration,\n  approved_by_caller : bool,\n  manager_key : key,\n  sig : signature) {\n  state is Running\n  require {\n    r8 : min_duration <= validity <= max_duration otherwise WRONG_DURATION\n  }\n  effect {\n    var pkh = key_address(manager_key);\n    dorequire(check_signature(manager_key, sig, pack((pkh, manager[pkh].counter, "propose", actions_to_exec, expiration_duration))), INVALID_SIGNATURE);\n    var init_approvals : set<address> = [];\n    if approved_by_caller then\n      init_approvals.add(caller);\n    pending.add({\n      id_count;\n      (now + validity);\n      init_approvals;\n      actions_to_exec\n    });\n    id_count += 1;\n  }\n}\n\nentry approve_feeless(proposal_id : nat, manager_key : key, sig : signature) {\n  state is Running\n  effect {\n    var pkh = key_address(manager_key);\n    dorequire(check_signature(manager_key, sig, pack((pkh, manager[pkh].counter, "approve", proposal_id))), INVALID_SIGNATURE);\n    manager[pkh].counter += 1;\n    if pending[proposal_id].expiration < now then\n      pending.remove(proposal_id)\n    else\n      pending[proposal_id].approvals.add(pkh)\n  }\n}\n\n//----------------------------------------------------------------------------\n// Getters (aka TZIP4 view)\n//----------------------------------------------------------------------------\n\ngetter get_manager_counter(pkh : address) : nat {\n  return (if manager.contains(pkh) then manager[pkh].counter else 0)\n}\n\ngetter get_approvals(proposal_id : nat) : set<address> {\n  var empty : set<address> = [];\n  return (if pending.contains(proposal_id) then pending[proposal_id].approvals else empty)\n}\n')))}u.isMDXComponent=!0}}]);