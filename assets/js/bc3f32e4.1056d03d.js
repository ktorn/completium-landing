(window.webpackJsonp=window.webpackJsonp||[]).push([[126],{193:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return d})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return o})),a.d(t,"default",(function(){return p}));var n=a(3),r=(a(0),a(238));const d={id:"dex11",title:"Interface",sidebar_label:"Interface",slug:"/dapp-dex/fa12interface"},l={unversionedId:"dapp-dex/dex11",id:"dapp-dex/dex11",isDocsHomePage:!1,title:"Interface",description:"Storage",source:"@site/docs/dapp-dex/dex11.md",slug:"/dapp-dex/fa12interface",permalink:"/docs/dapp-dex/fa12interface",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/dapp-dex/dex11.md",version:"current",sidebar_label:"Interface"},o=[{value:"Storage",id:"storage",children:[]},{value:"Entry points",id:"entry-points",children:[{value:"Transfer",id:"transfer",children:[]},{value:"Approve",id:"approve",children:[]},{value:"Get balance",id:"get-balance",children:[]},{value:"Get allowance",id:"get-allowance",children:[]},{value:"Get total supply",id:"get-total-supply",children:[]}]}],c={toc:o};function p({components:e,...t}){return Object(r.b)("wrapper",Object(n.a)({},c,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"storage"},"Storage"),Object(r.b)("p",null,"The contract declares two ",Object(r.b)("a",{parentName:"p",href:"https://docs.archetype-lang.org/archetype-language/data-model"},"assets"),":"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-archetype"},"asset ledger identified by holder to big_map {\n  holder     : address;\n  tokens     : nat = 0;\n} initialized by {\n  { holder = caller; tokens = totalsupply }\n}\n")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"ledger")," asset is the cap table: it holds the number of tokens for each token holder.\n",Object(r.b)("inlineCode",{parentName:"p"},"totalsupply")," is the initial number of tokens held by the originator of the contract."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-archetype"},"asset allowance identified by addr_owner addr_spender to big_map {\n  addr_owner       : address;\n  addr_spender     : address;\n  amount           : nat;\n}\n")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"allowance")," asset stores the amount of tokens that can be spent by ",Object(r.b)("inlineCode",{parentName:"p"},"addr_spender")," on the behalf of ",Object(r.b)("inlineCode",{parentName:"p"},"addr_owner"),"."),Object(r.b)("h2",{id:"entry-points"},"Entry points"),Object(r.b)("h3",{id:"transfer"},"Transfer"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-archetype"},"entry %transfer (%from : address, %to : address, value : nat) {\n  ...\n}\n")),Object(r.b)("h3",{id:"approve"},"Approve"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-archetype"},"entry approve() {\n    ...\n}\n")),Object(r.b)("h3",{id:"get-balance"},"Get balance"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-archetype"},"getter getAllowance (owner : address, spender : address) : nat {\n  return (allowance[(owner, spender)].amount)\n}\n")),Object(r.b)("h3",{id:"get-allowance"},"Get allowance"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-archetype"},"getter getBalance (owner : address) : nat {\n  return (ledger[owner].tokens)\n}\n")),Object(r.b)("h3",{id:"get-total-supply"},"Get total supply"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-archetype"},"getter getTotalSupply () : nat {\n  return totalsupply\n}\n")))}p.isMDXComponent=!0}}]);