(self.webpackChunkcompletium_landing=self.webpackChunkcompletium_landing||[]).push([[2408],{5201:function(n,r,t){"use strict";t.d(r,{Z:function(){return E}});var i=t(5861),e=t(7757),a=t.n(e),p=t(7294),m=t(8463),s=t(1749),o=t(5477),d=t(2318),l=t(282),D=t(8500),P=t(3457),I=t(6994),u=t(6032),c=t(7754),g=t(6816),U=[{prim:"storage",args:[{prim:"pair",args:[{prim:"address",annots:["%owner"]},{prim:"pair",args:[{prim:"pair",args:[{prim:"int"},{prim:"nat"}],annots:["%rate"]},{prim:"pair",args:[{prim:"timestamp",annots:["%endofservice"]},{prim:"pair",args:[{prim:"timestamp",annots:["%startofservice"]},{prim:"pair",args:[{prim:"int",annots:["%time_unit"]},{prim:"pair",args:[{prim:"mutez",annots:["%tez_unit"]},{prim:"pair",args:[{prim:"option",args:[{prim:"address"}],annots:["%user"]},{prim:"int",annots:["%read_interval"]}]}]}]}]}]}]}]}]},{prim:"parameter",args:[{prim:"or",args:[{prim:"unit",annots:["%start"]},{prim:"or",args:[{prim:"unit",annots:["%interrupt"]},{prim:"or",args:[{prim:"unit",annots:["%collect"]},{prim:"pair",args:[{prim:"int",annots:["%dunit"]},{prim:"mutez",annots:["%tunit"]}],annots:["%setunits"]}]}]}]}]},{prim:"code",args:[[{prim:"LAMBDA",args:[{prim:"pair",args:[{prim:"pair",args:[{prim:"int"},{prim:"nat"}]},{prim:"pair",args:[{prim:"mutez"},{prim:"int"}]}]},{prim:"pair",args:[{prim:"int"},{prim:"nat"}]},[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"PUSH",args:[{prim:"unit"},{prim:"Unit"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"PUSH",args:[{prim:"mutez"},{int:"1"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"EDIV"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"DivByZero"}]},{prim:"FAILWITH"}],[{prim:"DUP"},{prim:"CAR"},{prim:"SWAP"},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"INT"},{prim:"PAIR"},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"PAIR"},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"}]]},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"SWAP"}]]},{prim:"MUL"},{prim:"DIP",args:[{int:"1"},[{prim:"MUL"}]]},{prim:"PAIR"},{prim:"PAIR"},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"}]]},{prim:"UNPAIR"},{prim:"DIG",args:[{int:"3"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"INT"}],[{prim:"NEG"}]]},{prim:"MUL"},{prim:"DIP",args:[{int:"1"},[{prim:"MUL"},{prim:"ABS"}]]},{prim:"PAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"2"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"2"}]},{prim:"DROP",args:[{int:"2"}]},{prim:"DUG",args:[{int:"3"}]},{prim:"DROP",args:[{int:"3"}]}]]},{prim:"LAMBDA",args:[{prim:"pair",args:[{prim:"timestamp"},{prim:"pair",args:[{prim:"pair",args:[{prim:"int"},{prim:"nat"}]},{prim:"pair",args:[{prim:"mutez"},{prim:"pair",args:[{prim:"int"},{prim:"lambda",args:[{prim:"pair",args:[{prim:"pair",args:[{prim:"int"},{prim:"nat"}]},{prim:"pair",args:[{prim:"mutez"},{prim:"int"}]}]},{prim:"pair",args:[{prim:"int"},{prim:"nat"}]}]}]}]}]}]},{prim:"mutez"},[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"PUSH",args:[{prim:"unit"},{prim:"Unit"}]},{prim:"NOW"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"SUB"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"PAIR"},{prim:"EXEC"},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"INT"},{prim:"PAIR"},{prim:"PAIR"},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"}]]},{prim:"UNPAIR"},{prim:"DIG",args:[{int:"3"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"INT"}],[{prim:"NEG"}]]},{prim:"MUL"},{prim:"DIP",args:[{int:"1"},[{prim:"MUL"},{prim:"ABS"}]]},{prim:"PAIR"},{prim:"PAIR"},{prim:"UNPAIR"},{prim:"UNPAIR"},{prim:"DIG",args:[{int:"2"}]},{prim:"MUL"},{prim:"EDIV"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"DivByZero"}]},{prim:"FAILWITH"}],[]]},{prim:"CAR"},{prim:"PUSH",args:[{prim:"mutez"},{int:"1"}]},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"PAIR"},{prim:"PAIR"},{prim:"UNPAIR"},{prim:"UNPAIR"},{prim:"ABS"},{prim:"DIG",args:[{int:"2"}]},{prim:"MUL"},{prim:"EDIV"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"DivByZero"}]},{prim:"FAILWITH"}],[]]},{prim:"CAR"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"5"}]}]]},{prim:"NIL",args:[{prim:"operation"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"}]]},{prim:"IF_LEFT",args:[[{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"NOW"},{prim:"COMPARE"},{prim:"GT"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r1"}]},{prim:"FAILWITH"}],[]]},{prim:"PUSH",args:[{prim:"mutez"},{int:"1"}]},{prim:"AMOUNT"},{prim:"EDIV"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"DivByZero"}]},{prim:"FAILWITH"}],[{prim:"DUP"},{prim:"CAR"},{prim:"SWAP"},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"PUSH",args:[{prim:"int"},{int:"1"}]},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"INT"},{prim:"PAIR"},{prim:"DIG",args:[{int:"13"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"14"}]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"11"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"12"}]},{prim:"PAIR"},{prim:"EXEC"},{prim:"PAIR"},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"}]]},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"SWAP"}]]},{prim:"MUL"},{prim:"DIP",args:[{int:"1"},[{prim:"MUL"}]]},{prim:"PAIR"},{prim:"PAIR"},{prim:"UNPAIR"},{prim:"UNPAIR"},{prim:"DIG",args:[{int:"2"}]},{prim:"MUL"},{prim:"EDIV"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"DivByZero"}]},{prim:"FAILWITH"}],[]]},{prim:"CAR"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"COMPARE"},{prim:"GT"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"NOW"},{prim:"ADD"},{prim:"ADD"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"7"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"7"}]},{prim:"NOW"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"6"}]},{prim:"SENDER"},{prim:"SOME"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"3"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"3"}]}],[]]},{prim:"DROP",args:[{int:"2"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"NOW"},{prim:"COMPARE"},{prim:"LT"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"NoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"SENDER"},{prim:"COMPARE"},{prim:"EQ"},{prim:"AND"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r2"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"8"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"9"}]},{prim:"SENDER"},{prim:"CONTRACT",args:[{prim:"unit"}]},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"BadContract"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"11"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"12"}]},{prim:"DIG",args:[{int:"13"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"14"}]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"10"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"11"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"9"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"10"}]},{prim:"PAIR"},{prim:"EXEC"},{prim:"UNIT"},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"8"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"8"}]},{prim:"DUP"},{prim:"NOW"},{prim:"SUB"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DUP"},{prim:"NOW"},{prim:"SUB"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"SENDER"},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCaller"}]},{prim:"FAILWITH"}],[]]},{prim:"PUSH",args:[{prim:"mutez"},{int:"0"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"NOW"},{prim:"COMPARE"},{prim:"LT"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"10"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"11"}]},{prim:"DIG",args:[{int:"12"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"13"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"9"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"10"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"8"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"9"}]},{prim:"PAIR"},{prim:"EXEC"},{prim:"SWAP"},{prim:"DROP",args:[{int:"1"}]}],[]]},{prim:"PUSH",args:[{prim:"mutez"},{int:"0"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"BALANCE"},{prim:"SUB"},{prim:"COMPARE"},{prim:"GT"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"9"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"10"}]},{prim:"DIG",args:[{int:"9"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"10"}]},{prim:"CONTRACT",args:[{prim:"unit"}]},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"BadContract"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"BALANCE"},{prim:"SUB"},{prim:"UNIT"},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"9"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"9"}]}],[]]},{prim:"DROP",args:[{int:"1"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DIG",args:[{int:"9"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"10"}]},{prim:"SENDER"},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCaller"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"2"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}]]}]]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"2"}]}]]}]]}],A=function(n,r){return{prim:"Pair",args:[{string:n},{prim:"Pair",args:[r,{prim:"Pair",args:[{int:"1618169559"},{prim:"Pair",args:[{int:"1618169559"},{prim:"Pair",args:[{int:"60"},{prim:"Pair",args:[{int:"1000000"},{prim:"Pair",args:[{prim:"None"},{int:"5"}]}]}]}]}]}]}]}},G=t(9960),N=t(9492),R=t(2592),f=function(n){if((0,I.C1)()){var r=(0,I.$u)();return p.createElement(s.Z,{container:!0,direction:"column",justify:"center",alignItems:"center"},p.createElement(d.Z,{variant:"subtitle2"},"Connected with:"),p.createElement(d.Z,{variant:"subtitle2",style:{fontFamily:"Courier Prime, monospace"}},r))}return p.createElement(s.Z,{container:!0},p.createElement(s.Z,{item:!0,xs:8},p.createElement(g.Z,{main:n.main})),p.createElement(s.Z,{item:!0,xs:2},p.createElement(N.Z,{checked:n.main,onChange:function(r){n.setMain(r.target.checked)},name:"checkedB",color:"primary"})),p.createElement(s.Z,{item:!0,xs:2},p.createElement(d.Z,{variant:"subtitle2",style:{marginTop:"8px"}},"Mainnet")))};var S=function(n){return p.createElement(s.Z,{container:!0,direction:"column",justify:"center",alignItems:"center"},p.createElement(d.Z,{variant:"subtitle2"},"Contract available at:"),p.createElement(d.Z,{component:G.Z,to:"https://better-call.dev/"+(n.main?"mainnet":R.WY)+"/"+n.contract+"/operations",variant:"subtitle2",style:{fontFamily:"Courier Prime, monospace"}},n.contract))},h=function(){var n=p.useState(""),r=n[0],e=n[1],d=p.useState(1.5),D=d[0],P=d[1],u=p.useState(""),g=u[0],G=u[1],N=p.useState(!1),R=N[0],h=N[1],E=(0,c.qJ)(),k=E.setInfoSnack,C=E.setErrorSnack,O=E.hideSnack,T=(0,I.Ch)(),F=(0,I.C1)(),b=function(){return r.length>0&(36!==(n=r).length|!n.startsWith("tz1"));var n},_=function(){return!(D>0)},W=function(){var n=(0,i.Z)(a().mark((function n(){var i,e,p,m,s,o;return a().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,i=t(4686).i,e=new i(D),p={prim:"Pair",args:[{int:e.numerator.toString()},{int:e.denominator.toString()}]},n.next=6,T.wallet.originate({code:U,init:A(r,p)}).send();case 6:return m=n.sent,s=m.opHash.substring(0,10)+"...",k("waiting for "+s+" to be confirmed ..."),n.next=11,m.contract();case 11:o=n.sent,O(),console.log("Origination completed for "+o.address+"."),setTimeout((function(){return G(o.address)}),5e3),n.next=22;break;case 17:n.prev=17,n.t0=n.catch(0),console.log(n.t0),C(n.t0.message),setTimeout(O,4e3);case 22:case"end":return n.stop()}}),n,null,[[0,17]])})));return function(){return n.apply(this,arguments)}}();return p.createElement(m.Z,{style:{backgroundColor:"transparent",border:"1px solid #606770",marginTop:"20px",marginBottom:"20px"},raised:!1},p.createElement(s.Z,{container:!0,style:{padding:22},spacing:3},p.createElement(s.Z,{item:!0,xs:6},p.createElement(o.Z,{onChange:function(n){e(n.target.value)},value:r,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"initalholder",label:"Owner",error:b(),helperText:b()?"Invalid address format":""})),p.createElement(s.Z,{item:!0,xs:6,style:{textAlign:"center",marginTop:"10px"}},p.createElement(f,{main:R,setMain:h})),p.createElement(s.Z,{item:!0,xs:6},p.createElement(o.Z,{type:"number",onChange:function(n){P(n.target.value)},error:_(),helperText:_()?"Invalid Number":"",value:D,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"totalsupply",label:"Rate"})),p.createElement(s.Z,{item:!0,xs:6,style:{textAlign:"center",marginTop:"10px"}},""!==g?p.createElement(S,{contract:g,main:R}):p.createElement(l.Z,{variant:"contained",color:"primary",disableElevation:!0,disabled:!F|_()|b()|0==r.length,onClick:W},"originate"))))},E=function(n){var r=p.useMemo((function(){return(0,D.Z)({palette:{type:"dark",primary:{light:"#1dc5ff",main:"#00ACE7",dark:"#0a90bf",contrastText:"#fff"}}})}),[!0]);return p.createElement(I.MZ,{appName:"Completium IOT"},p.createElement(c.q7,null,p.createElement(P.Z,{theme:r},p.createElement(h,null),p.createElement(u.Z,null))))}},6032:function(n,r,t){"use strict";var i=t(7462),e=t(7294),a=t(3950),p=t(5046),m=t(8920),s=t(7754);function o(n){return e.createElement(p.Z,(0,i.Z)({elevation:6,variant:"filled"},n))}r.Z=function(){var n=(0,s.qJ)().snackState;(0,m.Z)();return e.createElement(a.Z,{open:n.show},e.createElement(o,{severity:n.severity},n.msg))}},6816:function(n,r,t){"use strict";var i=t(5861),e=t(7757),a=t.n(e),p=t(7294),m=t(6994),s=t(2592),o=t(282),d=t(9659),l=t(8920);r.Z=function(n){var r=(0,l.Z)(),t=(0,m.C1)(),e=(0,m.Os)(),D=(0,m.$4)(),P=p.useCallback((function(n){return(0,i.Z)(a().mark((function r(){return a().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.prev=0,r.next=3,D(n?"mainnet":s.L5);case 3:r.next=8;break;case 5:r.prev=5,r.t0=r.catch(0),alert(r.t0.message);case 8:case 9:case"end":return r.stop()}}),r,null,[[0,5]])})))}),[D]);return t?p.createElement("div",null):e?p.createElement(o.Z,{variant:"outlined",color:r.palette.text.primary,onClick:P(n.main)},"connect to wallet"):p.createElement(d.Z,{href:"https://templewallet.com/",rel:"noopener",underline:"none"},p.createElement(o.Z,{variant:"contained",disableElevation:!0,style:{backgroundColor:"#ed8936",color:"white",fontWeight:"bold"}},"install Temple"))}},2592:function(n,r,t){"use strict";t.d(r,{L5:function(){return i},WY:function(){return e}});var i="florencenet",e="florencenet"},7754:function(n,r,t){"use strict";t.d(r,{q7:function(){return a},qJ:function(){return p}});var i=t(7294);var e=(0,t(1521).Z)((function(){var n=(0,i.useState)({show:!1,severity:"info",msg:""}),r=n[0],t=n[1];return{snackState:r,setInfoSnack:function(n){t({show:!0,severity:"info",msg:n})},setErrorSnack:function(n){t({show:!0,severity:"error",msg:n})},hideSnack:function(){t((function(n){return Object.assign({},n,{show:!1})}))}}})),a=e[0],p=e[1]},6994:function(n,r,t){"use strict";t.d(r,{MZ:function(){return d},Os:function(){return l},Ch:function(){return D},$u:function(){return P},C1:function(){return I},$4:function(){return u}});var i=t(5861),e=t(7757),a=t.n(e),p=t(7294),m=t(1521),s=t(185),o=(0,m.Z)((function(n){var r=n.appName,t=p.useState((function(){return{wallet:null,tezos:null,accountPkh:null}})),e=t[0],m=e.wallet,o=e.tezos,d=e.accountPkh,l=t[1],D=Boolean(o);p.useEffect((function(){return s.Uw.onAvailabilityChange((function(n){l({wallet:n?new s.Uw(r):null,tezos:null,accountPkh:null})}))}),[l,r]);var P=p.useCallback(function(){var n=(0,i.Z)(a().mark((function n(r,t){var i,e;return a().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(n.prev=0,m){n.next=3;break}throw new Error("Thanos Wallet not available");case 3:return n.next=5,m.connect(r,t);case 5:return i=m.toTezos(),n.next=8,i.wallet.pkh();case 8:e=n.sent,l({wallet:m,tezos:i,accountPkh:e}),n.next=15;break;case 12:n.prev=12,n.t0=n.catch(0),alert("Failed to connect ThanosWallet: "+n.t0.message);case 15:case"end":return n.stop()}}),n,null,[[0,12]])})));return function(r,t){return n.apply(this,arguments)}}(),[l,m]);return{wallet:m,tezos:o,accountPkh:d,ready:D,connect:P}}),(function(n){return n.wallet}),(function(n){return n.tezos}),(function(n){return n.accountPkh}),(function(n){return n.ready}),(function(n){return n.connect})),d=o[0],l=o[1],D=o[2],P=o[3],I=o[4],u=o[5]},6466:function(n,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return d},contentTitle:function(){return l},metadata:function(){return D},toc:function(){return P},default:function(){return u}});var i=t(7462),e=t(3366),a=(t(7294),t(3905)),p=t(9960),m=t(6396),s=t(8215),o=(t(5201),["components"]),d={id:"template10",title:"Auction",sidebar_label:"Auction",slug:"/templates/auction"},l=void 0,D={unversionedId:"templates/template10",id:"templates/template10",title:"Auction",description:"Introduction",source:"@site/docs/templates/template10.md",sourceDirName:"templates",slug:"/templates/auction",permalink:"/docs/templates/auction",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template10.md",tags:[],version:"current",frontMatter:{id:"template10",title:"Auction",sidebar_label:"Auction",slug:"/templates/auction"},sidebar:"templates",previous:{title:"Competition",permalink:"/docs/templates/competition"},next:{title:"A 2",permalink:"/docs/templates/a2"}},P=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[],level:3},{value:"Entrypoints",id:"entrypoints",children:[],level:3}],level:2},{value:"Code",id:"code",children:[],level:2}],I={toc:P};function u(n){var r=n.components,t=(0,e.Z)(n,o);return(0,a.kt)("wrapper",(0,i.Z)({},I,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Auction process to transfer a ",(0,a.kt)(p.Z,{to:"/docs/templates/nft",mdxType:"Link"},"FA2 NFT")," to best bidder."),(0,a.kt)("p",null,"The best bid is escrowed by the contract til ownership is claimed. Previous best bidder gets its bid back. When asset ownership claimed, it is transfered to asset owner."),(0,a.kt)("p",null,"The contract calls the FA2 contract to check NFT ownership, and transfer ownership when auction is over."),(0,a.kt)("p",null,"The benefit of splitting the auction process from the FA2 ledger is that it makes it possible to change or select the appropriate auction process, while keeping the ledger intact."),(0,a.kt)("h2",{id:"api"},"API"),(0,a.kt)("h3",{id:"storage"},"Storage"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"assetid")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"bytes")),(0,a.kt)("td",{parentName:"tr",align:null},"Id of sold item.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"owner")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"address")),(0,a.kt)("td",{parentName:"tr",align:null},"Address to collect best bid.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"auction_dur")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"duration")),(0,a.kt)("td",{parentName:"tr",align:null},"Auction duration.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"dur_incr")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"duration")),(0,a.kt)("td",{parentName:"tr",align:null},"Increment of auction duration when a bid is placed.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"nft")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"collection")),(0,a.kt)("td",{parentName:"tr",align:null},"An NFT auction is defined by:",(0,a.kt)("ul",null,(0,a.kt)("li",null,"nft id"),(0,a.kt)("li",null,(0,a.kt)("inlineCode",{parentName:"td"},"owner")," of the NFT"),(0,a.kt)("li",null,(0,a.kt)("inlineCode",{parentName:"td"},"bestbidder")," option of address of best bidder"),(0,a.kt)("li",null,(0,a.kt)("inlineCode",{parentName:"td"},"best")," best bid amount"),(0,a.kt)("li",null,(0,a.kt)("inlineCode",{parentName:"td"},"endofbid")," date of the end of bid")))))),(0,a.kt)("h3",{id:"entrypoints"},"Entrypoints"),(0,a.kt)("p",null,"The transfer of ownership performed by ",(0,a.kt)("inlineCode",{parentName:"p"},"calim")," supposes that the NFT owner calls the ",(0,a.kt)("inlineCode",{parentName:"p"},"update_operators")," entrypoint of the ",(0,a.kt)(p.Z,{to:"/docs/templates/nft",mdxType:"Link"},"FA2 contract"),"."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"upforsale")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"id"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"price")),(0,a.kt)("td",{parentName:"tr",align:null},"Owner sets the NFT ",(0,a.kt)("inlineCode",{parentName:"td"},"id")," up for sale. ",(0,a.kt)("p",null),"Sets date of end of bid to ",(0,a.kt)("inlineCode",{parentName:"td"},"now + auction_dur"),". ",(0,a.kt)("p",null),"FA2 NFT contract entrypoint ",(0,a.kt)("inlineCode",{parentName:"td"},"balance_of")," is called to check that caller is the owner of NFT ",(0,a.kt)("inlineCode",{parentName:"td"},"id"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"bid")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"id")),(0,a.kt)("td",{parentName:"tr",align:null},"Places a bid for NFT ",(0,a.kt)("inlineCode",{parentName:"td"},"id"),". Bid amount is transferred. ",(0,a.kt)("p",null),"If this is best bid, previous best bid amount is transferred back to previous bet bidder.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"claim")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"id")),(0,a.kt)("td",{parentName:"tr",align:null},"Transfers escrowed bid amount to ",(0,a.kt)("inlineCode",{parentName:"td"},"owner")," if auction is over for NFT ",(0,a.kt)("inlineCode",{parentName:"td"},"id"),". New ",(0,a.kt)("inlineCode",{parentName:"td"},"owner")," value is set to ",(0,a.kt)("inlineCode",{parentName:"td"},"bestbidder"),".",(0,a.kt)("p",null),"FA2 NFT contract entrypoint ",(0,a.kt)("inlineCode",{parentName:"td"},"transfer")," is called to transfer ownership to best bidder.")))),(0,a.kt)("h2",{id:"code"},"Code"),(0,a.kt)(m.Z,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"}],mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"archetype",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-archetype",metastring:'title="auction.arl"',title:'"auction.arl"'},'\narchetype auction(\n  nftoken     : address,\n  auction_dur : duration,\n  dur_incr    : duration\n)\n\nasset nft {\n  nftid      : nat;\n  owner      : address;\n  bestbidder : option<address>;\n  best       : tez;\n  endofbid   : date;\n}\n\nrecord operator_param {\n  opp_owner    : address;\n  opp_operator : address;\n  opp_token_id : nat\n} as ((owner, (operator, token_id)))\n\nrecord balance_of_request {\n  bo_owner : address;\n  btoken_id : nat;\n} as ((owner, token_id))\n\nrecord balance_of_response {\n  request : balance_of_request;\n  balance_ : nat;\n} as ((request, balance))\n\nfunction get_addop_param(\n  powner : address,\n  popp   : address,\n  pid    : nat\n) : list<or<operator_param, operator_param>> {\n  return ([\n    left<operator_param>({\n      opp_owner    = powner;\n      opp_operator = popp;\n      opp_token_id = pid\n    })\n  ])\n}\n\nentry check_ownership(brl : list<balance_of_response>) {\n  called by nftoken\n  effect {\n    match brl with\n    | hd::tl -> begin\n      dorequire(hd.balance_ = 1, "Caller Is Not Owner");\n      transfer 0tz to nftoken\n        call update_operators<list<or<operator_param, operator_param>>>(\n          get_addop_param(hd.request.bo_owner, selfaddress, hd.request.btoken_id));\n    end\n    | []     -> fail("Empty Response")\n    end\n  }\n}\n\nentry upforsale (id : nat, price : tez) {\n  require {\n    r1: if nft.contains(id) then nft[id].endofbid < now else true\n  }\n  effect {\n    nft.addupdate(id, {\n      owner      = caller;\n      bestbidder = none;\n      best       = price;\n      endofbid   = (now + auction_dur)\n    });\n    (* check ownership with FA2 balance_of *)\n    transfer 0tz to nftoken\n       call balance_of<\n              list<balance_of_request> *\n              contract<list<balance_of_response>>\n       >(([ { bo_owner = caller; btoken_id = id } ], self.check_ownership));\n  }\n}\n\nentry bid (id : nat) {\n  require {\n    r2 otherwise "No Auction"   : now < nft[id].endofbid;\n    r3 otherwise "Not Best Bid" :\n      if issome(nft[id].bestbidder)\n      then transferred >  nft[id].best\n      else transferred >= nft[id].best;\n  }\n  effect {\n    match nft[id].bestbidder with\n    | none -> ()\n    | some bidder -> transfer nft[id].best to bidder\n    end;\n    nft.update(id, {\n      bestbidder = some(caller);\n      best       = transferred;\n      endofbid  +=\n        (if nft[id].endofbid - now < dur_incr\n         then dur_incr\n         else 0s)\n    })\n  }\n}\n\nrecord transfer_destination {\n  to_dest           : address;\n  token_id_dest     : nat;\n  token_amount_dest : nat\n} as ((to_, (token_id, amount)))\n\nfunction get_transfer_param(\n  %from : address,\n  %to   : address,\n  id    : nat) : list<address * list<transfer_destination>> {\n  return ([\n    (%from, [{\n      to_dest           = %to;\n      token_id_dest     = id;\n      token_amount_dest = 1\n    }])\n  ])\n}\n\nfunction get_rmop_param(\n  powner : address,\n  popp   : address,\n  pid    : nat\n) : list<or<operator_param, operator_param>> {\n  return ([\n    right<operator_param>({\n      opp_owner    = powner;\n      opp_operator = popp;\n      opp_token_id = pid\n    })\n  ])\n}\n\nentry claim (id : nat) {\n  require {\n    r4 otherwise "Auction Is Still On" : nft[id].endofbid < now\n  }\n  effect {\n    transfer 0tz to nftoken\n      call update_operators<list<or<operator_param, operator_param>>>(\n        get_rmop_param(nft[id].owner, selfaddress, id));\n    match nft[id].bestbidder with\n    | none -> ()\n    | some bidder -> begin\n        transfer 0tz to nftoken\n          call %transfer<list<address * list<transfer_destination>>>(\n            get_transfer_param(nft[id].owner, bidder, id));\n        transfer nft[id].best to nft[id].owner;\n      end\n    end;\n    nft.remove(id);\n  }\n}\n'))),(0,a.kt)(s.Z,{value:"michelson",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'# (Pair nftoken (Pair auction_dur (Pair dur_incr {  })))\n{\n  storage (pair (address %nftoken) (pair (int %auction_dur) (pair (int %dur_incr) (map %nft nat (pair (address %owner) (pair (option %bestbidder address) (pair (mutez %best) (timestamp %endofbid))))))));\n  parameter (or (list %check_ownership (pair (pair (address %owner) (nat %token_id)) (nat %balance))) (or (pair %upforsale (nat %id) (mutez %price)) (or (nat %bid) (nat %claim))));\n  code { LAMBDA\n           (pair address (pair address nat))\n           (list (or (pair (address %owner) (pair (address %operator) (nat %token_id))) (pair (address %owner) (pair (address %operator) (nat %token_id)))))\n           { UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             PUSH unit Unit;\n             NIL (or (pair (address %owner) (pair (address %operator) (nat %token_id))) (pair (address %owner) (pair (address %operator) (nat %token_id))));\n             DIG 2;\n             DUP;\n             DUG 3;\n             DIG 4;\n             DUP;\n             DUG 5;\n             PAIR;\n             DIG 5;\n             DUP;\n             DUG 6;\n             PAIR;\n             LEFT (pair address (pair address nat));\n             CONS;\n             SWAP;\n             DROP;\n             DUG 3;\n             DROP 3 };\n         LAMBDA\n           (pair address (pair address nat))\n           (list (pair address (list (pair (address %to_) (pair (nat %token_id) (nat %amount))))))\n           { UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             PUSH unit Unit;\n             NIL (pair address (list (pair (address %to_) (pair (nat %token_id) (nat %amount)))));\n             NIL (pair (address %to_) (pair (nat %token_id) (nat %amount)));\n             PUSH nat 1;\n             DIG 4;\n             DUP;\n             DUG 5;\n             PAIR;\n             DIG 5;\n             DUP;\n             DUG 6;\n             PAIR;\n             CONS;\n             DIG 5;\n             DUP;\n             DUG 6;\n             PAIR;\n             CONS;\n             SWAP;\n             DROP;\n             DUG 3;\n             DROP 3 };\n         LAMBDA\n           (pair address (pair address nat))\n           (list (or (pair (address %owner) (pair (address %operator) (nat %token_id))) (pair (address %owner) (pair (address %operator) (nat %token_id)))))\n           { UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             PUSH unit Unit;\n             NIL (or (pair (address %owner) (pair (address %operator) (nat %token_id))) (pair (address %owner) (pair (address %operator) (nat %token_id))));\n             DIG 2;\n             DUP;\n             DUG 3;\n             DIG 4;\n             DUP;\n             DUG 5;\n             PAIR;\n             DIG 5;\n             DUP;\n             DUG 6;\n             PAIR;\n             RIGHT (pair address (pair address nat));\n             CONS;\n             SWAP;\n             DROP;\n             DUG 3;\n             DROP 3 };\n         NIL operation;\n         DIG 4;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { DIG 4;\n             DUP;\n             DUG 5;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             DUP;\n             IF_CONS\n               { PUSH nat 1;\n                 DIG 1;\n                 DUP;\n                 DUG 2;\n                 CDR;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "Caller Is Not Owner";\n                     FAILWITH }\n                   {  };\n                 DIG 7;\n                 DUP;\n                 DUG 8;\n                 DIG 7;\n                 DUP;\n                 DUG 8;\n                 CONTRACT %update_operators (list (or (pair address (pair address nat)) (pair address (pair address nat))));\n                 IF_NONE\n                   { PUSH string "BadContract";\n                     FAILWITH }\n                   {  };\n                 PUSH mutez 0;\n                 DIG 13;\n                 DUP;\n                 DUG 14;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 CAR;\n                 CDR;\n                 SELF;\n                 ADDRESS;\n                 PAIR;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 CAR;\n                 CAR;\n                 PAIR;\n                 EXEC;\n                 TRANSFER_TOKENS;\n                 CONS;\n                 DIP { DIG 7; DROP };\n                 DUG 7;\n                 DROP 2 }\n               { PUSH string "Empty Response";\n                 FAILWITH };\n             DROP;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { UNPAIR;\n                 SWAP;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 MEM;\n                 IF\n                   { NOW;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CDR;\n                     CDR;\n                     CDR;\n                     COMPARE;\n                     LT }\n                   { PUSH bool True };\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCondition: r1";\n                     FAILWITH }\n                   {  };\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 NOW;\n                 ADD;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 PAIR;\n                 NONE address;\n                 PAIR;\n                 SENDER;\n                 PAIR;\n                 SOME;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 UPDATE;\n                 DIP { DIG 2; DROP };\n                 DUG 2;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 CONTRACT %balance_of (pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))));\n                 IF_NONE\n                   { PUSH string "BadContract";\n                     FAILWITH }\n                   {  };\n                 PUSH mutez 0;\n                 SELF;\n                 ADDRESS;\n                 CONTRACT %check_ownership (list (pair (pair address nat) nat));\n                 IF_NONE\n                   { PUSH string "BadContract";\n                     FAILWITH }\n                   {  };\n                 NIL (pair (address %owner) (nat %token_id));\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 SENDER;\n                 PAIR;\n                 CONS;\n                 PAIR;\n                 TRANSFER_TOKENS;\n                 CONS;\n                 DIP { DIG 6; DROP };\n                 DUG 6;\n                 DROP 2;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { IF_LEFT\n                   { DIG 1;\n                     DUP;\n                     DUG 2;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CDR;\n                     CDR;\n                     CDR;\n                     NOW;\n                     COMPARE;\n                     LT;\n                     NOT;\n                     IF\n                       { PUSH string "No Auction";\n                         FAILWITH }\n                       {  };\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CDR;\n                     CAR;\n                     IF_NONE\n                       { PUSH bool False }\n                       { PUSH bool True;\n                         SWAP;\n                         DROP };\n                     IF\n                       { DIG 1;\n                         DUP;\n                         DUG 2;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CAR;\n                         AMOUNT;\n                         COMPARE;\n                         GT }\n                       { DIG 1;\n                         DUP;\n                         DUG 2;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CAR;\n                         AMOUNT;\n                         COMPARE;\n                         GE };\n                     NOT;\n                     IF\n                       { PUSH string "Not Best Bid";\n                         FAILWITH }\n                       {  };\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CDR;\n                     CAR;\n                     IF_NONE\n                       {  }\n                       { DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CAR;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 6; DROP };\n                         DUG 6;\n                         DROP };\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     UNPAIR;\n                     SWAP;\n                     UNPAIR;\n                     DROP;\n                     SENDER;\n                     SOME;\n                     SWAP;\n                     UNPAIR;\n                     DROP;\n                     AMOUNT;\n                     SWAP;\n                     DROP;\n                     DIG 7;\n                     DUP;\n                     DUG 8;\n                     NOW;\n                     DIG 8;\n                     DUP;\n                     DUG 9;\n                     DIG 8;\n                     DUP;\n                     DUG 9;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CDR;\n                     CDR;\n                     CDR;\n                     SUB;\n                     COMPARE;\n                     LT;\n                     IF\n                       { DIG 7;\n                         DUP;\n                         DUG 8 }\n                       { PUSH int 0 };\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     CDR;\n                     CDR;\n                     CDR;\n                     ADD;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SOME;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     UPDATE;\n                     DIP { DIG 2; DROP };\n                     DUG 2;\n                     DROP 2;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR }\n                   { NOW;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CDR;\n                     CDR;\n                     CDR;\n                     COMPARE;\n                     LT;\n                     NOT;\n                     IF\n                       { PUSH string "Auction Is Still On";\n                         FAILWITH }\n                       {  };\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     CONTRACT %update_operators (list (or (pair address (pair address nat)) (pair address (pair address nat))));\n                     IF_NONE\n                       { PUSH string "BadContract";\n                         FAILWITH }\n                       {  };\n                     PUSH mutez 0;\n                     DIG 9;\n                     DUP;\n                     DUG 10;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     SELF;\n                     ADDRESS;\n                     PAIR;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CAR;\n                     PAIR;\n                     EXEC;\n                     TRANSFER_TOKENS;\n                     CONS;\n                     DIP { DIG 5; DROP };\n                     DUG 5;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CDR;\n                     CAR;\n                     IF_NONE\n                       {  }\n                       { DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         CONTRACT %transfer (list (pair address (list (pair address (pair nat nat)))));\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         PUSH mutez 0;\n                         DIG 11;\n                         DUP;\n                         DUG 12;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         PAIR;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         PAIR;\n                         EXEC;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 6; DROP };\n                         DUG 6;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CAR;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 6; DROP };\n                         DUG 6;\n                         DROP };\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     NONE (pair address (pair (option address) (pair mutez timestamp)));\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     UPDATE;\n                     DIP { DIG 1; DROP };\n                     DUG 1;\n                     DROP;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR } } };\n         DIP { DROP 3 } };\n}\n')))))}u.isMDXComponent=!0},4686:function(n){var r,t;Fraction=function(n,r){if(void 0!==n&&r)"number"==typeof n&&"number"==typeof r?(this.numerator=n,this.denominator=r):"string"==typeof n&&"string"==typeof r&&(this.numerator=parseInt(n),this.denominator=parseInt(r));else if(void 0===r)if(num=n,"number"==typeof num)this.numerator=num,this.denominator=1;else if("string"==typeof num){var t,i,e=num.split(" ");if(e[0]&&(t=e[0]),e[1]&&(i=e[1]),t%1==0&&i&&i.match("/"))return new Fraction(t).add(new Fraction(i));if(!t||i)return;if("string"==typeof t&&t.match("/")){var a=t.split("/");this.numerator=a[0],this.denominator=a[1]}else{if("string"==typeof t&&t.match("."))return new Fraction(parseFloat(t));this.numerator=parseInt(t),this.denominator=1}}this.normalize()},Fraction.prototype.clone=function(){return new Fraction(this.numerator,this.denominator)},Fraction.prototype.toString=function(){if("NaN"===this.denominator)return"NaN";var n=this.numerator/this.denominator>0?Math.floor(this.numerator/this.denominator):Math.ceil(this.numerator/this.denominator),r=this.numerator%this.denominator,t=this.denominator,i=[];return 0!=n&&i.push(n),0!=r&&i.push((0===n?r:Math.abs(r))+"/"+t),i.length>0?i.join(" "):0},Fraction.prototype.rescale=function(n){return this.numerator*=n,this.denominator*=n,this},Fraction.prototype.add=function(n){var r=this.clone();return n=n instanceof Fraction?n.clone():new Fraction(n),td=r.denominator,r.rescale(n.denominator),n.rescale(td),r.numerator+=n.numerator,r.normalize()},Fraction.prototype.subtract=function(n){var r=this.clone();return n=n instanceof Fraction?n.clone():new Fraction(n),td=r.denominator,r.rescale(n.denominator),n.rescale(td),r.numerator-=n.numerator,r.normalize()},Fraction.prototype.multiply=function(n){var r=this.clone();if(n instanceof Fraction)r.numerator*=n.numerator,r.denominator*=n.denominator;else{if("number"!=typeof n)return r.multiply(new Fraction(n));r.numerator*=n}return r.normalize()},Fraction.prototype.divide=function(n){var r=this.clone();if(n instanceof Fraction)r.numerator*=n.denominator,r.denominator*=n.numerator;else{if("number"!=typeof n)return r.divide(new Fraction(n));r.denominator*=n}return r.normalize()},Fraction.prototype.equals=function(n){n instanceof Fraction||(n=new Fraction(n));var r=this.clone().normalize();n=n.clone().normalize();return r.numerator===n.numerator&&r.denominator===n.denominator},Fraction.prototype.normalize=(r=function(n){return"number"==typeof n&&(n>0&&n%1>0&&n%1<1||n<0&&n%-1<0&&n%-1>-1)},t=function(n,r){if(r){var t=Math.pow(10,r);return Math.round(n*t)/t}return Math.round(n)},function(){if(r(this.denominator)){var n=t(this.denominator,9),i=Math.pow(10,n.toString().split(".")[1].length);this.denominator=Math.round(this.denominator*i),this.numerator*=i}r(this.numerator)&&(n=t(this.numerator,9),i=Math.pow(10,n.toString().split(".")[1].length),this.numerator=Math.round(this.numerator*i),this.denominator*=i);var e=Fraction.gcf(this.numerator,this.denominator);return this.numerator/=e,this.denominator/=e,(this.numerator<0&&this.denominator<0||this.numerator>0&&this.denominator<0)&&(this.numerator*=-1,this.denominator*=-1),this}),Fraction.gcf=function(n,r){var t=[],i=Fraction.primeFactors(n),e=Fraction.primeFactors(r);return i.forEach((function(n){var r=e.indexOf(n);r>=0&&(t.push(n),e.splice(r,1))})),0===t.length?1:function(){var n,r=t[0];for(n=1;n<t.length;n++)r*=t[n];return r}()},Fraction.primeFactors=function(n){for(var r=Math.abs(n),t=[],i=2;i*i<=r;)r%i==0?(t.push(i),r/=i):i++;return 1!=r&&t.push(r),t},n.exports.i=Fraction},2361:function(){},4616:function(){}}]);