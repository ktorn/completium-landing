(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{160:function(t,e,a){"use strict";a.r(e),a.d(e,"frontMatter",(function(){return l})),a.d(e,"metadata",(function(){return o})),a.d(e,"toc",(function(){return i})),a.d(e,"default",(function(){return d}));var n=a(3),c=(a(0),a(235)),r=(a(238),a(236));const l={id:"tuto8",title:"Call another Contract",sidebar_label:"8. Call a contract",slug:"/contract/tuto/archetype-callcontr",hide_title:!0},o={unversionedId:"contract/tuto/tuto8",id:"contract/tuto/tuto8",isDocsHomePage:!1,title:"Call another Contract",description:"Call a contract",source:"@site/docs/contract/tuto/tuto8.md",slug:"/contract/tuto/archetype-callcontr",permalink:"/docs/contract/tuto/archetype-callcontr",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/contract/tuto/tuto8.md",version:"current",sidebar_label:"8. Call a contract",sidebar:"contract",previous:{title:"Assets",permalink:"/docs/contract/tuto/archetype-assets"},next:{title:"Test Scenario",permalink:"/docs/contract/test-scenario"}},i=[{value:"Call a contract",id:"call-a-contract",children:[]},{value:"Deploy",id:"deploy",children:[]},{value:"Call entry point",id:"call-entry-point",children:[]}],p={toc:i};function d({components:t,...e}){return Object(c.b)("wrapper",Object(n.a)({},p,e,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"call-a-contract"},"Call a contract"),Object(c.b)("p",null,"Can a contract read another contract's storage?"),Object(c.b)("p",null,"No, not directly. However it is possible to call another contract with the ",Object(c.b)("inlineCode",{parentName:"p"},"transfer")," instruction we have seen in ",Object(c.b)(r.a,{to:"/docs/contract/tuto/archetype-datedur",mdxType:"Link"},"previous")," examples."),Object(c.b)("p",null,"It is then possible to setup a mechanism for a smart contract to retrieve a data from another smart contracts, under certain conditions and constraints:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"the smart contract you want to retrieve data from must provide an dedicated entry point to provide the data"),Object(c.b)("li",{parentName:"ul"},"this entry point must accept an argument which is call-back to the calling contract; this call-back is an entry point to be called with the desired data as argument)"),Object(c.b)("li",{parentName:"ul"},"the calling contract must provide a call-back entry point to handle the retreived data")),Object(c.b)("p",null,"It is indeed possible in Michelson to wrap an entrypoint address in a value and send it to an entry point with the ",Object(c.b)("inlineCode",{parentName:"p"},"contract")," type."),Object(c.b)("p",null,"Archetype provides a high-level syntax for this pattern: the keyword ",Object(c.b)("inlineCode",{parentName:"p"},"getter")," generates the required entry point and arguments."),Object(c.b)("p",null,"The ",Object(c.b)("em",{parentName:"p"},"called")," contract provides a ",Object(c.b)("inlineCode",{parentName:"p"},"getter")," entry point:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype",metastring:'{9} title="8-1-contract_called.arl"',"{9}":!0,title:'"8-1-contract_called.arl"'}),"archetype contract_called\n\nvariable n : nat = 42\n\nentry set_n(p : nat) {\n  n := p\n}\n\ngetter get_n () : nat { return n }\n\n")),Object(c.b)("p",null,"The ",Object(c.b)("em",{parentName:"p"},"caller")," contract uses a variation of the ",Object(c.b)("inlineCode",{parentName:"p"},"transfer")," instruction to call the ",Object(c.b)("inlineCode",{parentName:"p"},"get_n")," entry point. The address of the called contract is passed as parameter:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype",metastring:'{10} title="8-2-contract_caller.arl"',"{10}":!0,title:'"8-2-contract_caller.arl"'}),"archetype contract_caller\n\nvariable r : nat = 0\n\nentry set_r(p : nat) {\n  r := p\n}\n\nentry inspect(addr : address) {\n  transfer 0tz to addr call get_n<unit * contract<nat>>((Unit, self.set_r))\n}\n")),Object(c.b)("p",null,"A detailed presentation of the ",Object(c.b)("inlineCode",{parentName:"p"},"getter")," keyword may be found ",Object(c.b)("a",{href:"https://docs.archetype-lang.org/archetype-language/transfers#getter-and-contract",target:"_blank"},"here"),"."),Object(c.b)("h2",{id:"deploy"},"Deploy"),Object(c.b)("p",null,"The following ",Object(c.b)(r.a,{to:"/docs/cli",mdxType:"Link"},"Completium CLI")," commands deploy the contract on the Tezos network:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"completium-cli deploy 8-1-contract_called.arl\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"completium-cli deploy 8-2-contract_caller.arl\n")),Object(c.b)("h2",{id:"call-entry-point"},"Call entry point"),Object(c.b)("p",null,"The following command calls the unique entry point:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"completium-cli call 8-2-contract_caller --entry inspect --with @`completium-cli show address 8-1-contract_called`\n")),Object(c.b)("p",null,"You can retrieve the address of the called contract with this command:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"completium-cli show contract 8-1-contract_called\n")))}d.isMDXComponent=!0}}]);