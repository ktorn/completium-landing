(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{222:function(n,t,e){"use strict";e.r(t),e.d(t,"frontMatter",(function(){return T})),e.d(t,"metadata",(function(){return w})),e.d(t,"toc",(function(){return x})),e.d(t,"default",(function(){return L}));var r=e(3),i=e(7),a=e(0),m=e.n(a),p=e(228),s=e(229),o=e(243),c=e(244),l=e(346),d=e.n(l),D=e(348),b=e(388),g=e(390),P=e(604),I=e(391),u=e(591),U=e(551),G=e(589),O=e(254),f=e(280),h=e(255),A=e(284),N=[{prim:"storage",args:[{prim:"pair",args:[{prim:"address",annots:["%chairman"]},{prim:"pair",args:[{prim:"nat",annots:["%maxvotes"]},{prim:"pair",args:[{prim:"nat",annots:["%_state"]},{prim:"pair",args:[{prim:"map",args:[{prim:"nat"},{prim:"pair",args:[{prim:"bytes",annots:["%title"]},{prim:"pair",args:[{prim:"bytes",annots:["%desc"]},{prim:"pair",args:[{prim:"nat",annots:["%nbvotes"]},{prim:"pair",args:[{prim:"timestamp",annots:["%creation"]},{prim:"address",annots:["%author"]}]}]}]}]}],annots:["%idea"]},{prim:"pair",args:[{prim:"map",args:[{prim:"address"},{prim:"nat"}],annots:["%voter"]},{prim:"set",args:[{prim:"nat"}],annots:["%selected"]}]}]}]}]}]}]},{prim:"parameter",args:[{prim:"or",args:[{prim:"address",annots:["%register"]},{prim:"or",args:[{prim:"pair",args:[{prim:"bytes",annots:["%ititle"]},{prim:"bytes",annots:["%description"]}],annots:["%add_idea"]},{prim:"or",args:[{prim:"pair",args:[{prim:"nat",annots:["%n"]},{prim:"nat",annots:["%weight"]}],annots:["%vote"]},{prim:"unit",annots:["%terminate"]}]}]}]}]},{prim:"code",args:[[{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"}]]},{prim:"IF_LEFT",args:[[{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"SENDER"},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCaller"}]},{prim:"FAILWITH"}],[]]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r0"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"KeyAlreadyExists"}]},{prim:"FAILWITH"}],[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"SOME"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"2"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"2"}]}]]},{prim:"DROP",args:[{int:"1"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"NIL",args:[{prim:"operation"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r1"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"SIZE"},{prim:"MEM"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"KeyAlreadyExists"}]},{prim:"FAILWITH"}],[{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"SENDER"},{prim:"NOW"},{prim:"PAIR"},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"PAIR"},{prim:"SOME"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"SIZE"},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]}]]},{prim:"DROP",args:[{int:"2"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"NIL",args:[{prim:"operation"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SENDER"},{prim:"MEM"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r2"}]},{prim:"FAILWITH"}],[]]},{prim:"DUP"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"SENDER"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"COMPARE"},{prim:"GE"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r3"}]},{prim:"FAILWITH"}],[]]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r4"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SENDER"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"INT"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SUB"},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"INT"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SUB"},{prim:"ABS"}],[{prim:"PUSH",args:[{prim:"string"},{string:"AssignNat"}]},{prim:"FAILWITH"}]]},{prim:"SOME"},{prim:"SENDER"},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"CDR"},{prim:"CDR"},{prim:"CAR"},{prim:"ADD"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SOME"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"NIL",args:[{prim:"operation"}]},{prim:"PAIR"}],[{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"SENDER"},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCaller"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"DUP"},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"COMPARE"},{prim:"EQ"},{prim:"IF",args:[[{prim:"NIL",args:[{prim:"nat"}]},{prim:"NIL",args:[{prim:"nat"}]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"PAIR"},{prim:"NIL",args:[{prim:"nat"}]},{prim:"NIL",args:[{prim:"nat"}]},{prim:"NIL",args:[{prim:"nat"}]},{prim:"DIG",args:[{int:"8"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"9"}]},{prim:"ITER",args:[[{prim:"UNPAIR"},{prim:"DIG",args:[{int:"12"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"13"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"CDR"},{prim:"CDR"},{prim:"CAR"},{prim:"COMPARE"},{prim:"GT"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CONS"}],[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"2"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"2"}]},{prim:"DROP",args:[{int:"2"}]}]]},{prim:"ITER",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"ITER",args:[[{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"NIL",args:[{prim:"nat"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SOME"},{prim:"PAIR"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"ITER",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CAR"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"CDR"},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"IF_NONE",args:[[{prim:"DUP"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"CONS"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"PAIR"}],[{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"14"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"15"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"CDR"},{prim:"CDR"},{prim:"CAR"},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CDR"},{prim:"CDR"},{prim:"CAR"},{prim:"COMPARE"},{prim:"LT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"int"},{int:"1"}]}],[{prim:"PUSH",args:[{prim:"int"},{int:"0"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"COMPARE"},{prim:"GT"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"CONS"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"CONS"},{prim:"NONE",args:[{prim:"nat"}]},{prim:"PAIR"}],[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"CONS"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"PAIR"}]]},{prim:"SWAP"},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUP"},{prim:"CAR"},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CDR"},{prim:"NIL",args:[{prim:"nat"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"IF_NONE",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]}],[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"CONS"},{prim:"SWAP"},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"ITER",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"ITER",args:[[{prim:"PUSH",args:[{prim:"nat"},{int:"3"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"CAR"},{prim:"COMPARE"},{prim:"LT"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CDR"},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CONS"},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"CAR"},{prim:"ADD"},{prim:"PAIR"}],[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CDR"},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"CAR"},{prim:"ADD"},{prim:"PAIR"}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"CDR"},{prim:"ITER",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"ITER",args:[[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"KeyAlreadyExists"}]},{prim:"FAILWITH"}],[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"PUSH",args:[{prim:"bool"},{prim:"True"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"2"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"2"}]}]]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]}],[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidState"}]},{prim:"FAILWITH"}]]},{prim:"DROP",args:[{int:"1"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"NIL",args:[{prim:"operation"}]},{prim:"PAIR"}]]}]]}]]}]]}],R=function(n,t){return{prim:"Pair",args:[{string:n},{prim:"Pair",args:[{int:t.toString()},{prim:"Pair",args:[{int:"0"},{prim:"Pair",args:[[],{prim:"Pair",args:[[],[]]}]}]}]}]}},v=e(611),j=function(n){if(Object(O.d)()){var t=Object(O.b)();return m.a.createElement(g.a,{container:!0,direction:"column",justify:"center",alignItems:"center"},m.a.createElement(I.a,{variant:"subtitle2"},"Connected with:"),m.a.createElement(I.a,{variant:"subtitle2",style:{fontFamily:"Courier Prime, monospace"}},t))}return m.a.createElement(g.a,{container:!0},m.a.createElement(g.a,{item:!0,xs:8},m.a.createElement(A.a,{main:n.main})),m.a.createElement(g.a,{item:!0,xs:2},m.a.createElement(v.a,{checked:n.main,onChange:function(t){n.setMain(t.target.checked)},name:"checkedB",color:"primary"})),m.a.createElement(g.a,{item:!0,xs:2},m.a.createElement(I.a,{variant:"subtitle2",style:{marginTop:"8px"}},"Mainnet")))};var y=function(n){return m.a.createElement(g.a,{container:!0,direction:"column",justify:"center",alignItems:"center"},m.a.createElement(I.a,{variant:"subtitle2"},"Contract available at:"),m.a.createElement(I.a,{component:s.a,to:"https://better-call.dev/"+(n.main?"mainnet":"edo2net")+"/"+n.contract+"/operations",variant:"subtitle2",style:{fontFamily:"Courier Prime, monospace"}},n.contract))},E=function(){var n=m.a.useState(""),t=n[0],e=n[1],r=m.a.useState(5),i=r[0],a=r[1],p=m.a.useState(""),s=p[0],o=p[1],c=m.a.useState(!1),l=c[0],I=c[1],U=Object(h.b)(),G=U.setInfoSnack,f=U.setErrorSnack,A=U.hideSnack,v=Object(O.e)(),E=Object(O.d)(),S=function(){return t.length>0&(36!==(n=t).length|!n.startsWith("tz1"));var n},C=function(){return!(Math.round(i)==i&i>0)},T=function(){var n=Object(D.a)(d.a.mark((function n(){var e,r,a;return d.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,v.wallet.originate({code:N,init:R(t,i)}).send();case 3:return e=n.sent,r=e.opHash.substring(0,10)+"...",G("waiting for "+r+" to be confirmed ..."),n.next=8,e.contract();case 8:a=n.sent,A(),console.log("Origination completed for "+a.address+"."),setTimeout((function(){return o(a.address)}),5e3),n.next=19;break;case 14:n.prev=14,n.t0=n.catch(0),console.log(n.t0),f(n.t0.message),setTimeout(A,4e3);case 19:case"end":return n.stop()}}),n,null,[[0,14]])})));return function(){return n.apply(this,arguments)}}();return m.a.createElement(b.a,{style:{backgroundColor:"transparent",border:"1px solid #606770",marginTop:"20px",marginBottom:"20px"},raised:!1},m.a.createElement(g.a,{container:!0,style:{padding:22},spacing:3},m.a.createElement(g.a,{item:!0,xs:6},m.a.createElement(P.a,{onChange:function(n){e(n.target.value)},value:t,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"chairmain",label:"Chairman",error:S(),helperText:S()?"Invalid address format":""})),m.a.createElement(g.a,{item:!0,xs:6,style:{textAlign:"center",marginTop:"10px"}},m.a.createElement(j,{main:l,setMain:I})),m.a.createElement(g.a,{item:!0,xs:6},m.a.createElement(P.a,{type:"number",onChange:function(n){a(n.target.value)},error:C(),helperText:C()?"Invalid Integer Number":"",value:i,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"maxvotes",label:"Max. nb. votes"})),m.a.createElement(g.a,{item:!0,xs:6,style:{textAlign:"center",marginTop:"10px"}},""!==s?m.a.createElement(y,{contract:s,main:l}):m.a.createElement(u.a,{variant:"contained",color:"primary",disableElevation:!0,disabled:!E|C()|S()|0==t.length,onClick:T},"originate"))))},S=function(n){var t=m.a.useMemo((function(){return Object(U.a)({palette:{type:"dark",primary:{light:"#1dc5ff",main:"#00ACE7",dark:"#0a90bf",contrastText:"#fff"}}})}),[!0]);return m.a.createElement(O.a,{appName:"Completium IOT"},m.a.createElement(h.a,null,m.a.createElement(G.a,{theme:t},m.a.createElement(E,null),m.a.createElement(f.a,null))))},C=e(232),T={id:"template8",title:"Idea box",sidebar_label:"Idea box",slug:"/templates/ideabox"},w={unversionedId:"templates/template8",id:"templates/template8",isDocsHomePage:!1,title:"Idea box",description:"Introduction",source:"@site/docs/templates/template8.md",slug:"/templates/ideabox",permalink:"/docs/templates/ideabox",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template8.md",version:"current",sidebar_label:"Idea box",sidebar:"templates",previous:{title:"Health care",permalink:"/docs/templates/healthcare"},next:{title:"Competition",permalink:"/docs/templates/competition"}},x=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Originate",id:"originate",children:[{value:"Command line",id:"command-line",children:[]}]},{value:"Code",id:"code",children:[]}],W={toc:x};function L(n){var t=n.components,e=Object(i.a)(n,["components"]);return Object(p.b)("wrapper",Object(r.a)({},W,e,{components:t,mdxType:"MDXLayout"}),Object(p.b)("h2",{id:"introduction"},"Introduction"),Object(p.b)("p",null,"This contract implements an Idea Box on the ",Object(p.b)(s.a,{to:"/docs/dapp-tools/tezos",mdxType:"Link"},"Tezos")," blockchain. The chairman registers voters and selects the best ideas. Voters are granted a fixed number of votes."),Object(p.b)("p",null,"You can see this contract in action in the ",Object(p.b)(s.a,{to:"/docs/dapp-ideabox/",mdxType:"Link"},"Idea Box")," DApp example."),Object(p.b)("h2",{id:"api"},"API"),Object(p.b)("h3",{id:"storage"},"Storage"),Object(p.b)("p",null,"Ideas data (title and description) are stored as ",Object(p.b)("inlineCode",{parentName:"p"},"bytes"),"."),Object(p.b)("table",null,Object(p.b)("thead",{parentName:"table"},Object(p.b)("tr",{parentName:"thead"},Object(p.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"),Object(p.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Type"),Object(p.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Description"))),Object(p.b)("tbody",{parentName:"table"},Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"chairman")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"address")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Address of the box's chairman")),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"maxvotes")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"nat")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Maximum number of votes per voter.")),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"idea")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"collection")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"An idea is defined by:",Object(p.b)("ul",null,Object(p.b)("li",null,"an identifier (key)"),Object(p.b)("li",null,"a title"),Object(p.b)("li",null,"a description"),Object(p.b)("li",null,"a number of votes"),Object(p.b)("li",null,"a creation date"),Object(p.b)("li",null,"the author's address")))),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"voter")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"collection")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"A voter is defined by:",Object(p.b)("ul",null,Object(p.b)("li",null,"an address (key)"),Object(p.b)("li",null,"a number of remaining votes")))),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"selected")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"collecter")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"This is the collection of selected ideas.")),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"_state")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"states")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Box state, one of ",Object(p.b)("inlineCode",{parentName:"td"},"Activated"),", ",Object(p.b)("inlineCode",{parentName:"td"},"Terminated"),".")))),Object(p.b)("h3",{id:"entrypoints"},"Entrypoints"),Object(p.b)("table",null,Object(p.b)("thead",{parentName:"table"},Object(p.b)("tr",{parentName:"thead"},Object(p.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"),Object(p.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Parameters"),Object(p.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Description"))),Object(p.b)("tbody",{parentName:"table"},Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"register")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"a")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Called by ",Object(p.b)("inlineCode",{parentName:"td"},"chairman")," to register a new voter at address ",Object(p.b)("inlineCode",{parentName:"td"},"a")," and remaining votes at ",Object(p.b)("inlineCode",{parentName:"td"},"maxvotes"),".")),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"add_idea")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"ititle"),", ",Object(p.b)("inlineCode",{parentName:"td"},"description")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Adds an idea in the box if box not terminated (",Object(p.b)("em",{parentName:"td"},"anyone")," can add an idea).")),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"vote")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"n"),", ",Object(p.b)("inlineCode",{parentName:"td"},"weight")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Called by a voter to increment by ",Object(p.b)("inlineCode",{parentName:"td"},"weight")," the number of votes of idea ",Object(p.b)("inlineCode",{parentName:"td"},"n"),". It fails if box is terminated.")),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"terminate")),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null})),Object(p.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Called by ",Object(p.b)("inlineCode",{parentName:"td"},"chairman")," to close the box and select the top 3 best ideas with numbers of votes above ",Object(p.b)("inlineCode",{parentName:"td"},"maxvotes"),".")))),Object(p.b)("h2",{id:"originate"},"Originate"),Object(p.b)("p",null,"Originate a switch contract with the widget below."),Object(p.b)("p",null,'Click "Connect to Wallet" button, fill the fields "Owner" and "Rate", and click "Originate".'),Object(p.b)(S,{mdxType:"DeployIdeaBox"}),Object(p.b)("h3",{id:"command-line"},"Command line"),Object(p.b)("p",null,"Originate the contract from ",Object(p.b)("a",{href:"https://archetype-lang.org/"},"Archetype")," code below with the following ",Object(p.b)(s.a,{to:"/docs/cli",mdxType:"Link"},"Completium CLI")," example command:"),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{}),"completium-cli deploy ideabox.arl --init '(@tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG, 5)'\n")),Object(p.b)("p",null,"The command sets:"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"chairman")," variable to ",Object(p.b)("inlineCode",{parentName:"li"},"tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"maxvotes")," variable to 2.5")),Object(p.b)("h2",{id:"code"},"Code"),Object(p.b)(o.a,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"},{label:"Scenario",value:"scenario"},{label:"Specification",value:"specification"}],mdxType:"Tabs"},Object(p.b)(c.a,{value:"archetype",mdxType:"TabItem"},Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{className:"language-archetype",metastring:'title="ideabox.arl"',title:'"ideabox.arl"'}),"archetype ideasbox(chairman : address, maxvotes : nat)\n\nstates =\n| Activated initial\n| Terminated\n\nasset idea {\n  id       : nat;\n  title    : bytes;\n  desc     : bytes;\n  nbvotes  : nat = 0;\n  creation : date;\n  author   : address;\n}\n\nasset voter {\n  addr      : address;\n  remaining : nat = maxvotes;\n}\n\nasset selected {\n  sid : nat;\n}\n\nentry register (a_voter : address) {\n  called by chairman\n  require {\n    r0 : state = Activated;\n  }\n  effect { voter.add({ addr = a_voter }) }\n}\n\nentry add_idea(ititle : bytes, description : bytes) {\n  require {\n    r1 : state = Activated;\n  }\n  effect {\n    idea.add({\n      id       = idea.count();\n      title    = ititle;\n      desc     = description;\n      creation = now;\n      author   = caller\n    })\n  }\n}\n\nentry vote(n : nat, weight : nat) {\n  require {\n    r2 : voter.contains(caller);\n    r3 : voter[caller].remaining >= weight;\n    r4 : state = Activated;\n  }\n  effect {\n    voter[caller].remaining -= weight;\n    idea[n].nbvotes += weight;\n  }\n}\n\ntransition terminate () {\n  called by chairman\n  from Activated\n  to Terminated\n  with effect {\n    for i in idea.select(the.nbvotes > maxvotes).sort(desc(nbvotes)).head(3) do\n        selected.add({i})\n    done\n  }\n}\n"))),Object(p.b)(c.a,{value:"michelson",mdxType:"TabItem"},Object(p.b)("p",null,"The ",Object(p.b)(s.a,{to:"/docs/contract/programming-language#micheslon",mdxType:"Link"},"Michelson")," code is generated with version 1.2.3 of Archetype."),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'# (Pair chairman (Pair maxvotes (Pair 0 (Pair {  } (Pair {  } {  })))))\n{\n  storage (pair (address %chairman) (pair (nat %maxvotes) (pair (nat %_state) (pair (map %idea nat (pair (bytes %title) (pair (bytes %desc) (pair (nat %nbvotes) (pair (timestamp %creation) (address %author)))))) (pair (map %voter address nat) (set %selected nat))))));\n  parameter (or (address %register) (or (pair %add_idea (bytes %ititle) (bytes %description)) (or (pair %vote (nat %n) (nat %weight)) (unit %terminate))));\n  code { UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { DIG 6;\n             DUP;\n             DUG 7;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             PUSH nat 0;\n             DIG 5;\n             DUP;\n             DUG 6;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCondition: r0";\n                 FAILWITH }\n               {  };\n             DIG 2;\n             DUP;\n             DUG 3;\n             DIG 1;\n             DUP;\n             DUG 2;\n             MEM;\n             IF\n               { PUSH string "KeyAlreadyExists";\n                 FAILWITH }\n               { DIG 2;\n                 DUP;\n                 DUG 3;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 SOME;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 UPDATE;\n                 DIP { DIG 2; DROP };\n                 DUG 2 };\n             DROP;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             NIL operation;\n             PAIR }\n           { IF_LEFT\n               { UNPAIR;\n                 SWAP;\n                 PUSH nat 0;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCondition: r1";\n                     FAILWITH }\n                   {  };\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 SIZE;\n                 MEM;\n                 IF\n                   { PUSH string "KeyAlreadyExists";\n                     FAILWITH }\n                   { DIG 4;\n                     DUP;\n                     DUG 5;\n                     SENDER;\n                     NOW;\n                     PAIR;\n                     PUSH nat 0;\n                     PAIR;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     PAIR;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     PAIR;\n                     SOME;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     SIZE;\n                     UPDATE;\n                     DIP { DIG 4; DROP };\n                     DUG 4 };\n                 DROP 2;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 NIL operation;\n                 PAIR }\n               { IF_LEFT\n                   { UNPAIR;\n                     SWAP;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     SENDER;\n                     MEM;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCondition: r2";\n                         FAILWITH }\n                       {  };\n                     DUP;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     SENDER;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     COMPARE;\n                     GE;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCondition: r3";\n                         FAILWITH }\n                       {  };\n                     PUSH nat 0;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCondition: r4";\n                         FAILWITH }\n                       {  };\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     SENDER;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     PUSH int 0;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     INT;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     SUB;\n                     COMPARE;\n                     GE;\n                     IF\n                       { DIG 2;\n                         DUP;\n                         DUG 3;\n                         INT;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         SUB;\n                         ABS }\n                       { PUSH string "AssignNat";\n                         FAILWITH };\n                     SOME;\n                     SENDER;\n                     UPDATE;\n                     DIP { DIG 4; DROP };\n                     DUG 4;\n                     DROP;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     UNPAIR;\n                     SWAP;\n                     UNPAIR;\n                     SWAP;\n                     UNPAIR;\n                     DROP;\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     CDR;\n                     CDR;\n                     CAR;\n                     ADD;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SOME;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     UPDATE;\n                     DIP { DIG 5; DROP };\n                     DUG 5;\n                     DROP 3;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     NIL operation;\n                     PAIR }\n                   { DROP;\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCaller";\n                         FAILWITH }\n                       {  };\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     DUP;\n                     PUSH nat 0;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { NIL nat;\n                         NIL nat;\n                         PUSH nat 0;\n                         PAIR;\n                         NIL nat;\n                         NIL nat;\n                         NIL nat;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         ITER { UNPAIR;\n                                DIG 12;\n                                DUP;\n                                DUG 13;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                CDR;\n                                CDR;\n                                CAR;\n                                COMPARE;\n                                GT;\n                                IF\n                                  { DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CONS }\n                                  { DIG 2;\n                                    DUP;\n                                    DUG 3 };\n                                DIP { DIG 2; DROP };\n                                DUG 2;\n                                DROP 2 };\n                         ITER { DIG 1;\n                                DUP;\n                                DUG 2;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                CONS;\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         ITER { DIG 7;\n                                DUP;\n                                DUG 8;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                GET;\n                                IF_NONE\n                                  { PUSH string "GetNoneValue";\n                                    FAILWITH }\n                                  {  };\n                                NIL nat;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                SOME;\n                                PAIR;\n                                DIG 3;\n                                DUP;\n                                DUG 4;\n                                ITER { DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       CAR;\n                                       DIG 2;\n                                       DUP;\n                                       DUG 3;\n                                       CDR;\n                                       DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       IF_NONE\n                                         { DUP;\n                                           DIG 3;\n                                           DUP;\n                                           DUG 4;\n                                           CONS;\n                                           DIG 2;\n                                           DUP;\n                                           DUG 3;\n                                           PAIR }\n                                         { PUSH int 0;\n                                           DIG 14;\n                                           DUP;\n                                           DUG 15;\n                                           DIG 5;\n                                           DUP;\n                                           DUG 6;\n                                           GET;\n                                           IF_NONE\n                                             { PUSH string "GetNoneValue";\n                                               FAILWITH }\n                                             {  };\n                                           DIG 7;\n                                           DUP;\n                                           DUG 8;\n                                           CDR;\n                                           CDR;\n                                           CAR;\n                                           DIG 1;\n                                           DUP;\n                                           DUG 2;\n                                           CDR;\n                                           CDR;\n                                           CAR;\n                                           COMPARE;\n                                           LT;\n                                           IF\n                                             { PUSH int 1 }\n                                             { PUSH int 0 };\n                                           DIP { DROP };\n                                           COMPARE;\n                                           GT;\n                                           IF\n                                             { DIG 1;\n                                               DUP;\n                                               DUG 2;\n                                               DIG 7;\n                                               DUP;\n                                               DUG 8;\n                                               CONS;\n                                               DIG 4;\n                                               DUP;\n                                               DUG 5;\n                                               CONS;\n                                               NONE nat;\n                                               PAIR }\n                                             { DIG 1;\n                                               DUP;\n                                               DUG 2;\n                                               DIG 4;\n                                               DUP;\n                                               DUG 5;\n                                               CONS;\n                                               DIG 3;\n                                               DUP;\n                                               DUG 4;\n                                               PAIR };\n                                           SWAP;\n                                           DROP };\n                                       DIP { DROP };\n                                       DIP { DROP };\n                                       DIP { DIG 1; DROP };\n                                       DUG 1;\n                                       DROP };\n                                DUP;\n                                CAR;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                CDR;\n                                NIL nat;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                IF_NONE\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2 }\n                                  { DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    DIG 7;\n                                    DUP;\n                                    DUG 8;\n                                    CONS;\n                                    SWAP;\n                                    DROP };\n                                ITER { DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       CONS;\n                                       DIP { DIG 1; DROP };\n                                       DUG 1;\n                                       DROP };\n                                DIP { DROP };\n                                DIP { DROP };\n                                DIP { DROP };\n                                DIP { DROP };\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         ITER { PUSH nat 3;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                CAR;\n                                COMPARE;\n                                LT;\n                                IF\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CDR;\n                                    DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CONS;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR }\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CDR;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR };\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         CDR;\n                         ITER { DIG 1;\n                                DUP;\n                                DUG 2;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                CONS;\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         ITER { DIG 2;\n                                DUP;\n                                DUG 3;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                MEM;\n                                IF\n                                  { PUSH string "KeyAlreadyExists";\n                                    FAILWITH }\n                                  { DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    PUSH bool True;\n                                    DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    UPDATE;\n                                    DIP { DIG 2; DROP };\n                                    DUG 2 };\n                                DROP };\n                         PUSH nat 1;\n                         DIP { DIG 4; DROP };\n                         DUG 4 }\n                       { PUSH string "InvalidState";\n                         FAILWITH };\n                     DROP;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     NIL operation;\n                     PAIR } } } };\n}\n'))),Object(p.b)(c.a,{value:"scenario",mdxType:"TabItem"},Object(p.b)("p",null,"The ",Object(p.b)(s.a,{to:"/docs/contract/test-scenario",mdxType:"Link"},"scenario")," assumes three accounts are available:"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"admin"),", the current one"),Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"alice")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"bob"))),Object(p.b)("p",null,"To run the test, run the following script:"),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{}),"cd ideabox\nnpm install\nnpm test\n")),Object(p.b)("p",null,"in the ",Object(p.b)(s.a,{to:"/docs/dapp-tools/gitpod#user-interface",mdxType:"Link"},"Terminal")," of the gitpod environment:"),Object(p.b)(C.a,{url:"https://gitpod.io/#https://github.com/edukera/completium-contract-templates",txt:"open gitpod",mdxType:"DappButton"}),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js",metastring:'title="test.js"',title:'"test.js"'}),"const assert     = require('assert');\nconst Completium = require('@completium/completium-cli');\n\nconst test = async () => {\n  const completium = new Completium ();\n  await completium.originate('ideabox.arl', {\n    init: '(' + completium.getAddress('admin') + ',5)'\n  });\n  // add 4 ideas\n  await completium.call('ideabox', {\n    entry : 'add_idea',\n    with  : '(0x1a85302e204e0860760ce002008b409e2825bc0c607b015d631100ccf49100ddc28e7880,0x248020ee0f60ae03602621812c0d60531005c22003809c25c2019c34c00b010d311838d2a06109f5c03a100630803b129037c790803741497807310016c9324c55f004f10a2d2634f8abf1054e44062569c24247945eb4f88006a9bb6e9220e15358cb85102b1be4ea054b2fa60cae4d4b42ad020e868b83ed0c204485c923230106058380410e20c58141800466826ea543050180066ac8518b27c682a9c001299681ac2b2ba6af89a540ada2eb9f98d0a484aaaaee696d62e95303e7e887c529c00ca10b2185d68bcaed0c530e134b316d0d620b61a5a3a7a6ead2000828bea8e0f8848e2d237870626b1968b8038096c9575b80a6de12041529510190b8507c14c54001a3a081a81a6c9e1245e3c01d784832be978080c84050203ab0806888625448011a83406e06d061014632a98e6571b0d46adc841f0b83c95b28b1a07914828b452be84ee41c09170557c1483010902f0d059000a9d86ec21e2c970507bbb080)'\n  });\n  await completium.call('ideabox', {\n    entry : 'add_idea',\n    with  : '(0x1285306e096620040e204302d8804e06718184036057008c6015403b1c07b018c06b100130108800,0x0a87b0040ee01620b6604b00b996043027980c6201db6029804e7803460092612502780d6558033800e85a4c06623134c00ae2cd1e00262cc086e54c6700c27cd803a308561b00362032142934589cc291c1207b31102d26d426002a9e64848c065246893e80f4f345a189a240c181c873898209b3e2c8292aaaf3f0820bf00399a2c3d1a581e21110db2023eaa8020819c5a22b10a9a86b6aebdb521001ba11e182f20a47b6d30821a0b3c3d14b7370936580038a679983ca6a08011a39e36b6032b8d382c16360999b10b2a803abda0d8306e2c2c377216349a9e1f4b00cb1224823d5f135c954276cc0c44200169e8ef64209bcd35991de68b15939d69b231f12e1d68905bc46583a896e63a1b120c8282b0be084d1a1f8f8bcb7190c73009c4929142d010925c6c1f14742602eed08cae2e1a64ab5454146a0b0f4b970269e84c1166d0844c164df6ef43a48d8a96c14106936e159e0943f98b94aa601eb18600c0a59440000)'\n  });\n  await completium.call('ideabox', {\n    entry : 'add_idea',\n    with  : '(0x130060a40040260960ce06303d815c07601709206638806e31402992100e602180b624454208971c4804e30b10e1c4038806100aa11e03682c127000e18612344000,0x130060a40040260960ce06303d815c07601709206638806e31402992100e602180b624454208971c4804e30b10e1c4038806100aa10024805900f210d840c002de2caa44d05381003baa003650200077624306009e1068a040a2093470509f1a4aa08e8601d25539b17d1c152e890f94807b040986150c087b2680190400108a74393b3a04002338000d2e402b243268242e3e150f0916bc8c1d26a1892479a440118a160c161c09090d26ae8c0035bd00440f40c0051c00250439aa1595259a3f54003d1695260402aa838001963b7b1218e2e99864444911e680328028a6c00cb3fc81d612ca11cb968e2c3753c9c886558f0f89d2c04d8c481a391e06813a4cd0f63c09010182f100)'\n  });\n  await completium.call('ideabox', {\n    entry : 'add_idea',\n    with  : '(0x3884b06602e0040c2086027009819c0846a0,0x3a80b09e0040c608607601708124201b03d8c026102da4039809601992b004ed80ce131886fa431450602ba210d4c220c24a861a00ee30c1d0100dc02984181001188f851e42261c6bce93401d04190d0844d1165c1a1d28681428cc396643caab4228e2fdf3cd1aee050cd289d64d10c20013538156df18868684c21389031020024015401c4014452001d0a312810b9bcc0235000adb491b565700104f06000bdd3e8ac116470534851b0fa01854b0b0d494a5c1220e529216c6178e1ab3d961494d0349908992989084091cc099554e1d53dbc41531da5927d0bc09360d1a061a823f200545000e47e0079080fc32c80032840467940564004a91080001400327966842f200426c440507f484419a107846351a0847fc20408018ad34120800888200425908721fe790854380c8305448108880438164fd100000)'\n  });\n  try {\n    await completium.call('ideabox', {\n      entry : 'vote',\n      with  : '(0,1)',\n      as    : 'alice'\n    });\n    assert(false, \"Non Registered Voter Should Not Be Able To Vote.\");\n  } catch (e) {\n    assert(true);\n  }\n  await completium.call('ideabox', {\n    entry : 'register',\n    with  : completium.getAddress('alice'),\n  });\n  await completium.call('ideabox', {\n    entry : 'vote',\n    with  : '(0,5)',\n    as    : 'alice'\n  });\n  try {\n    await completium.call('ideabox', {\n      entry : 'vote',\n      with  : '(0,5)',\n      as    : 'alice'\n    });\n    assert(false, \"Voter Should Not Be Able To Vote More Than 5 Times.\");\n  } catch (e) {\n    assert(true);\n  }\n  await completium.call('ideabox', {\n    entry : 'register',\n    with  : completium.getAddress('bob'),\n  });\n  await completium.call('ideabox', {\n    entry : 'vote',\n    with  : '(0,1)',\n    as    : 'bob'\n  });\n  await completium.call('ideabox', {\n    entry : 'vote',\n    with  : '(1,4)',\n    as    : 'bob'\n  });\n  await completium.call('ideabox', { entry : 'terminate' });\n  // Check nb votes and that only idea 0 is selected\n  const storage = await completium.getStorage('ideabox');\n  const idea0 = storage.idea.get('0');\n  const idea1 = storage.idea.get('1');\n  const nbvotes_0 = idea0[Object.keys(idea0)[3]].toNumber();\n  const nbvotes_1 = idea1[Object.keys(idea0)[3]].toNumber();\n  assert(nbvotes_0 == 6, \"Invalid Number Of Votes Idea 0\");\n  assert(nbvotes_1 == 4, \"Invalid Number Of Votes Idea 1\");\n  assert(true);\n}\n\ntest();\n"))),Object(p.b)(c.a,{value:"specification",mdxType:"TabItem"},Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{className:"language-archetype",metastring:'title="ideabox.arl"',title:'"ideabox.arl"'}),'specification {\n  i1 : maxvotes * voter.count() = idea.sum(nbvotes) + voter.sum(remaining)\n}\n\nspecification entry add_idea(ititle : bytes, description : bytes) {\n  fails {\n    add_idea_f1 with (msg : string) :\n      msg = "InvalidState" and\n      state <> Activated;\n    add_idea_f2 with (msg : string) :\n      msg = "KeyAlreadyExists" and\n      false;\n  }\n  postcondition add_idea_p1 {\n    forall i in added.idea, i.id = before.idea.count() and\n    added.idea.count() = 1\n  }\n}\n\nspecification entry register(a_voter : address) {\n  fails {\n    register_f1 with (msg : string) :\n      msg = "InvalidState" and\n      state <> Activated;\n    register_f2 with (msg : string) :\n      msg = "InvalidCaller" and\n      caller <> chairman;\n    register_f3 with (msg : string) :\n      msg = "KeyAlreadyExists" and\n      voter.contains(a_voter);\n  }\n  postcondition register_p1 {\n    forall v in added.voter, v.addr = a_voter and\n    added.voter.count() = 1\n  }\n}\n\nspecification entry vote (n : nat, weight : nat) {\n  fails {\n    f0 with (msg : string) :\n      msg = "GetNoneValue" and\n      (not voter.contains(caller) or not idea.contains(n));\n    f1 with (msg : string) :\n      let some v = voter[caller] in\n        v.remaining < weight\n      otherwise true;\n    f2 with (msg : string) :\n      msg = "InvalidState" and\n      state <> Activated;\n  }\n  postcondition p1 {\n    let some v = voter[caller] in\n    let some bv = before.voter[caller] in\n      v.remaining = bv.remaining - weight\n    otherwise true otherwise true\n  }\n  postcondition p2 {\n    let some i = idea[n] in\n    let some bi = before.idea[n] in\n      i.nbvotes = bi.nbvotes + weight\n    otherwise true otherwise true\n  }\n}\n\nspecification entry terminate () {\n  postcondition p3 {\n    before.state = Activated ->\n    selected.count() <= 3\n  }\n  postcondition p4 {\n    before.state = Activated ->\n    forall s in selected,\n      let some i = idea[s.sid] in\n        i.nbvotes > maxvotes and\n        forall o in idea,\n          not selected.contains(o.id) ->\n          o.nbvotes <= i.nbvotes\n      otherwise false\n  }\n}\n')))))}L.isMDXComponent=!0},254:function(n,t,e){"use strict";e.d(t,"a",(function(){return p})),e.d(t,"f",(function(){return s})),e.d(t,"e",(function(){return o})),e.d(t,"b",(function(){return c})),e.d(t,"d",(function(){return l})),e.d(t,"c",(function(){return d}));var r=e(0),i=e.n(r),a=e(263),m=e(324);const[p,s,o,c,l,d]=Object(a.a)((function({appName:n}){const[{wallet:t,tezos:e,accountPkh:r},a]=i.a.useState((()=>({wallet:null,tezos:null,accountPkh:null}))),p=Boolean(e);i.a.useEffect((()=>m.a.onAvailabilityChange((t=>{a({wallet:t?new m.a(n):null,tezos:null,accountPkh:null})}))),[a,n]);const s=i.a.useCallback((async(n,e)=>{try{if(!t)throw new Error("Thanos Wallet not available");await t.connect(n,e);const r=t.toTezos(),i=await r.wallet.pkh();a({wallet:t,tezos:r,accountPkh:i})}catch(r){alert(`Failed to connect ThanosWallet: ${r.message}`)}}),[a,t]);return{wallet:t,tezos:e,accountPkh:r,ready:p,connect:s}}),(n=>n.wallet),(n=>n.tezos),(n=>n.accountPkh),(n=>n.ready),(n=>n.connect))},255:function(n,t,e){"use strict";e.d(t,"a",(function(){return a})),e.d(t,"b",(function(){return m}));var r=e(0),i=e(263);const[a,m]=Object(i.a)((function(){const[n,t]=Object(r.useState)({show:!1,severity:"info",msg:""});return{snackState:n,setInfoSnack:n=>{t({show:!0,severity:"info",msg:n})},setErrorSnack:n=>{t({show:!0,severity:"error",msg:n})},hideSnack:()=>{t((n=>({...n,show:!1})))}}}))},280:function(n,t,e){"use strict";var r=e(3),i=e(0),a=e.n(i),m=e(609),p=e(606),s=e(323),o=e(255);function c(n){return a.a.createElement(p.a,Object(r.a)({elevation:6,variant:"filled"},n))}t.a=()=>{const{snackState:n}=Object(o.b)();Object(s.a)();return a.a.createElement(m.a,{open:n.show},a.a.createElement(c,{severity:n.severity},n.msg))}},284:function(n,t,e){"use strict";var r=e(0),i=e.n(r),a=e(254);var m=e(591),p=e(597),s=e(323);t.a=n=>{const t=Object(s.a)(),e=Object(a.d)(),r=Object(a.f)(),o=Object(a.c)(),c=i.a.useCallback((n=>async()=>{try{await o(n?"mainnet":"edo2net")}catch(t){alert(t.message)}}),[o]);return e?i.a.createElement("div",null):r?i.a.createElement(m.a,{variant:"outlined",color:t.palette.text.primary,onClick:c(n.main)},"connect to wallet"):i.a.createElement(p.a,{href:"https://templewallet.com/",rel:"noopener",underline:"none"},i.a.createElement(m.a,{variant:"contained",disableElevation:!0,style:{backgroundColor:"#ed8936",color:"white",fontWeight:"bold"}},"install Temple"))}},314:function(n,t){},315:function(n,t){},319:function(n,t){},320:function(n,t){},321:function(n,t){},322:function(n,t){},346:function(n,t,e){n.exports=e(347)},347:function(n,t,e){var r=function(n){"use strict";var t,e=Object.prototype,r=e.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",m=i.asyncIterator||"@@asyncIterator",p=i.toStringTag||"@@toStringTag";function s(n,t,e){return Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}),n[t]}try{s({},"")}catch(S){s=function(n,t,e){return n[t]=e}}function o(n,t,e,r){var i=t&&t.prototype instanceof P?t:P,a=Object.create(i.prototype),m=new j(r||[]);return a._invoke=function(n,t,e){var r=l;return function(i,a){if(r===D)throw new Error("Generator is already running");if(r===b){if("throw"===i)throw a;return E()}for(e.method=i,e.arg=a;;){var m=e.delegate;if(m){var p=N(m,e);if(p){if(p===g)continue;return p}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===l)throw r=b,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=D;var s=c(n,t,e);if("normal"===s.type){if(r=e.done?b:d,s.arg===g)continue;return{value:s.arg,done:e.done}}"throw"===s.type&&(r=b,e.method="throw",e.arg=s.arg)}}}(n,e,m),a}function c(n,t,e){try{return{type:"normal",arg:n.call(t,e)}}catch(S){return{type:"throw",arg:S}}}n.wrap=o;var l="suspendedStart",d="suspendedYield",D="executing",b="completed",g={};function P(){}function I(){}function u(){}var U={};U[a]=function(){return this};var G=Object.getPrototypeOf,O=G&&G(G(y([])));O&&O!==e&&r.call(O,a)&&(U=O);var f=u.prototype=P.prototype=Object.create(U);function h(n){["next","throw","return"].forEach((function(t){s(n,t,(function(n){return this._invoke(t,n)}))}))}function A(n,t){function e(i,a,m,p){var s=c(n[i],n,a);if("throw"!==s.type){var o=s.arg,l=o.value;return l&&"object"==typeof l&&r.call(l,"__await")?t.resolve(l.__await).then((function(n){e("next",n,m,p)}),(function(n){e("throw",n,m,p)})):t.resolve(l).then((function(n){o.value=n,m(o)}),(function(n){return e("throw",n,m,p)}))}p(s.arg)}var i;this._invoke=function(n,r){function a(){return new t((function(t,i){e(n,r,t,i)}))}return i=i?i.then(a,a):a()}}function N(n,e){var r=n.iterator[e.method];if(r===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=t,N(n,e),"throw"===e.method))return g;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var i=c(r,n.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,g;var a=i.arg;return a?a.done?(e[n.resultName]=a.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=t),e.delegate=null,g):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,g)}function R(n){var t={tryLoc:n[0]};1 in n&&(t.catchLoc=n[1]),2 in n&&(t.finallyLoc=n[2],t.afterLoc=n[3]),this.tryEntries.push(t)}function v(n){var t=n.completion||{};t.type="normal",delete t.arg,n.completion=t}function j(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(R,this),this.reset(!0)}function y(n){if(n){var e=n[a];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var i=-1,m=function e(){for(;++i<n.length;)if(r.call(n,i))return e.value=n[i],e.done=!1,e;return e.value=t,e.done=!0,e};return m.next=m}}return{next:E}}function E(){return{value:t,done:!0}}return I.prototype=f.constructor=u,u.constructor=I,I.displayName=s(u,p,"GeneratorFunction"),n.isGeneratorFunction=function(n){var t="function"==typeof n&&n.constructor;return!!t&&(t===I||"GeneratorFunction"===(t.displayName||t.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,u):(n.__proto__=u,s(n,p,"GeneratorFunction")),n.prototype=Object.create(f),n},n.awrap=function(n){return{__await:n}},h(A.prototype),A.prototype[m]=function(){return this},n.AsyncIterator=A,n.async=function(t,e,r,i,a){void 0===a&&(a=Promise);var m=new A(o(t,e,r,i),a);return n.isGeneratorFunction(e)?m:m.next().then((function(n){return n.done?n.value:m.next()}))},h(f),s(f,p,"Generator"),f[a]=function(){return this},f.toString=function(){return"[object Generator]"},n.keys=function(n){var t=[];for(var e in n)t.push(e);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},n.values=y,j.prototype={constructor:j,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(v),!n)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=t)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function i(r,i){return p.type="throw",p.arg=n,e.next=r,i&&(e.method="next",e.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var m=this.tryEntries[a],p=m.completion;if("root"===m.tryLoc)return i("end");if(m.tryLoc<=this.prev){var s=r.call(m,"catchLoc"),o=r.call(m,"finallyLoc");if(s&&o){if(this.prev<m.catchLoc)return i(m.catchLoc,!0);if(this.prev<m.finallyLoc)return i(m.finallyLoc)}else if(s){if(this.prev<m.catchLoc)return i(m.catchLoc,!0)}else{if(!o)throw new Error("try statement without catch or finally");if(this.prev<m.finallyLoc)return i(m.finallyLoc)}}}},abrupt:function(n,t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===n||"continue"===n)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var m=a?a.completion:{};return m.type=n,m.arg=t,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(m)},complete:function(n,t){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&t&&(this.next=t),g},finish:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.finallyLoc===n)return this.complete(e.completion,e.afterLoc),v(e),g}},catch:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.tryLoc===n){var r=e.completion;if("throw"===r.type){var i=r.arg;v(e)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,r){return this.delegate={iterator:y(n),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=t),g}},n}(n.exports);try{regeneratorRuntime=r}catch(i){Function("r","regeneratorRuntime = r")(r)}},348:function(n,t,e){"use strict";function r(n,t,e,r,i,a,m){try{var p=n[a](m),s=p.value}catch(o){return void e(o)}p.done?t(s):Promise.resolve(s).then(r,i)}function i(n){return function(){var t=this,e=arguments;return new Promise((function(i,a){var m=n.apply(t,e);function p(n){r(m,i,a,p,s,"next",n)}function s(n){r(m,i,a,p,s,"throw",n)}p(void 0)}))}}e.d(t,"a",(function(){return i}))}}]);