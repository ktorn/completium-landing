(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{182:function(n,t,e){"use strict";e.r(t),e.d(t,"frontMatter",(function(){return c})),e.d(t,"metadata",(function(){return P})),e.d(t,"toc",(function(){return d})),e.d(t,"default",(function(){return s}));var a=e(3),r=e(7),i=(e(0),e(228)),b=e(229),l=e(243),o=e(244),c={id:"template5",title:"ICO",sidebar_label:"ICO",slug:"/templates/ico"},P={unversionedId:"templates/template5",id:"templates/template5",isDocsHomePage:!1,title:"ICO",description:"Introduction",source:"@site/docs/templates/template5.md",slug:"/templates/ico",permalink:"/docs/templates/ico",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template5.md",version:"current",sidebar_label:"ICO",sidebar:"templates",previous:{title:"DEX",permalink:"/docs/templates/dex"},next:{title:"Autocallable note",permalink:"/docs/templates/acn"}},d=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Code",id:"code",children:[]}],I={toc:d};function s(n){var t=n.components,e=Object(r.a)(n,["components"]);return Object(i.b)("wrapper",Object(a.a)({},I,e,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"introduction"},"Introduction"),Object(i.b)("p",null,"This ICO process is inspired by the 2018 BCDiploma's ICO described in this ",Object(i.b)("a",{href:"https://github.com/VinceBCD/BCDiploma/tree/master/sources/BCDT/contracts/BCDToken"},"document"),"."),Object(i.b)("p",null,"Contributors are whitlisted with their address to participate in the ICO. Two whitelists are available:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("em",{parentName:"li"},"silver")," whitelist, with a contribution limit of 10 XTZ maximum"),Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("em",{parentName:"li"},"gold")," whitelist, without contribution limit")),Object(i.b)("p",null,"The minimum transaction is 0.1 XTZ. 100,000,000 tokens go on sale. The ICO takes place in 3 rounds, with a contribution limit for each, and gives rise to different bonuses:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Presale"),", limited to 1800 XTZ, grant 20% more tokens at the time of the contribution"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Round 1"),", limited to the presale cap + 1800 XTZ, grant 10% more tokens during the contribution"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Round 2")," does not give rise to a bonus, limited to the 100 000 000 tokens put up for sale. The XTZ/TOKEN rate is set at 80.")),Object(i.b)("p",null,"If the cap is reached for each of these rounds, the round is automatically completed. Otherwise, the round can be completed manually by the owner of the smartcontract."),Object(i.b)("p",null,"Token ownership is handled by a ",Object(i.b)(b.a,{to:"/docs/templates/fa12",mdxType:"Link"},"FA 1.2 fungible token")," smart contract. Initial tokens are owned by the ICO contract owner."),Object(i.b)("h2",{id:"api"},"API"),Object(i.b)("h3",{id:"storage"},"Storage"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"owner")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"address")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Address of the contract and intital tokens owner.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"token")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"address")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Address of the FA 1.2 fungible token.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"min_contribution")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"tez")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Minimum contribution")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"max_contribution_silver")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"tez")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Maximum contribution for ",Object(i.b)("em",{parentName:"td"},"Silver")," contributors")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"max_token_to_sell")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"nat")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Number of tokens to sell.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"exchange_rate_tez_tok")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"nat")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Number of tokens to receive for 1 tez")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"presale_cap")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"tez")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Number of tezies raised at the end of ",Object(i.b)("em",{parentName:"td"},"presale")," phase")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"round1_cap")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"tez")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Number of tezies raised at the end of ",Object(i.b)("em",{parentName:"td"},"Round 1")," phase")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"nb_tok_sold")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"nat")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Number of tokens sold.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"nb_tez_raised")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"tez")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Number of tezis raised.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"contributor")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"collection")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"A contributor is defined by:",Object(i.b)("ul",null,Object(i.b)("li",null,"address"),Object(i.b)("li",null,"type ",Object(i.b)("em",{parentName:"td"},"Silver")," or ",Object(i.b)("em",{parentName:"td"},"Gold")),Object(i.b)("li",null,"Contribution in tezis")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"vstate")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"gstate")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Contract state")))),Object(i.b)("h3",{id:"entrypoints"},"Entrypoints"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Parameters"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"register")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"a"),", ",Object(i.b)("inlineCode",{parentName:"td"},"t")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Registers address ",Object(i.b)("inlineCode",{parentName:"td"},"a")," as contributor in whitelist type ",Object(i.b)("inlineCode",{parentName:"td"},"t"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"startpresale")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"owner")," can start ",Object(i.b)("em",{parentName:"td"},"Presale")," phase.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"startround1")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"owner")," can start ",Object(i.b)("em",{parentName:"td"},"Round 1")," phase.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"startround2")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"owner")," can start ",Object(i.b)("em",{parentName:"td"},"Round 2")," phase.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"finishphase")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"owner")," can finish ICO phase.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"contribute")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"A registered contributor tranfers tezies to this entrypoint and receive tokens in exchange.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"collectraised")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"owner")," can collect contract balance.")))),Object(i.b)("h2",{id:"code"},"Code"),Object(i.b)(l.a,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"archetype",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-archetype",metastring:'title="ico.arl"',title:'"ico.arl"'}),"archetype ico(owner : address, token : address)\n\nvariable min_contribution : tez        = 0.1tz\nvariable max_contribution_silver : tez = 10tz\n\nvariable max_token_to_sell     : nat = 100_000_000\nvariable exchange_rate_tez_tok : nat = 80 (* one tez is 80 tokens *)\n\nvariable presales_cap : tez = 1800tz\nvariable round1_cap   : tez = 3600tz\n\nvariable nb_tok_sold   : nat = 0\nvariable nb_tez_raised : tez = 0tz\n\nenum whitelist =\n| Silver\n| Gold\n\nasset contributor identified by id {\n   id           : address;\n   typ          : whitelist;\n   contribution : tez = 0tz;\n}\n\nenum gstate =\n| Init initial\n| PresaleRunning\n| PresaleFinished\n| Round1Running\n| Round1Finished\n| Round2Running\n| Round2Finished\n\nvariable vstate : gstate = Init\n\n\nfunction is_running () : bool {\n  return\n    match vstate with\n    | PresaleRunning | Round1Running | Round2Running -> true\n    | _ -> false\n    end\n}\n\nfunction get_rate () : rational {\n  var coeff : rational =\n    match vstate with\n    | PresaleRunning  -> 1.2\n    | Round1Running   -> 1.1\n    | _               -> 1\n    end;\n  return (coeff * exchange_rate_tez_tok)\n}\n\nfunction get_remaining_tez_to_raise () : tez {\n  return\n    match vstate with\n    | PresaleRunning | PresaleFinished -> presales_cap - nb_tez_raised\n    | Round1Running  | Round1Finished  -> round1_cap - nb_tez_raised\n    | _ -> (((max_token_to_sell - nb_tok_sold) / exchange_rate_tez_tok) * 1tz)\n    end\n}\n\nfunction transition_to_finished () : gstate {\n  return\n    match vstate with\n    | PresaleRunning -> PresaleFinished\n    | Round1Running  -> Round1Finished\n    | Round1Finished -> Round2Running\n    | _              -> Round2Finished\n    end\n}\n\nentry register(a : address, t : whitelist) {\n  called by owner\n  require { r0 : vstate = Init }\n  effect { contributor.add({ id = a; typ = t }) }\n}\n\nentry startpresales() {\n  called by owner\n  require { r1 : vstate = Init }\n  effect { vstate := PresaleRunning }\n}\n\nentry startround1() {\n    called by owner\n    require { r2: vstate = PresaleFinished }\n    effect { vstate := Round1Running }\n}\n\nentry startround2() {\n    called by owner\n    require { r3: vstate = Round1Finished }\n    effect { vstate := Round2Running }\n}\n\nentry finishphase () {\n  called by owner\n  require { r4: is_running() }\n  effect { vstate := transition_to_finished() }\n}\n\nentry contribute () {\n  require {\n     c1 : contributor.contains(caller);\n     c2 : is_running ();\n     c3 : transferred >= min_contribution;\n  }\n  effect {\n    (* cap contribution to max_contrib if necessary *)\n    var contrib = transferred;\n    if    contributor[caller].typ = Silver\n      and contributor[caller].contribution + contrib >= max_contribution_silver\n    then contrib := max_contribution_silver - contributor[caller].contribution;\n    (* cap contribution to round cap if necessary *)\n    var remaining_tez : tez = get_remaining_tez_to_raise ();\n    if remaining_tez <= contrib\n    then (\n      contrib := remaining_tez;\n      vstate := transition_to_finished ()\n    );\n    (* convert contribution to nb of bcd tokens *)\n    var nb_tokens : nat = get_rate() * contrib;\n    (* transfer tokens to contributor *)\n    transfer 0tz to token\n        call %transfer<address * address * nat>((owner, caller, nb_tokens));\n    (* update ico stats *)\n    nb_tok_sold   += nb_tokens;\n    nb_tez_raised += contrib;\n    (* update caller's contribution *)\n    contributor[caller].contribution += contrib;\n    if contrib <= transferred\n    then transfer (transferred - contrib) to caller\n  }\n}\n\nentry collectraised () {\n    called by owner\n    require { r5: vstate = Round2Finished }\n    effect { transfer balance to owner }\n}\n"))),Object(i.b)(o.a,{value:"michelson",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'# (Pair owner (Pair token (Pair 100000 (Pair 10000000 (Pair 100000000 (Pair 80 (Pair 1800000000 (Pair 3600000000 (Pair 0 (Pair 0 (Pair 0 {  })))))))))))\n{\n  storage (pair (address %owner) (pair (address %token) (pair (mutez %min_contribution) (pair (mutez %max_contribution_silver) (pair (nat %max_token_to_sell) (pair (nat %exchange_rate_tez_tok) (pair (mutez %presales_cap) (pair (mutez %round1_cap) (pair (nat %nb_tok_sold) (pair (mutez %nb_tez_raised) (pair (nat %vstate) (map %contributor address (pair (nat %typ) (mutez %contribution))))))))))))));\n  parameter (or (pair %register (address %a) (nat %t)) (or (unit %startpresales) (or (unit %startround1) (or (unit %startround2) (or (unit %finishphase) (or (unit %contribute) (unit %collectraised)))))));\n  code { LAMBDA\n           nat\n           bool\n           { PUSH unit Unit;\n             DIG 1;\n             DUP;\n             DUG 2;\n             DUP;\n             PUSH nat 1;\n             COMPARE;\n             EQ;\n             IF\n               { PUSH bool True }\n               { DUP;\n                 PUSH nat 3;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { PUSH bool True }\n                   { DUP;\n                     PUSH nat 5;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { PUSH bool True }\n                       { PUSH bool False } } };\n             DIP { DROP };\n             SWAP;\n             DROP;\n             DUG 1;\n             DROP };\n         LAMBDA\n           (pair nat nat)\n           (pair int nat)\n           { UNPAIR;\n             SWAP;\n             PUSH unit Unit;\n             DIG 1;\n             DUP;\n             DUG 2;\n             DUP;\n             PUSH nat 1;\n             COMPARE;\n             EQ;\n             IF\n               { PUSH nat 5;\n                 PUSH int 6;\n                 PAIR }\n               { DUP;\n                 PUSH nat 3;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { PUSH nat 10;\n                     PUSH int 11;\n                     PAIR }\n                   { PUSH nat 1;\n                     PUSH int 1;\n                     PAIR } };\n             DIP { DROP };\n             PUSH nat 1;\n             DIG 4;\n             DUP;\n             DUG 5;\n             INT;\n             PAIR;\n             DIG 1;\n             DUP;\n             DUG 2;\n             PAIR;\n             UNPAIR;\n             DIP { UNPAIR };\n             UNPAIR;\n             DIP { SWAP };\n             MUL;\n             DIP { MUL };\n             PAIR;\n             DIP { DIG 1; DROP };\n             DUG 1;\n             DROP;\n             DUG 2;\n             DROP 2 };\n         LAMBDA\n           (pair nat (pair nat (pair nat (pair mutez (pair mutez (pair mutez nat))))))\n           mutez\n           { UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             PUSH unit Unit;\n             DIG 1;\n             DUP;\n             DUG 2;\n             DUP;\n             PUSH nat 1;\n             COMPARE;\n             EQ;\n             IF\n               { DIG 4;\n                 DUP;\n                 DUG 5;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 SUB }\n               { DUP;\n                 PUSH nat 2;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { DIG 4;\n                     DUP;\n                     DUG 5;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     SUB }\n                   { DUP;\n                     PUSH nat 3;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         SUB }\n                       { DUP;\n                         PUSH nat 4;\n                         COMPARE;\n                         EQ;\n                         IF\n                           { DIG 4;\n                             DUP;\n                             DUG 5;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             SUB }\n                           { PUSH mutez 1000000;\n                             PUSH nat 1;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             INT;\n                             PAIR;\n                             PUSH nat 1;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             INT;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             INT;\n                             SUB;\n                             PAIR;\n                             PAIR;\n                             UNPAIR;\n                             DIP { UNPAIR };\n                             UNPAIR;\n                             DIG 3;\n                             PUSH int 0;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             COMPARE;\n                             GE;\n                             IF\n                               { INT }\n                               { NEG };\n                             MUL;\n                             DIP { MUL; ABS };\n                             PAIR;\n                             PAIR;\n                             UNPAIR;\n                             UNPAIR;\n                             ABS;\n                             DIG 2;\n                             MUL;\n                             EDIV;\n                             IF_NONE\n                               { PUSH string "DivByZero";\n                                 FAILWITH }\n                               {  };\n                             CAR } } } };\n             DIP { DROP };\n             SWAP;\n             DROP;\n             DUG 7;\n             DROP 7 };\n         LAMBDA\n           nat\n           nat\n           { PUSH unit Unit;\n             DIG 1;\n             DUP;\n             DUG 2;\n             DUP;\n             PUSH nat 1;\n             COMPARE;\n             EQ;\n             IF\n               { PUSH nat 2 }\n               { DUP;\n                 PUSH nat 3;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { PUSH nat 4 }\n                   { DUP;\n                     PUSH nat 4;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { PUSH nat 5 }\n                       { PUSH nat 6 } } };\n             DIP { DROP };\n             SWAP;\n             DROP;\n             DUG 1;\n             DROP };\n         NIL operation;\n         DIG 5;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { UNPAIR;\n             SWAP;\n             DIG 13;\n             DUP;\n             DUG 14;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             PUSH nat 0;\n             DIG 4;\n             DUP;\n             DUG 5;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCondition: r0";\n                 FAILWITH }\n               {  };\n             DIG 2;\n             DUP;\n             DUG 3;\n             DIG 2;\n             DUP;\n             DUG 3;\n             MEM;\n             IF\n               { PUSH string "KeyAlreadyExists";\n                 FAILWITH }\n               { DIG 2;\n                 DUP;\n                 DUG 3;\n                 PUSH mutez 0;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 PAIR;\n                 SOME;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 UPDATE;\n                 DIP { DIG 2; DROP };\n                 DUG 2 };\n             DROP 2;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { DROP;\n                 DIG 11;\n                 DUP;\n                 DUG 12;\n                 SENDER;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCaller";\n                     FAILWITH }\n                   {  };\n                 PUSH nat 0;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCondition: r1";\n                     FAILWITH }\n                   {  };\n                 PUSH nat 1;\n                 DIP { DIG 1; DROP };\n                 DUG 1;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { IF_LEFT\n                   { DROP;\n                     DIG 11;\n                     DUP;\n                     DUG 12;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCaller";\n                         FAILWITH }\n                       {  };\n                     PUSH nat 2;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCondition: r2";\n                         FAILWITH }\n                       {  };\n                     PUSH nat 3;\n                     DIP { DIG 1; DROP };\n                     DUG 1;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR }\n                   { IF_LEFT\n                       { DROP;\n                         DIG 11;\n                         DUP;\n                         DUG 12;\n                         SENDER;\n                         COMPARE;\n                         EQ;\n                         NOT;\n                         IF\n                           { PUSH string "InvalidCaller";\n                             FAILWITH }\n                           {  };\n                         PUSH nat 4;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         COMPARE;\n                         EQ;\n                         NOT;\n                         IF\n                           { PUSH string "InvalidCondition: r3";\n                             FAILWITH }\n                           {  };\n                         PUSH nat 5;\n                         DIP { DIG 1; DROP };\n                         DUG 1;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         DIG 1;\n                         PAIR }\n                       { IF_LEFT\n                           { DROP;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             SENDER;\n                             COMPARE;\n                             EQ;\n                             NOT;\n                             IF\n                               { PUSH string "InvalidCaller";\n                                 FAILWITH }\n                               {  };\n                             DIG 16;\n                             DUP;\n                             DUG 17;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             EXEC;\n                             NOT;\n                             IF\n                               { PUSH string "InvalidCondition: r4";\n                                 FAILWITH }\n                               {  };\n                             DIG 13;\n                             DUP;\n                             DUG 14;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             EXEC;\n                             DIP { DIG 1; DROP };\n                             DUG 1;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             DIG 1;\n                             PAIR }\n                           { IF_LEFT\n                               { DROP;\n                                 DUP;\n                                 SENDER;\n                                 MEM;\n                                 NOT;\n                                 IF\n                                   { PUSH string "InvalidCondition: c1";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 16;\n                                 DUP;\n                                 DUG 17;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 EXEC;\n                                 NOT;\n                                 IF\n                                   { PUSH string "InvalidCondition: c2";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 9;\n                                 DUP;\n                                 DUG 10;\n                                 AMOUNT;\n                                 COMPARE;\n                                 GE;\n                                 NOT;\n                                 IF\n                                   { PUSH string "InvalidCondition: c3";\n                                     FAILWITH }\n                                   {  };\n                                 AMOUNT;\n                                 DIG 9;\n                                 DUP;\n                                 DUG 10;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 SENDER;\n                                 GET;\n                                 IF_NONE\n                                   { PUSH string "GetNoneValue";\n                                     FAILWITH }\n                                   {  };\n                                 CDR;\n                                 ADD;\n                                 COMPARE;\n                                 GE;\n                                 PUSH nat 0;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 SENDER;\n                                 GET;\n                                 IF_NONE\n                                   { PUSH string "GetNoneValue";\n                                     FAILWITH }\n                                   {  };\n                                 CAR;\n                                 COMPARE;\n                                 EQ;\n                                 AND;\n                                 IF\n                                   { DIG 1;\n                                     DUP;\n                                     DUG 2;\n                                     SENDER;\n                                     GET;\n                                     IF_NONE\n                                       { PUSH string "GetNoneValue";\n                                         FAILWITH }\n                                       {  };\n                                     CDR;\n                                     DIG 10;\n                                     DUP;\n                                     DUG 11;\n                                     SUB;\n                                     SWAP;\n                                     DROP }\n                                   {  };\n                                 DIG 15;\n                                 DUP;\n                                 DUG 16;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 DIG 8;\n                                 DUP;\n                                 DUG 9;\n                                 PAIR;\n                                 DIG 5;\n                                 DUP;\n                                 DUG 6;\n                                 PAIR;\n                                 DIG 7;\n                                 DUP;\n                                 DUG 8;\n                                 PAIR;\n                                 DIG 10;\n                                 DUP;\n                                 DUG 11;\n                                 PAIR;\n                                 DIG 6;\n                                 DUP;\n                                 DUG 7;\n                                 PAIR;\n                                 DIG 9;\n                                 DUP;\n                                 DUG 10;\n                                 PAIR;\n                                 EXEC;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 COMPARE;\n                                 LE;\n                                 IF\n                                   { DUP;\n                                     DIP { DIG 1; DROP };\n                                     DUG 1;\n                                     DIG 15;\n                                     DUP;\n                                     DUG 16;\n                                     DIG 4;\n                                     DUP;\n                                     DUG 5;\n                                     EXEC;\n                                     DIP { DIG 3; DROP };\n                                     DUG 3 }\n                                   {  };\n                                 PUSH mutez 1;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 DIG 19;\n                                 DUP;\n                                 DUG 20;\n                                 DIG 6;\n                                 DUP;\n                                 DUG 7;\n                                 DIG 12;\n                                 DUP;\n                                 DUG 13;\n                                 PAIR;\n                                 EXEC;\n                                 PAIR;\n                                 UNPAIR;\n                                 UNPAIR;\n                                 ABS;\n                                 DIG 2;\n                                 MUL;\n                                 EDIV;\n                                 IF_NONE\n                                   { PUSH string "DivByZero";\n                                     FAILWITH }\n                                   {  };\n                                 CAR;\n                                 EDIV;\n                                 IF_NONE\n                                   { PUSH string "DivByZero";\n                                     FAILWITH }\n                                   { DUP;\n                                     CAR;\n                                     SWAP;\n                                     DROP };\n                                 DIG 15;\n                                 DUP;\n                                 DUG 16;\n                                 DIG 14;\n                                 DUP;\n                                 DUG 15;\n                                 CONTRACT %transfer (pair address (pair address nat));\n                                 IF_NONE\n                                   { PUSH string "BadContract";\n                                     FAILWITH }\n                                   {  };\n                                 PUSH mutez 0;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 SENDER;\n                                 PAIR;\n                                 DIG 18;\n                                 DUP;\n                                 DUG 19;\n                                 PAIR;\n                                 TRANSFER_TOKENS;\n                                 CONS;\n                                 DIP { DIG 15; DROP };\n                                 DUG 15;\n                                 DUP;\n                                 DIG 7;\n                                 DUP;\n                                 DUG 8;\n                                 ADD;\n                                 DIP { DIG 6; DROP };\n                                 DUG 6;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 DIG 6;\n                                 DUP;\n                                 DUG 7;\n                                 ADD;\n                                 DIP { DIG 5; DROP };\n                                 DUG 5;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 SENDER;\n                                 GET;\n                                 IF_NONE\n                                   { PUSH string "GetNoneValue";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 4;\n                                 DUP;\n                                 DUG 5;\n                                 DIG 5;\n                                 DUP;\n                                 DUG 6;\n                                 SENDER;\n                                 GET;\n                                 IF_NONE\n                                   { PUSH string "GetNoneValue";\n                                     FAILWITH }\n                                   {  };\n                                 UNPAIR;\n                                 SWAP;\n                                 DROP;\n                                 DIG 5;\n                                 DUP;\n                                 DUG 6;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 CDR;\n                                 ADD;\n                                 SWAP;\n                                 PAIR;\n                                 SOME;\n                                 SENDER;\n                                 UPDATE;\n                                 DIP { DIG 4; DROP };\n                                 DUG 4;\n                                 DROP;\n                                 AMOUNT;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 COMPARE;\n                                 LE;\n                                 IF\n                                   { DIG 15;\n                                     DUP;\n                                     DUG 16;\n                                     SENDER;\n                                     CONTRACT unit;\n                                     IF_NONE\n                                       { PUSH string "BadContract";\n                                         FAILWITH }\n                                       {  };\n                                     DIG 4;\n                                     DUP;\n                                     DUG 5;\n                                     AMOUNT;\n                                     SUB;\n                                     UNIT;\n                                     TRANSFER_TOKENS;\n                                     CONS;\n                                     DIP { DIG 15; DROP };\n                                     DUG 15 }\n                                   {  };\n                                 DROP 3;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 DIG 1;\n                                 PAIR }\n                               { DROP;\n                                 DIG 11;\n                                 DUP;\n                                 DUG 12;\n                                 SENDER;\n                                 COMPARE;\n                                 EQ;\n                                 NOT;\n                                 IF\n                                   { PUSH string "InvalidCaller";\n                                     FAILWITH }\n                                   {  };\n                                 PUSH nat 6;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 COMPARE;\n                                 EQ;\n                                 NOT;\n                                 IF\n                                   { PUSH string "InvalidCondition: r5";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 12;\n                                 DUP;\n                                 DUG 13;\n                                 DIG 12;\n                                 DUP;\n                                 DUG 13;\n                                 CONTRACT unit;\n                                 IF_NONE\n                                   { PUSH string "BadContract";\n                                     FAILWITH }\n                                   {  };\n                                 BALANCE;\n                                 UNIT;\n                                 TRANSFER_TOKENS;\n                                 CONS;\n                                 DIP { DIG 12; DROP };\n                                 DUG 12;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 SWAP;\n                                 PAIR;\n                                 DIG 1;\n                                 PAIR } } } } } };\n         DIP { DROP 4 } };\n}\n')))))}s.isMDXComponent=!0},235:function(n,t,e){"use strict";function a(n){var t,e,r="";if("string"==typeof n||"number"==typeof n)r+=n;else if("object"==typeof n)if(Array.isArray(n))for(t=0;t<n.length;t++)n[t]&&(e=a(n[t]))&&(r&&(r+=" "),r+=e);else for(t in n)n[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var n,t,e=0,r="";e<arguments.length;)(n=arguments[e++])&&(t=a(n))&&(r&&(r+=" "),r+=t);return r}},241:function(n,t,e){"use strict";var a=e(0),r=e(242);t.a=function(){const n=Object(a.useContext)(r.a);if(null==n)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return n}},242:function(n,t,e){"use strict";var a=e(0);const r=Object(a.createContext)(void 0);t.a=r},243:function(n,t,e){"use strict";var a=e(0),r=e.n(a),i=e(241),b=e(235),l=e(56),o=e.n(l);const c=37,P=39;t.a=function(n){const{lazy:t,block:e,defaultValue:l,values:d,groupId:I,className:s}=n,{tabGroupChoices:D,setTabGroupChoices:O}=Object(i.a)(),[u,A]=Object(a.useState)(l),U=a.Children.toArray(n.children);if(null!=I){const n=D[I];null!=n&&n!==u&&d.some((t=>t.value===n))&&A(n)}const m=n=>{A(n),null!=I&&O(I,n)},p=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(b.a)("tabs",{"tabs--block":e},s)},d.map((({value:n,label:t})=>r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":u===n,className:Object(b.a)("tabs__item",o.a.tabItem,{"tabs__item--active":u===n}),key:n,ref:n=>p.push(n),onKeyDown:n=>{((n,t,e)=>{switch(e.keyCode){case P:((n,t)=>{const e=n.indexOf(t)+1;n[e]?n[e].focus():n[0].focus()})(n,t);break;case c:((n,t)=>{const e=n.indexOf(t)-1;n[e]?n[e].focus():n[n.length-1].focus()})(n,t)}})(p,n.target,n)},onFocus:()=>m(n),onClick:()=>{m(n)}},t)))),t?Object(a.cloneElement)(U.filter((n=>n.props.value===u))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},U.map(((n,t)=>Object(a.cloneElement)(n,{key:t,hidden:n.props.value!==u})))))}},244:function(n,t,e){"use strict";var a=e(3),r=e(0),i=e.n(r);t.a=function({children:n,hidden:t,className:e}){return i.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:t,className:e}),n)}}}]);