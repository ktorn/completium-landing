(window.webpackJsonp=window.webpackJsonp||[]).push([[159],{226:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return P})),t.d(e,"metadata",(function(){return c})),t.d(e,"toc",(function(){return I})),t.d(e,"default",(function(){return d}));var a=t(3),i=t(7),r=(t(0),t(236)),l=t(237),b=t(249),o=t(250),P={id:"template7",title:"Autocallable note",sidebar_label:"Autocallable note",slug:"/templates/acn"},c={unversionedId:"templates/template7",id:"templates/template7",isDocsHomePage:!1,title:"Autocallable note",description:"Introduction",source:"@site/docs/templates/template7.md",slug:"/templates/acn",permalink:"/docs/templates/acn",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template7.md",version:"current",sidebar_label:"Autocallable note",sidebar:"templates",previous:{title:"ICO",permalink:"/docs/templates/ico"},next:{title:"Escrow",permalink:"/docs/templates/escrow"}},I=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Code",id:"code",children:[]}],s={toc:I};function d(n){var e=n.components,t=Object(i.a)(n,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"introduction"},"Introduction"),Object(r.b)("p",null,"This contract is the adaptation to the ",Object(r.b)(l.a,{to:"/docs/dapp-tools/tezos",mdxType:"Link"},"Tezos")," blockchain of an ",Object(r.b)(l.a,{to:"https://drive.google.com/file/d/0B64p1w9JOO-QQlhFQWEzMVl0cmRRVk5Td3d6czR5ZDRsWTRN/view",mdxType:"Link"},"autocallable note")," issued by Goldman Sachs."),Object(r.b)("p",null,"AutoCallable notes are short-term market-linked investments offering an above-market coupon if automatically matured prior to the scheduled maturity date. The product is automatically matured (\u201cauto-called\u201d) if the reference asset is at or above its initial level on a predetermined observation date. If called, the investor will receive their initial principal investment plus an above-market coupon."),Object(r.b)("p",null,"Because of the passive nature of the blockchain, the contract here is an escrow of the issuer's payments (interests and redeem amounts in due time). At any time, the holder can check whether the escrowed amount is equal to what was initially planned by the contract, by calling the ",Object(r.b)("inlineCode",{parentName:"p"},"check")," entrypoint. If the balance is not equal to the expected amount, the contract goes to state ",Object(r.b)("inlineCode",{parentName:"p"},"Defaulted"),". The holder may then turn to a dispute resolution mecanism to recover the due amount, the contract state being the proof of the default in payment."),Object(r.b)("p",null,"Fixing values are provided to the contract by the ",Object(r.b)("inlineCode",{parentName:"p"},"oracle")," address. Knowing that these data are licensed by market places to their customers, it is an open question to know whether the publically available blockchain data is a no-go. The challenge for the DeFi is to find business models not based on fixing values, but rather on the operation of such contracts."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Thank you to Alain Frisch, CTO at ",Object(r.b)(l.a,{to:"https://www.lexifi.com/",mdxType:"Link"},"Lexifi"),", for this example contract and his help to adapt it. Lexifi provides financial services with a DSL (Domain Specific Language) to execute and simulate financial contracts. Alain Frish also provided the corresponding Lexifi code, automatically extracted by Lexifi drivers from the above document.")),Object(r.b)("h2",{id:"api"},"API"),Object(r.b)("p",null,"The contract relies on the 3 underlyings: Bank of America, Soci\xe9t\xe9 G\xe9n\xe9rale and Union des Banques Suisses."),Object(r.b)("h3",{id:"storage"},"Storage"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"issuer")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"address")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Issuer address, transfers note payments.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"holder")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"address")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Holder address, checks the contract balance.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"oracle")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"address")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Oracle address, provides fixing values.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"nominal")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"tez")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Nominal value transfered by holder to confirm start of contract.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"trade")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"date")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Trade date.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"final")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"date")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Final Fixing date.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"gredemption")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"date")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Redemption date.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"bac_initial")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"rational")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Initial Bank of America Fixing rate.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"sg_initial")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"rational")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Initial Soci\xe9t\xe9 G\xe9n\xe9rale rate.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"ubs_initial")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"rational")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Initial Union des Banques Suisses rate.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"bac_strike")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"rational")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Bank of America strike rate.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"sg_strike")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"rational")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Soci\xe9t\xe9 G\xe9n\xe9rale strike rate.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"ubs_strike")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"rational")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Union des Banques Suisses strike rate.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"early")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"collection")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Early redemption, defined by:",Object(r.b)("ul",null,Object(r.b)("li",null,"Observation date"),Object(r.b)("li",null,"Early redemption date"),Object(r.b)("li",null,"Trigger percentage"),Object(r.b)("li",null,"Early redemption value")),Object(r.b)("p",null),"If on one of the Observation dates, the Fixing of each Underlying is equal to or above its respective Trigger Percentage multiplied by the Fixing (Initial), the Note will be redeemed and the Investor will receive on the respective Early Redemption Date an amount equal to the relevant Early Redemption Value multiplied by the Nominal.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"interest")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"collection")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Interest, defined by:",Object(r.b)("ul",null,Object(r.b)("li",null,"Interest Observation Date"),Object(r.b)("li",null,"Interest Payment Date"),Object(r.b)("li",null,"Interest Barrier Percent"),Object(r.b)("li",null,"Interest Rate")),Object(r.b)("p",null),"If on one of the Interest Observation Dates, the Fixing of each Underlying is equal to or above its respective Interest Barrier Percent multiplied by the Fixing (Initial) , the Investor will receive on the respective Interest Payment Date an amount equal to the relevant Interest Rate multiplied by the Nominal.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"fixing")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"collection")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Fixing value defined by:",Object(r.b)("ul",null,Object(r.b)("li",null,"Observation Date"),Object(r.b)("li",null,"Bank of America Fixing"),Object(r.b)("li",null,"Soci\xe9t\xe9 G\xe9n\xe9rale Fixing"),Object(r.b)("li",null,"Union des banques Suisses")),Object(r.b)("p",null),"Fixing values are provided by ",Object(r.b)("inlineCode",{parentName:"td"},"oracle"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"actual_payment")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"tez")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Total payment by issuer.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"state_")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"states")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"One of:",Object(r.b)("ul",null,Object(r.b)("li",null,Object(r.b)("inlineCode",{parentName:"td"},"Created")," (intial state)"),Object(r.b)("li",null,Object(r.b)("inlineCode",{parentName:"td"},"Canceled")," (holder or issuer has canceled the contract)"),Object(r.b)("li",null,Object(r.b)("inlineCode",{parentName:"td"},"Defaulted")),Object(r.b)("li",null,Object(r.b)("inlineCode",{parentName:"td"},"Terminated"))))))),Object(r.b)("h3",{id:"entrypoints"},"Entrypoints"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Parameters"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"add_fixing")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"ffobservation"),", ",Object(r.b)("inlineCode",{parentName:"td"},"fbac"),", ",Object(r.b)("inlineCode",{parentName:"td"},"fsg"),", ",Object(r.b)("inlineCode",{parentName:"td"},"fubs")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called by ",Object(r.b)("inlineCode",{parentName:"td"},"oracle")," to provide Fixing values for underlyings.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"pay_note")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called by ",Object(r.b)("inlineCode",{parentName:"td"},"issuer")," to transfer payment notes.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"confirm")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called by ",Object(r.b)("inlineCode",{parentName:"td"},"holder")," who transfers ",Object(r.b)("inlineCode",{parentName:"td"},"nominal")," amount to ",Object(r.b)("inlineCode",{parentName:"td"},"issuer")," via contract. Sets contract state to ",Object(r.b)("inlineCode",{parentName:"td"},"Confirmed"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"cancel")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called by ",Object(r.b)("inlineCode",{parentName:"td"},"holder")," or ",Object(r.b)("inlineCode",{parentName:"td"},"issuer")," to cancel contract.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"check")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called by ",Object(r.b)("inlineCode",{parentName:"td"},"holder")," to compare actual payments with expected payments. If different, sets the contract to ",Object(r.b)("inlineCode",{parentName:"td"},"Defaulted")," state.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"terminate")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called by ",Object(r.b)("inlineCode",{parentName:"td"},"holder")," to terminate contract.")))),Object(r.b)("h2",{id:"code"},"Code"),Object(r.b)(b.a,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Storage",value:"storage"},{label:"Michelson",value:"michelson"},{label:"Specification",value:"specification"}],mdxType:"Tabs"},Object(r.b)(o.a,{value:"archetype",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-archetype",metastring:'title="autocallable.arl"',title:'"autocallable.arl"'}),"archetype autocallable(\n  issuer  : address,\n  holder  : address,\n  oracle  : address,\n  nominal : tez,\n  trade   : date,\n  final   : date,\n  gredemption : date,\n  (* UNDERLYINGS *)\n  bac_initial : rational,\n  sg_initial  : rational,\n  ubs_initial : rational,\n  bac_strike  : rational,\n  sg_strike   : rational,\n  ubs_strike  : rational\n)\n\nasset early {\n  eobservation : date;\n  redemption   : date;\n  trigger      : rational;\n  value        : rational;\n}\n\nasset interest {\n  iobservation : date;\n  payment     : date;\n  barrier     : rational;\n  rate        : rational;\n}\n\nasset fixing {\n  fobservation : date;\n  bac : rational;  (* Bank of America Corporation *)\n  sg  : rational;  (* Societe Generale *)\n  ubs : rational;  (* Union des Banques Suisses *)\n}\n\n(* EXPECTED PAYMENT COMPUTATION *)\nfunction compute_expected (d : date) : tez {\n  var expected = 0tz;\n  var terminated = false;\n  var redeem_date = final;\n  (* early redemption *)\n  for e in early do\n    if early[e].redemption <= d then begin\n      (* is there early redemption ? *)\n      var ee = early[e].eobservation;\n      if     fixing[ee].bac >= early[e].trigger * bac_initial\n         and fixing[ee].sg  >= early[e].trigger * sg_initial\n         and fixing[ee].ubs >= early[e].trigger * ubs_initial\n      then begin\n         expected += early[e].value * nominal;\n         redeem_date := early[e].eobservation;\n         terminated := true\n      end\n    end\n  done;\n  (* redemption *)\n  if not terminated and gredemption <= d then\n    if     fixing[gredemption].bac >= bac_strike\n       and fixing[gredemption].sg  >= sg_strike\n       and fixing[gredemption].ubs >= ubs_strike\n    then\n       expected += nominal\n    else begin\n       var bac_trigger = fixing[gredemption].bac / bac_strike;\n       var sg_trigger  = fixing[gredemption].sg  / sg_strike;\n       var ubs_trigger = fixing[gredemption].ubs / ubs_strike;\n       var worst = min ((min (bac_trigger, sg_trigger)), ubs_trigger);\n       expected += worst * nominal\n    end;\n  (* expected interests *)\n  var exp_interests = 0tz;\n  for i in interest do\n    if interest[i].iobservation <= redeem_date and interest[i].payment <= d\n    then begin\n      var ii = interest[i].iobservation;\n      if     fixing[ii].bac >= interest[i].barrier * bac_initial\n         and fixing[ii].sg  >= interest[i].barrier * sg_initial\n         and fixing[ii].ubs >= interest[i].barrier * ubs_initial\n      then exp_interests := interest[i].rate * nominal\n    end\n  done;\n  expected += exp_interests;\n  return expected\n}\n\n(* PAYMENT action *)\nvariable actual_payment : tez = 0tz\n\nentry pay_note () {\n   called by issuer\n   effect {\n      actual_payment += transferred\n   }\n}\n\nentry add_fixing (\n  ffobservation : date,\n  fbac          : rational,\n  fsg           : rational,\n  fubs          : rational) {\n  fixing.add({ffobservation; fbac; fsg; fubs})\n}\n\n(* STATE MACHINE *)\nstates =\n | Created initial (* doc initial state. *)\n | Canceled        (* holder or issuer has canceled the transaction. *)\n | Confirmed       (* holder has confirmed. *)\n | Defaulted\n | Terminated\n\n(* Used by holder to confirm transaction.\n   It transfers the price of contract (nominal) *)\ntransition confirm () {\n  called by holder\n  from Created\n  to Confirmed when { transferred = nominal }\n  with effect { transfer transferred to issuer }\n}\n\ntransition cancel () {\n  called by holder or issuer\n  from Created\n  to Canceled\n}\n\ntransition check () {\n  called by holder\n  from Confirmed\n  to Defaulted when { actual_payment < compute_expected(now) }\n}\n\ntransition terminate () {\n  called by issuer\n  from Confirmed\n  to Terminated when { actual_payment >= compute_expected(now) }\n}\n"))),Object(r.b)(o.a,{value:"storage",mdxType:"TabItem"},Object(r.b)("p",null,"Code snippet to set initial storage according to values specified in contract."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-archetype"}),"variable nominal : tez = 1000tz\n\nvariable trade       : date = 2017-03-14T00:00:00\nvariable init        : date = 2017-03-14T00:00:00\nvariable issue       : date = 2017-03-28T00:00:00\nvariable final       : date = 2020-03-16T00:00:00\nvariable gredemption : date = 2020-03-30T00:00:00\n\n(* UNDERLYINGS *)\nvariable bac_initial : rational = 25.32\nvariable sg_initial  : rational = 46.945\nvariable ubs_initial : rational = 15.98\n\nvariable bac_strike : rational = 12.66   (* ~ 0.5 * bac_initial *)\nvariable sg_strike  : rational = 23.4725 (* ~ 0.5 * sg_initial  *)\nvariable ubs_strike : rational = 15.98   (* ~ 0.5 * ubs_initial *)\n\n(* CONTRACT DATA *)\nasset early identified by eobservation {\n  eobservation : date;\n  redemption   : date;\n  trigger      : rational;\n  value        : rational;\n} with {\n  i1 : 0 <= trigger <= 1;\n  i2 : 0 <= value   <= 1;\n} initialized by {\n  { 2018-03-14T00:00:00; 2018-03-28T00:00:00; 0.95; 1 };\n  { 2018-06-14T00:00:00; 2018-06-28T00:00:00; 0.95; 1 };\n  { 2018-09-14T00:00:00; 2018-09-28T00:00:00; 0.95; 1 };\n  { 2018-12-14T00:00:00; 2019-01-02T00:00:00; 0.95; 1 };\n  { 2019-03-14T00:00:00; 2019-03-28T00:00:00; 0.80; 1 };\n  { 2019-06-14T00:00:00; 2019-06-28T00:00:00; 0.80; 1 };\n  { 2019-09-16T00:00:00; 2020-09-30T00:00:00; 0.70; 1 };\n  { 2019-12-16T00:00:00; 2020-01-02T00:00:00; 0.70; 1 };\n  { 2020-03-16T00:00:00; 2020-03-30T00:00:00; 0.70; 1 }\n}\n\nasset interest identified by iobservation {\n  iobservation : date;\n  payment     : date;\n  barrier     : rational;\n  rate        : rational;\n} with {\n  i3 : 0 <= barrier <= 1;\n} initialized by {\n  { 2017-06-14T00:00:00; 2017-06-28T00:00:00; 0.5; 2.025  };\n  { 2017-09-14T00:00:00; 2017-09-28T00:00:00; 0.5; 4.05   };\n  { 2017-12-14T00:00:00; 2018-01-02T00:00:00; 0.5; 6.075  };\n  { 2018-03-14T00:00:00; 2018-03-28T00:00:00; 0.5; 8.1    };\n  { 2018-06-14T00:00:00; 2018-06-28T00:00:00; 0.5; 10.125 };\n  { 2018-09-14T00:00:00; 2018-09-28T00:00:00; 0.5; 12.15  };\n  { 2018-12-14T00:00:00; 2019-01-02T00:00:00; 0.5; 14.175 };\n  { 2019-03-14T00:00:00; 2019-03-28T00:00:00; 0.5; 16.2   };\n  { 2019-06-14T00:00:00; 2019-06-28T00:00:00; 0.5; 18.225 };\n  { 2019-09-16T00:00:00; 2019-09-30T00:00:00; 0.5; 20.25  };\n  { 2019-12-16T00:00:00; 2020-01-02T00:00:00; 0.5; 22.275 };\n  { 2020-03-16T00:00:00; 2020-03-30T00:00:00; 0.5; 24.3   }\n}\n"))),Object(r.b)(o.a,{value:"michelson",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'# (Pair issuer (Pair holder (Pair oracle (Pair nominal (Pair trade (Pair final (Pair gredemption (Pair bac_initial (Pair sg_initial (Pair ubs_initial (Pair bac_strike (Pair sg_strike (Pair ubs_strike (Pair 0 (Pair 0 (Pair {  } (Pair {  } {  })))))))))))))))))\n{\n  storage (pair (address %issuer) (pair (address %holder) (pair (address %oracle) (pair (mutez %nominal) (pair (timestamp %trade) (pair (timestamp %final) (pair (timestamp %gredemption) (pair (pair %bac_initial int nat) (pair (pair %sg_initial int nat) (pair (pair %ubs_initial int nat) (pair (pair %bac_strike int nat) (pair (pair %sg_strike int nat) (pair (pair %ubs_strike int nat) (pair (mutez %actual_payment) (pair (nat %_state) (pair (map %early timestamp (pair (timestamp %redemption) (pair (pair %trigger int nat) (pair %value int nat)))) (pair (map %interest timestamp (pair (timestamp %payment) (pair (pair %barrier int nat) (pair %rate int nat)))) (map %fixing timestamp (pair (pair %bac int nat) (pair (pair %sg int nat) (pair %ubs int nat)))))))))))))))))))));\n  parameter (or (unit %pay_note) (or (pair %add_fixing (timestamp %ffobservation) (pair (pair %fbac int nat) (pair (pair %fsg int nat) (pair %fubs int nat)))) (or (unit %confirm) (or (unit %cancel) (or (unit %check) (unit %terminate))))));\n  code { LAMBDA\n           (pair (pair (pair int nat) (pair int nat)) (or unit (or (or unit unit) (or unit unit))))\n           bool\n           { UNPAIR;\n             UNPAIR;\n             DIP { UNPAIR };\n             UNPAIR;\n             DUG 3;\n             MUL;\n             DIP { MUL };\n             SWAP;\n             COMPARE;\n             SWAP;\n             IF_LEFT\n               { DROP;\n                 EQ }\n               { IF_LEFT\n                   { IF_LEFT\n                       { DROP;\n                         LT }\n                       { DROP;\n                         LE } }\n                   { IF_LEFT\n                       { DROP;\n                         GT }\n                       { DROP;\n                         GE } } } };\n         LAMBDA\n           (pair (map timestamp (pair (timestamp %payment) (pair (pair %barrier int nat) (pair %rate int nat)))) (pair (pair int nat) (pair (pair int nat) (pair (pair int nat) (pair timestamp (pair mutez (pair (pair int nat) (pair (pair int nat) (pair (pair int nat) (pair (map timestamp (pair (pair %bac int nat) (pair (pair %sg int nat) (pair %ubs int nat)))) (pair (map timestamp (pair (timestamp %redemption) (pair (pair %trigger int nat) (pair %value int nat)))) (pair timestamp (pair timestamp (lambda (pair (pair (pair int nat) (pair int nat)) (or unit (or (or unit unit) (or unit unit)))) bool))))))))))))))\n           mutez\n           { UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             PUSH unit Unit;\n             PUSH mutez 0;\n             PUSH bool False;\n             DIG 5;\n             DUP;\n             DUG 6;\n             DIG 7;\n             DUP;\n             DUG 8;\n             ITER { UNPAIR;\n                    DIG 7;\n                    DUP;\n                    DUG 8;\n                    DIG 10;\n                    DUP;\n                    DUG 11;\n                    DIG 2;\n                    DUP;\n                    DUG 3;\n                    GET;\n                    IF_NONE\n                      { PUSH string "GetNoneValue";\n                        FAILWITH }\n                      {  };\n                    CAR;\n                    COMPARE;\n                    LE;\n                    IF\n                      { DUP;\n                        DIG 7;\n                        DUP;\n                        DUG 8;\n                        UNIT;\n                        RIGHT unit;\n                        RIGHT (or unit unit);\n                        RIGHT unit;\n                        DIG 16;\n                        DUP;\n                        DUG 17;\n                        DIG 13;\n                        DUP;\n                        DUG 14;\n                        DIG 5;\n                        DUP;\n                        DUG 6;\n                        GET;\n                        IF_NONE\n                          { PUSH string "GetNoneValue";\n                            FAILWITH }\n                          {  };\n                        CDR;\n                        CAR;\n                        PAIR;\n                        UNPAIR;\n                        DIP { UNPAIR };\n                        UNPAIR;\n                        DIP { SWAP };\n                        MUL;\n                        DIP { MUL };\n                        PAIR;\n                        DIG 14;\n                        DUP;\n                        DUG 15;\n                        DIG 4;\n                        DUP;\n                        DUG 5;\n                        GET;\n                        IF_NONE\n                          { PUSH string "GetNoneValue";\n                            FAILWITH }\n                          {  };\n                        CDR;\n                        CDR;\n                        PAIR;\n                        PAIR;\n                        EXEC;\n                        DIG 8;\n                        DUP;\n                        DUG 9;\n                        UNIT;\n                        RIGHT unit;\n                        RIGHT (or unit unit);\n                        RIGHT unit;\n                        DIG 16;\n                        DUP;\n                        DUG 17;\n                        DIG 14;\n                        DUP;\n                        DUG 15;\n                        DIG 6;\n                        DUP;\n                        DUG 7;\n                        GET;\n                        IF_NONE\n                          { PUSH string "GetNoneValue";\n                            FAILWITH }\n                          {  };\n                        CDR;\n                        CAR;\n                        PAIR;\n                        UNPAIR;\n                        DIP { UNPAIR };\n                        UNPAIR;\n                        DIP { SWAP };\n                        MUL;\n                        DIP { MUL };\n                        PAIR;\n                        DIG 15;\n                        DUP;\n                        DUG 16;\n                        DIG 5;\n                        DUP;\n                        DUG 6;\n                        GET;\n                        IF_NONE\n                          { PUSH string "GetNoneValue";\n                            FAILWITH }\n                          {  };\n                        CDR;\n                        CAR;\n                        PAIR;\n                        PAIR;\n                        EXEC;\n                        DIG 9;\n                        DUP;\n                        DUG 10;\n                        UNIT;\n                        RIGHT unit;\n                        RIGHT (or unit unit);\n                        RIGHT unit;\n                        DIG 16;\n                        DUP;\n                        DUG 17;\n                        DIG 15;\n                        DUP;\n                        DUG 16;\n                        DIG 7;\n                        DUP;\n                        DUG 8;\n                        GET;\n                        IF_NONE\n                          { PUSH string "GetNoneValue";\n                            FAILWITH }\n                          {  };\n                        CDR;\n                        CAR;\n                        PAIR;\n                        UNPAIR;\n                        DIP { UNPAIR };\n                        UNPAIR;\n                        DIP { SWAP };\n                        MUL;\n                        DIP { MUL };\n                        PAIR;\n                        DIG 16;\n                        DUP;\n                        DUG 17;\n                        DIG 6;\n                        DUP;\n                        DUG 7;\n                        GET;\n                        IF_NONE\n                          { PUSH string "GetNoneValue";\n                            FAILWITH }\n                          {  };\n                        CAR;\n                        PAIR;\n                        PAIR;\n                        EXEC;\n                        AND;\n                        AND;\n                        IF\n                          { DIG 15;\n                            DUP;\n                            DUG 16;\n                            DIG 11;\n                            DUP;\n                            DUG 12;\n                            DIG 3;\n                            DUP;\n                            DUG 4;\n                            GET;\n                            IF_NONE\n                              { PUSH string "GetNoneValue";\n                                FAILWITH }\n                              {  };\n                            CDR;\n                            CDR;\n                            PAIR;\n                            UNPAIR;\n                            UNPAIR;\n                            ABS;\n                            DIG 2;\n                            MUL;\n                            EDIV;\n                            IF_NONE\n                              { PUSH string "DivByZero";\n                                FAILWITH }\n                              {  };\n                            CAR;\n                            DIG 6;\n                            DUP;\n                            DUG 7;\n                            ADD;\n                            DIP { DIG 5; DROP };\n                            DUG 5;\n                            DIG 1;\n                            DUP;\n                            DUG 2;\n                            DIP { DIG 3; DROP };\n                            DUG 3;\n                            PUSH bool True;\n                            DIP { DIG 4; DROP };\n                            DUG 4 }\n                          {  };\n                        DROP }\n                      {  };\n                    DROP 2 };\n             DIG 5;\n             DUP;\n             DUG 6;\n             DIG 14;\n             DUP;\n             DUG 15;\n             COMPARE;\n             LE;\n             DIG 2;\n             DUP;\n             DUG 3;\n             NOT;\n             AND;\n             IF\n               { DIG 4;\n                 DUP;\n                 DUG 5;\n                 UNIT;\n                 RIGHT unit;\n                 RIGHT (or unit unit);\n                 RIGHT unit;\n                 DIG 18;\n                 DUP;\n                 DUG 19;\n                 DIG 11;\n                 DUP;\n                 DUG 12;\n                 DIG 17;\n                 DUP;\n                 DUG 18;\n                 GET;\n                 IF_NONE\n                   { PUSH string "GetNoneValue";\n                     FAILWITH }\n                   {  };\n                 CDR;\n                 CDR;\n                 PAIR;\n                 PAIR;\n                 EXEC;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 UNIT;\n                 RIGHT unit;\n                 RIGHT (or unit unit);\n                 RIGHT unit;\n                 DIG 18;\n                 DUP;\n                 DUG 19;\n                 DIG 12;\n                 DUP;\n                 DUG 13;\n                 DIG 18;\n                 DUP;\n                 DUG 19;\n                 GET;\n                 IF_NONE\n                   { PUSH string "GetNoneValue";\n                     FAILWITH }\n                   {  };\n                 CDR;\n                 CAR;\n                 PAIR;\n                 PAIR;\n                 EXEC;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 UNIT;\n                 RIGHT unit;\n                 RIGHT (or unit unit);\n                 RIGHT unit;\n                 DIG 18;\n                 DUP;\n                 DUG 19;\n                 DIG 13;\n                 DUP;\n                 DUG 14;\n                 DIG 19;\n                 DUP;\n                 DUG 20;\n                 GET;\n                 IF_NONE\n                   { PUSH string "GetNoneValue";\n                     FAILWITH }\n                   {  };\n                 CAR;\n                 PAIR;\n                 PAIR;\n                 EXEC;\n                 AND;\n                 AND;\n                 IF\n                   { DIG 12;\n                     DUP;\n                     DUG 13;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     ADD;\n                     DIP { DIG 2; DROP };\n                     DUG 2 }\n                   { DIG 14;\n                     DUP;\n                     DUG 15;\n                     DIG 9;\n                     DUP;\n                     DUG 10;\n                     DIG 15;\n                     DUP;\n                     DUG 16;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CAR;\n                     PAIR;\n                     UNPAIR;\n                     DIP { UNPAIR };\n                     UNPAIR;\n                     DIG 3;\n                     PUSH int 0;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     COMPARE;\n                     GE;\n                     IF\n                       { INT }\n                       { NEG };\n                     MUL;\n                     DIP { MUL; ABS };\n                     PAIR;\n                     DIG 16;\n                     DUP;\n                     DUG 17;\n                     DIG 10;\n                     DUP;\n                     DUG 11;\n                     DIG 16;\n                     DUP;\n                     DUG 17;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CDR;\n                     CAR;\n                     PAIR;\n                     UNPAIR;\n                     DIP { UNPAIR };\n                     UNPAIR;\n                     DIG 3;\n                     PUSH int 0;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     COMPARE;\n                     GE;\n                     IF\n                       { INT }\n                       { NEG };\n                     MUL;\n                     DIP { MUL; ABS };\n                     PAIR;\n                     DIG 18;\n                     DUP;\n                     DUG 19;\n                     DIG 11;\n                     DUP;\n                     DUG 12;\n                     DIG 17;\n                     DUP;\n                     DUG 18;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CDR;\n                     CDR;\n                     PAIR;\n                     UNPAIR;\n                     DIP { UNPAIR };\n                     UNPAIR;\n                     DIG 3;\n                     PUSH int 0;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     COMPARE;\n                     GE;\n                     IF\n                       { INT }\n                       { NEG };\n                     MUL;\n                     DIP { MUL; ABS };\n                     PAIR;\n                     DUP;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     PAIR;\n                     DUP;\n                     UNPAIR;\n                     COMPARE;\n                     LT;\n                     IF\n                       { CAR }\n                       { CDR };\n                     PAIR;\n                     DUP;\n                     UNPAIR;\n                     COMPARE;\n                     LT;\n                     IF\n                       { CAR }\n                       { CDR };\n                     DIG 16;\n                     DUP;\n                     DUG 17;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     PAIR;\n                     UNPAIR;\n                     UNPAIR;\n                     ABS;\n                     DIG 2;\n                     MUL;\n                     EDIV;\n                     IF_NONE\n                       { PUSH string "DivByZero";\n                         FAILWITH }\n                       {  };\n                     CAR;\n                     DIG 7;\n                     DUP;\n                     DUG 8;\n                     ADD;\n                     DIP { DIG 6; DROP };\n                     DUG 6;\n                     DROP 4 } }\n               {  };\n             PUSH mutez 0;\n             DIG 18;\n             DUP;\n             DUG 19;\n             ITER { UNPAIR;\n                    DIG 8;\n                    DUP;\n                    DUG 9;\n                    DIG 21;\n                    DUP;\n                    DUG 22;\n                    DIG 2;\n                    DUP;\n                    DUG 3;\n                    GET;\n                    IF_NONE\n                      { PUSH string "GetNoneValue";\n                        FAILWITH }\n                      {  };\n                    CAR;\n                    COMPARE;\n                    LE;\n                    DIG 4;\n                    DUP;\n                    DUG 5;\n                    DIG 2;\n                    DUP;\n                    DUG 3;\n                    COMPARE;\n                    LE;\n                    AND;\n                    IF\n                      { DUP;\n                        DIG 8;\n                        DUP;\n                        DUG 9;\n                        UNIT;\n                        RIGHT unit;\n                        RIGHT (or unit unit);\n                        RIGHT unit;\n                        DIG 17;\n                        DUP;\n                        DUG 18;\n                        DIG 24;\n                        DUP;\n                        DUG 25;\n                        DIG 5;\n                        DUP;\n                        DUG 6;\n                        GET;\n                        IF_NONE\n                          { PUSH string "GetNoneValue";\n                            FAILWITH }\n                          {  };\n                        CDR;\n                        CAR;\n                        PAIR;\n                        UNPAIR;\n                        DIP { UNPAIR };\n                        UNPAIR;\n                        DIP { SWAP };\n                        MUL;\n                        DIP { MUL };\n                        PAIR;\n                        DIG 15;\n                        DUP;\n                        DUG 16;\n                        DIG 4;\n                        DUP;\n                        DUG 5;\n                        GET;\n                        IF_NONE\n                          { PUSH string "GetNoneValue";\n                            FAILWITH }\n                          {  };\n                        CDR;\n                        CDR;\n                        PAIR;\n                        PAIR;\n                        EXEC;\n                        DIG 9;\n                        DUP;\n                        DUG 10;\n                        UNIT;\n                        RIGHT unit;\n                        RIGHT (or unit unit);\n                        RIGHT unit;\n                        DIG 17;\n                        DUP;\n                        DUG 18;\n                        DIG 25;\n                        DUP;\n                        DUG 26;\n                        DIG 6;\n                        DUP;\n                        DUG 7;\n                        GET;\n                        IF_NONE\n                          { PUSH string "GetNoneValue";\n                            FAILWITH }\n                          {  };\n                        CDR;\n                        CAR;\n                        PAIR;\n                        UNPAIR;\n                        DIP { UNPAIR };\n                        UNPAIR;\n                        DIP { SWAP };\n                        MUL;\n                        DIP { MUL };\n                        PAIR;\n                        DIG 16;\n                        DUP;\n                        DUG 17;\n                        DIG 5;\n                        DUP;\n                        DUG 6;\n                        GET;\n                        IF_NONE\n                          { PUSH string "GetNoneValue";\n                            FAILWITH }\n                          {  };\n                        CDR;\n                        CAR;\n                        PAIR;\n                        PAIR;\n                        EXEC;\n                        DIG 10;\n                        DUP;\n                        DUG 11;\n                        UNIT;\n                        RIGHT unit;\n                        RIGHT (or unit unit);\n                        RIGHT unit;\n                        DIG 17;\n                        DUP;\n                        DUG 18;\n                        DIG 26;\n                        DUP;\n                        DUG 27;\n                        DIG 7;\n                        DUP;\n                        DUG 8;\n                        GET;\n                        IF_NONE\n                          { PUSH string "GetNoneValue";\n                            FAILWITH }\n                          {  };\n                        CDR;\n                        CAR;\n                        PAIR;\n                        UNPAIR;\n                        DIP { UNPAIR };\n                        UNPAIR;\n                        DIP { SWAP };\n                        MUL;\n                        DIP { MUL };\n                        PAIR;\n                        DIG 17;\n                        DUP;\n                        DUG 18;\n                        DIG 6;\n                        DUP;\n                        DUG 7;\n                        GET;\n                        IF_NONE\n                          { PUSH string "GetNoneValue";\n                            FAILWITH }\n                          {  };\n                        CAR;\n                        PAIR;\n                        PAIR;\n                        EXEC;\n                        AND;\n                        AND;\n                        IF\n                          { DIG 16;\n                            DUP;\n                            DUG 17;\n                            DIG 22;\n                            DUP;\n                            DUG 23;\n                            DIG 3;\n                            DUP;\n                            DUG 4;\n                            GET;\n                            IF_NONE\n                              { PUSH string "GetNoneValue";\n                                FAILWITH }\n                              {  };\n                            CDR;\n                            CDR;\n                            PAIR;\n                            UNPAIR;\n                            UNPAIR;\n                            ABS;\n                            DIG 2;\n                            MUL;\n                            EDIV;\n                            IF_NONE\n                              { PUSH string "DivByZero";\n                                FAILWITH }\n                              {  };\n                            CAR;\n                            DIP { DIG 3; DROP };\n                            DUG 3 }\n                          {  };\n                        DROP }\n                      {  };\n                    DROP 2 };\n             DUP;\n             DIG 4;\n             DUP;\n             DUG 5;\n             ADD;\n             DIP { DIG 3; DROP };\n             DUG 3;\n             DIG 3;\n             DUP;\n             DUG 4;\n             DIP { DIG 4; DROP };\n             DUG 4;\n             DROP 4;\n             DUG 14;\n             DROP 14 };\n         NIL operation;\n         DIG 3;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { DROP;\n             DIG 17;\n             DUP;\n             DUG 18;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             AMOUNT;\n             DIG 5;\n             DUP;\n             DUG 6;\n             ADD;\n             DIP { DIG 4; DROP };\n             DUG 4;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { UNPAIR;\n                 SWAP;\n                 UNPAIR;\n                 SWAP;\n                 UNPAIR;\n                 SWAP;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 MEM;\n                 IF\n                   { PUSH string "KeyAlreadyExists";\n                     FAILWITH }\n                   { DIG 4;\n                     DUP;\n                     DUG 5;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     PAIR;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     PAIR;\n                     SOME;\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     UPDATE;\n                     DIP { DIG 4; DROP };\n                     DUG 4 };\n                 DROP 4;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { IF_LEFT\n                   { DROP;\n                     DIG 16;\n                     DUP;\n                     DUG 17;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCaller";\n                         FAILWITH }\n                       {  };\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     DUP;\n                     PUSH nat 0;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { DIG 15;\n                         DUP;\n                         DUG 16;\n                         AMOUNT;\n                         COMPARE;\n                         EQ;\n                         IF\n                           { DIG 19;\n                             DUP;\n                             DUG 20;\n                             DIG 19;\n                             DUP;\n                             DUG 20;\n                             CONTRACT unit;\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             AMOUNT;\n                             UNIT;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 19; DROP };\n                             DUG 19;\n                             PUSH nat 2;\n                             DIP { DIG 4; DROP };\n                             DUG 4 }\n                           {  } }\n                       { PUSH string "InvalidState";\n                         FAILWITH };\n                     DROP;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR }\n                   { IF_LEFT\n                       { DROP;\n                         DIG 17;\n                         DUP;\n                         DUG 18;\n                         SENDER;\n                         COMPARE;\n                         EQ;\n                         DIG 17;\n                         DUP;\n                         DUG 18;\n                         SENDER;\n                         COMPARE;\n                         EQ;\n                         OR;\n                         NOT;\n                         IF\n                           { PUSH string "InvalidCaller";\n                             FAILWITH }\n                           {  };\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         DUP;\n                         PUSH nat 0;\n                         COMPARE;\n                         EQ;\n                         IF\n                           { PUSH nat 1;\n                             DIP { DIG 4; DROP };\n                             DUG 4 }\n                           { PUSH string "InvalidState";\n                             FAILWITH };\n                         DROP;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         DIG 1;\n                         PAIR }\n                       { IF_LEFT\n                           { DROP;\n                             DIG 16;\n                             DUP;\n                             DUG 17;\n                             SENDER;\n                             COMPARE;\n                             EQ;\n                             NOT;\n                             IF\n                               { PUSH string "InvalidCaller";\n                                 FAILWITH }\n                               {  };\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             DUP;\n                             PUSH nat 2;\n                             COMPARE;\n                             EQ;\n                             IF\n                               { DIG 20;\n                                 DUP;\n                                 DUG 21;\n                                 DIG 22;\n                                 DUP;\n                                 DUG 23;\n                                 NOW;\n                                 PAIR;\n                                 DIG 15;\n                                 DUP;\n                                 DUG 16;\n                                 PAIR;\n                                 DIG 5;\n                                 DUP;\n                                 DUG 6;\n                                 PAIR;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 PAIR;\n                                 DIG 13;\n                                 DUP;\n                                 DUG 14;\n                                 PAIR;\n                                 DIG 12;\n                                 DUP;\n                                 DUG 13;\n                                 PAIR;\n                                 DIG 11;\n                                 DUP;\n                                 DUG 12;\n                                 PAIR;\n                                 DIG 17;\n                                 DUP;\n                                 DUG 18;\n                                 PAIR;\n                                 DIG 14;\n                                 DUP;\n                                 DUG 15;\n                                 PAIR;\n                                 DIG 10;\n                                 DUP;\n                                 DUG 11;\n                                 PAIR;\n                                 DIG 9;\n                                 DUP;\n                                 DUG 10;\n                                 PAIR;\n                                 DIG 8;\n                                 DUP;\n                                 DUG 9;\n                                 PAIR;\n                                 DIG 4;\n                                 DUP;\n                                 DUG 5;\n                                 PAIR;\n                                 EXEC;\n                                 DIG 6;\n                                 DUP;\n                                 DUG 7;\n                                 COMPARE;\n                                 LT;\n                                 IF\n                                   { PUSH nat 3;\n                                     DIP { DIG 4; DROP };\n                                     DUG 4 }\n                                   {  } }\n                               { PUSH string "InvalidState";\n                                 FAILWITH };\n                             DROP;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             DIG 1;\n                             PAIR }\n                           { DROP;\n                             DIG 17;\n                             DUP;\n                             DUG 18;\n                             SENDER;\n                             COMPARE;\n                             EQ;\n                             NOT;\n                             IF\n                               { PUSH string "InvalidCaller";\n                                 FAILWITH }\n                               {  };\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             DUP;\n                             PUSH nat 2;\n                             COMPARE;\n                             EQ;\n                             IF\n                               { DIG 20;\n                                 DUP;\n                                 DUG 21;\n                                 DIG 22;\n                                 DUP;\n                                 DUG 23;\n                                 NOW;\n                                 PAIR;\n                                 DIG 15;\n                                 DUP;\n                                 DUG 16;\n                                 PAIR;\n                                 DIG 5;\n                                 DUP;\n                                 DUG 6;\n                                 PAIR;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 PAIR;\n                                 DIG 13;\n                                 DUP;\n                                 DUG 14;\n                                 PAIR;\n                                 DIG 12;\n                                 DUP;\n                                 DUG 13;\n                                 PAIR;\n                                 DIG 11;\n                                 DUP;\n                                 DUG 12;\n                                 PAIR;\n                                 DIG 17;\n                                 DUP;\n                                 DUG 18;\n                                 PAIR;\n                                 DIG 14;\n                                 DUP;\n                                 DUG 15;\n                                 PAIR;\n                                 DIG 10;\n                                 DUP;\n                                 DUG 11;\n                                 PAIR;\n                                 DIG 9;\n                                 DUP;\n                                 DUG 10;\n                                 PAIR;\n                                 DIG 8;\n                                 DUP;\n                                 DUG 9;\n                                 PAIR;\n                                 DIG 4;\n                                 DUP;\n                                 DUG 5;\n                                 PAIR;\n                                 EXEC;\n                                 DIG 6;\n                                 DUP;\n                                 DUG 7;\n                                 COMPARE;\n                                 GE;\n                                 IF\n                                   { PUSH nat 4;\n                                     DIP { DIG 4; DROP };\n                                     DUG 4 }\n                                   {  } }\n                               { PUSH string "InvalidState";\n                                 FAILWITH };\n                             DROP;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             DIG 1;\n                             PAIR } } } } };\n         DIP { DROP 2 } };\n}\n'))),Object(r.b)(o.a,{value:"specification",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-archetype"}),"specification function compute_expected (d : date) {\n\n  (** etrigger is defined as the set of early assets for which\n      the trigger condition is true *)\n  definition etrigger { e : early |\n    forall f in fixing,\n      if e.eobservation = f.fobservation\n      then (* trigger condition *)\n            f.bac >= e.trigger * bac_initial\n        and f.sg  >= e.trigger * sg_initial\n        and f.ubs >= e.trigger * ubs_initial\n      else false\n  }\n  (** ibarrier is defined as the set of interest assets for which\n      the barrier condition is true *)\n  definition ibarrier { i : interest |\n    forall f in fixing,\n      (* retrieving the first element of etrigger *)\n      let some key_efirst = etrigger.nth(0) in\n      let some efirst = etrigger[key_efirst] in\n        if i.iobservation = f.fobservation and i.iobservation <= efirst.eobservation\n        then (* barrier condition *)\n                  f.bac >= bac_strike\n              and f.sg  >= sg_strike\n              and f.ubs >= ubs_strike\n        else false\n      otherwise false\n      otherwise false\n  }\n\n  (** expected is the sum of redemption nominal and interests *)\n  postcondition p_expected {\n      let expected : tez =\n        let some ftrigger_key = etrigger.nth(0) in\n        let some ftrigger = early[ftrigger_key] in\n        (* early redemption *)\n        ftrigger.value * nominal\n        otherwise\n        (* redemption *)\n        (let some f = fixing[gredemption] in\n        if     f.bac >= bac_strike\n           and f.sg  >= sg_strike\n           and f.ubs >= ubs_strike\n        then\n           nominal\n        else\n          let bac_trigger = f.bac / bac_strike in\n          let sg_trigger  = f.sg  / sg_strike  in\n          let ubs_trigger = f.ubs / ubs_strike in\n          let worst = min ((min (bac_trigger, sg_trigger)), ubs_trigger) in\n          worst * nominal\n        otherwise 0tz)\n        otherwise\n        (* redemption *)\n        let some f = fixing[gredemption] in\n        if     f.bac >= bac_strike\n           and f.sg  >= sg_strike\n           and f.ubs >= ubs_strike\n        then\n           nominal\n        else\n          let bac_trigger = f.bac / bac_strike in\n          let sg_trigger  = f.sg  / sg_strike  in\n          let ubs_trigger = f.ubs / ubs_strike in\n          let worst = min ((min (bac_trigger, sg_trigger)), ubs_trigger) in\n          worst * nominal\n        otherwise 0tz\n      in\n      (* interests *)\n      let interests =\n      if expected = 0tz then 0tz else\n        (let some lbarrier_key = ibarrier.nth(abs(ibarrier.count() - 1)) in\n        let some lbarrier = interest[lbarrier_key] in\n          let some v = fixing[lbarrier.iobservation] in\n          if    v.bac >= lbarrier.barrier * bac_initial\n            and v.sg  >= lbarrier.barrier * sg_initial\n            and v.ubs >= lbarrier.barrier * ubs_initial\n          then lbarrier.rate * nominal\n          else 0tz\n        otherwise 0tz\n        otherwise 0tz\n        otherwise 0tz)\n      in\n       result = expected + interests\n  }\n}\n")))))}d.isMDXComponent=!0},242:function(n,e,t){"use strict";function a(n){var e,t,i="";if("string"==typeof n||"number"==typeof n)i+=n;else if("object"==typeof n)if(Array.isArray(n))for(e=0;e<n.length;e++)n[e]&&(t=a(n[e]))&&(i&&(i+=" "),i+=t);else for(e in n)n[e]&&(i&&(i+=" "),i+=e);return i}e.a=function(){for(var n,e,t=0,i="";t<arguments.length;)(n=arguments[t++])&&(e=a(n))&&(i&&(i+=" "),i+=e);return i}},247:function(n,e,t){"use strict";var a=t(0),i=t(248);e.a=function(){const n=Object(a.useContext)(i.a);if(null==n)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return n}},248:function(n,e,t){"use strict";var a=t(0);const i=Object(a.createContext)(void 0);e.a=i},249:function(n,e,t){"use strict";var a=t(0),i=t.n(a),r=t(247),l=t(242),b=t(56),o=t.n(b);const P=37,c=39;e.a=function(n){const{lazy:e,block:t,defaultValue:b,values:I,groupId:s,className:d}=n,{tabGroupChoices:D,setTabGroupChoices:A}=Object(r.a)(),[p,U]=Object(a.useState)(b),m=a.Children.toArray(n.children);if(null!=s){const n=D[s];null!=n&&n!==p&&I.some((e=>e.value===n))&&U(n)}const u=n=>{U(n),null!=s&&A(s,n)},O=[];return i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":t},d)},I.map((({value:n,label:e})=>i.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":p===n,className:Object(l.a)("tabs__item",o.a.tabItem,{"tabs__item--active":p===n}),key:n,ref:n=>O.push(n),onKeyDown:n=>{((n,e,t)=>{switch(t.keyCode){case c:((n,e)=>{const t=n.indexOf(e)+1;n[t]?n[t].focus():n[0].focus()})(n,e);break;case P:((n,e)=>{const t=n.indexOf(e)-1;n[t]?n[t].focus():n[n.length-1].focus()})(n,e)}})(O,n.target,n)},onFocus:()=>u(n),onClick:()=>{u(n)}},e)))),e?Object(a.cloneElement)(m.filter((n=>n.props.value===p))[0],{className:"margin-vert--md"}):i.a.createElement("div",{className:"margin-vert--md"},m.map(((n,e)=>Object(a.cloneElement)(n,{key:e,hidden:n.props.value!==p})))))}},250:function(n,e,t){"use strict";var a=t(3),i=t(0),r=t.n(i);e.a=function({children:n,hidden:e,className:t}){return r.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:e,className:t}),n)}}}]);