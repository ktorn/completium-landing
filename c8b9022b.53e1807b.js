(window.webpackJsonp=window.webpackJsonp||[]).push([[126],{194:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return D})),t.d(e,"metadata",(function(){return o})),t.d(e,"toc",(function(){return d})),t.d(e,"default",(function(){return P}));var a=t(3),i=t(7),r=(t(0),t(227)),l=t(228),b=t(242),c=t(243),D={id:"template8",title:"Idea box",sidebar_label:"Idea box",slug:"/templates/ideabox"},o={unversionedId:"templates/template8",id:"templates/template8",isDocsHomePage:!1,title:"Idea box",description:"Introduction",source:"@site/docs/templates/template8.md",slug:"/templates/ideabox",permalink:"/docs/templates/ideabox",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template8.md",version:"current",sidebar_label:"Idea box",sidebar:"templates",previous:{title:"Health care",permalink:"/docs/templates/healthcare"},next:{title:"Competition",permalink:"/docs/templates/competition"}},d=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Code",id:"code",children:[]}],s={toc:d};function P(n){var e=n.components,t=Object(i.a)(n,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"introduction"},"Introduction"),Object(r.b)("p",null,"This contract is a process to propose ideas and to select the best ones. You can see this contract in action in the ",Object(r.b)(l.a,{to:"/docs/dapp-ideabox/",mdxType:"Link"},"Idea Box")," DApp example."),Object(r.b)("h2",{id:"api"},"API"),Object(r.b)("h3",{id:"storage"},"Storage"),Object(r.b)("p",null,"Ideas data (title and description) are stored as ",Object(r.b)("inlineCode",{parentName:"p"},"bytes"),"."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"chairman")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"address")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Address of the box's chairman")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"maxvotes")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"nat")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Maximum number of votes per voter.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"idea")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"collection")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"An idea is defined by:",Object(r.b)("ul",null,Object(r.b)("li",null,"an identifier (key)"),Object(r.b)("li",null,"a title"),Object(r.b)("li",null,"a description"),Object(r.b)("li",null,"a number of votes"),Object(r.b)("li",null,"a creation date"),Object(r.b)("li",null,"the author's address")))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"voter")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"collection")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"A voter is defined by:",Object(r.b)("ul",null,Object(r.b)("li",null,"an address (key)"),Object(r.b)("li",null,"a number of remaining votes")))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"selected")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"collecter")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"This is the collection of selected ideas.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"_state")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"states")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Box state, one of ",Object(r.b)("inlineCode",{parentName:"td"},"Activated"),", ",Object(r.b)("inlineCode",{parentName:"td"},"Terminated"),".")))),Object(r.b)("h3",{id:"entrypoints"},"Entrypoints"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Parameters"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"register")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"a")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called by ",Object(r.b)("inlineCode",{parentName:"td"},"chairman")," to register a new voter at address ",Object(r.b)("inlineCode",{parentName:"td"},"a")," and remaining votes at ",Object(r.b)("inlineCode",{parentName:"td"},"maxvotes"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"add_idea")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"ititle"),", ",Object(r.b)("inlineCode",{parentName:"td"},"description")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Adds an idea in the box if box not terminated (",Object(r.b)("em",{parentName:"td"},"anyone")," can add an idea).")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"vote")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"n"),", ",Object(r.b)("inlineCode",{parentName:"td"},"weight")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called by a voter to increment by ",Object(r.b)("inlineCode",{parentName:"td"},"weight")," the number of votes of idea ",Object(r.b)("inlineCode",{parentName:"td"},"n"),". It fails if box is terminated.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"terminate")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called by ",Object(r.b)("inlineCode",{parentName:"td"},"chairman")," to close the box and select the top 3 best ideas with numbers of votes above ",Object(r.b)("inlineCode",{parentName:"td"},"maxvotes"),".")))),Object(r.b)("h2",{id:"code"},"Code"),Object(r.b)(b.a,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"},{label:"Specification",value:"specification"}],mdxType:"Tabs"},Object(r.b)(c.a,{value:"archetype",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-archetype",metastring:'title="ideabox.arl"',title:'"ideabox.arl"'}),"archetype ideasbox(chairman : address, maxvotes : nat)\n\nstates =\n| Activated initial\n| Terminated\n\nasset idea {\n  id       : nat;\n  title    : bytes;\n  desc     : bytes;\n  nbvotes  : nat = 0;\n  creation : date;\n  author   : address;\n}\n\nasset voter {\n  addr      : address;\n  remaining : nat = maxvotes;\n}\n\nasset selected {\n  sid : nat;\n}\n\nentry register (a_voter : address) {\n  called by chairman\n  require {\n    r0 : state = Activated;\n  }\n  effect { voter.add({ addr = a_voter }) }\n}\n\nentry add_idea(ititle : bytes, description : bytes) {\n  require {\n    r1 : state = Activated;\n  }\n  effect {\n    idea.add({\n            id = idea.count();\n      title = ititle;\n            desc = description;\n            creation = now;\n            author = caller\n        })\n  }\n}\n\nentry vote(n : nat, weight : nat) {\n  require {\n    r2 : voter.contains(caller);\n    r3 : voter[caller].remaining >= weight;\n    r4 : state = Activated;\n  }\n  effect {\n    voter[caller].remaining -= weight;\n    idea[n].nbvotes += weight;\n  }\n}\n\ntransition terminate () {\n  called by chairman\n  from Activated\n  to Terminated\n  with effect {\n    for i in idea.select(the.nbvotes > maxvotes).sort(desc(nbvotes)).head(3) do\n        selected.add({i})\n    done\n  }\n}\n"))),Object(r.b)(c.a,{value:"michelson",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'# (Pair chairman (Pair maxvotes (Pair 0 (Pair {  } (Pair {  } {  })))))\n{\n  storage (pair (address %chairman) (pair (nat %maxvotes) (pair (nat %_state) (pair (map %idea nat (pair (bytes %title) (pair (bytes %desc) (pair (nat %nbvotes) (pair (timestamp %creation) (address %author)))))) (pair (map %voter address nat) (set %selected nat))))));\n  parameter (or (address %register) (or (pair %add_idea (bytes %ititle) (bytes %description)) (or (pair %vote (nat %n) (nat %weight)) (unit %terminate))));\n  code { UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { DIG 6;\n             DUP;\n             DUG 7;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             PUSH nat 0;\n             DIG 5;\n             DUP;\n             DUG 6;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCondition: r0";\n                 FAILWITH }\n               {  };\n             DIG 2;\n             DUP;\n             DUG 3;\n             DIG 1;\n             DUP;\n             DUG 2;\n             MEM;\n             IF\n               { PUSH string "KeyAlreadyExists";\n                 FAILWITH }\n               { DIG 2;\n                 DUP;\n                 DUG 3;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 SOME;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 UPDATE;\n                 DIP { DIG 2; DROP };\n                 DUG 2 };\n             DROP;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             NIL operation;\n             PAIR }\n           { IF_LEFT\n               { UNPAIR;\n                 SWAP;\n                 PUSH nat 0;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCondition: r1";\n                     FAILWITH }\n                   {  };\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 SIZE;\n                 MEM;\n                 IF\n                   { PUSH string "KeyAlreadyExists";\n                     FAILWITH }\n                   { DIG 4;\n                     DUP;\n                     DUG 5;\n                     SENDER;\n                     NOW;\n                     PAIR;\n                     PUSH nat 0;\n                     PAIR;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     PAIR;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     PAIR;\n                     SOME;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     SIZE;\n                     UPDATE;\n                     DIP { DIG 4; DROP };\n                     DUG 4 };\n                 DROP 2;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 NIL operation;\n                 PAIR }\n               { IF_LEFT\n                   { UNPAIR;\n                     SWAP;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     SENDER;\n                     MEM;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCondition: r2";\n                         FAILWITH }\n                       {  };\n                     DUP;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     SENDER;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     COMPARE;\n                     GE;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCondition: r3";\n                         FAILWITH }\n                       {  };\n                     PUSH nat 0;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCondition: r4";\n                         FAILWITH }\n                       {  };\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     SENDER;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     PUSH int 0;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     INT;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     SUB;\n                     COMPARE;\n                     GE;\n                     IF\n                       { DIG 2;\n                         DUP;\n                         DUG 3;\n                         INT;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         SUB;\n                         ABS }\n                       { PUSH string "AssignNat";\n                         FAILWITH };\n                     SOME;\n                     SENDER;\n                     UPDATE;\n                     DIP { DIG 4; DROP };\n                     DUG 4;\n                     DROP;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     UNPAIR;\n                     SWAP;\n                     UNPAIR;\n                     SWAP;\n                     UNPAIR;\n                     DROP;\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     CDR;\n                     CDR;\n                     CAR;\n                     ADD;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SOME;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     UPDATE;\n                     DIP { DIG 5; DROP };\n                     DUG 5;\n                     DROP 3;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     NIL operation;\n                     PAIR }\n                   { DROP;\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCaller";\n                         FAILWITH }\n                       {  };\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     DUP;\n                     PUSH nat 0;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { NIL nat;\n                         NIL nat;\n                         PUSH nat 0;\n                         PAIR;\n                         NIL nat;\n                         NIL nat;\n                         NIL nat;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         ITER { UNPAIR;\n                                DIG 12;\n                                DUP;\n                                DUG 13;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                CDR;\n                                CDR;\n                                CAR;\n                                COMPARE;\n                                GT;\n                                IF\n                                  { DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CONS }\n                                  { DIG 2;\n                                    DUP;\n                                    DUG 3 };\n                                DIP { DIG 2; DROP };\n                                DUG 2;\n                                DROP 2 };\n                         ITER { DIG 1;\n                                DUP;\n                                DUG 2;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                CONS;\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         ITER { DIG 7;\n                                DUP;\n                                DUG 8;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                GET;\n                                IF_NONE\n                                  { PUSH string "GetNoneValue";\n                                    FAILWITH }\n                                  {  };\n                                NIL nat;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                SOME;\n                                PAIR;\n                                DIG 3;\n                                DUP;\n                                DUG 4;\n                                ITER { DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       CAR;\n                                       DIG 2;\n                                       DUP;\n                                       DUG 3;\n                                       CDR;\n                                       DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       IF_NONE\n                                         { DUP;\n                                           DIG 3;\n                                           DUP;\n                                           DUG 4;\n                                           CONS;\n                                           DIG 2;\n                                           DUP;\n                                           DUG 3;\n                                           PAIR }\n                                         { PUSH int 0;\n                                           DIG 14;\n                                           DUP;\n                                           DUG 15;\n                                           DIG 5;\n                                           DUP;\n                                           DUG 6;\n                                           GET;\n                                           IF_NONE\n                                             { PUSH string "GetNoneValue";\n                                               FAILWITH }\n                                             {  };\n                                           DIG 7;\n                                           DUP;\n                                           DUG 8;\n                                           CDR;\n                                           CDR;\n                                           CAR;\n                                           DIG 1;\n                                           DUP;\n                                           DUG 2;\n                                           CDR;\n                                           CDR;\n                                           CAR;\n                                           COMPARE;\n                                           LT;\n                                           IF\n                                             { PUSH int 1 }\n                                             { PUSH int 0 };\n                                           DIP { DROP };\n                                           COMPARE;\n                                           GT;\n                                           IF\n                                             { DIG 1;\n                                               DUP;\n                                               DUG 2;\n                                               DIG 7;\n                                               DUP;\n                                               DUG 8;\n                                               CONS;\n                                               DIG 4;\n                                               DUP;\n                                               DUG 5;\n                                               CONS;\n                                               NONE nat;\n                                               PAIR }\n                                             { DIG 1;\n                                               DUP;\n                                               DUG 2;\n                                               DIG 4;\n                                               DUP;\n                                               DUG 5;\n                                               CONS;\n                                               DIG 3;\n                                               DUP;\n                                               DUG 4;\n                                               PAIR };\n                                           SWAP;\n                                           DROP };\n                                       DIP { DROP };\n                                       DIP { DROP };\n                                       DIP { DIG 1; DROP };\n                                       DUG 1;\n                                       DROP };\n                                DUP;\n                                CAR;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                CDR;\n                                NIL nat;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                IF_NONE\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2 }\n                                  { DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    DIG 7;\n                                    DUP;\n                                    DUG 8;\n                                    CONS;\n                                    SWAP;\n                                    DROP };\n                                ITER { DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       CONS;\n                                       DIP { DIG 1; DROP };\n                                       DUG 1;\n                                       DROP };\n                                DIP { DROP };\n                                DIP { DROP };\n                                DIP { DROP };\n                                DIP { DROP };\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         ITER { PUSH nat 3;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                CAR;\n                                COMPARE;\n                                LT;\n                                IF\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CDR;\n                                    DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CONS;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR }\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CDR;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR };\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         CDR;\n                         ITER { DIG 1;\n                                DUP;\n                                DUG 2;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                CONS;\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         ITER { DIG 2;\n                                DUP;\n                                DUG 3;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                MEM;\n                                IF\n                                  { PUSH string "KeyAlreadyExists";\n                                    FAILWITH }\n                                  { DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    PUSH bool True;\n                                    DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    UPDATE;\n                                    DIP { DIG 2; DROP };\n                                    DUG 2 };\n                                DROP };\n                         PUSH nat 1;\n                         DIP { DIG 4; DROP };\n                         DUG 4 }\n                       { PUSH string "InvalidState";\n                         FAILWITH };\n                     DROP;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     NIL operation;\n                     PAIR } } } };\n}\n'))),Object(r.b)(c.a,{value:"specification",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-archetype"}),"specification entry vote (n : nat, weight : nat) {\n  postcondition p1 {\n    let some v = voter[caller] in\n    let some bv = before.voter[caller] in\n      v.remaining = bv.remaining - weight\n    otherwise true otherwise true\n  }\n}\n\nspecification {\n  i1 : 5 * voter.count() = idea.sum(nbvotes) + voter.sum(remaining)\n}\n")))))}P.isMDXComponent=!0},234:function(n,e,t){"use strict";function a(n){var e,t,i="";if("string"==typeof n||"number"==typeof n)i+=n;else if("object"==typeof n)if(Array.isArray(n))for(e=0;e<n.length;e++)n[e]&&(t=a(n[e]))&&(i&&(i+=" "),i+=t);else for(e in n)n[e]&&(i&&(i+=" "),i+=e);return i}e.a=function(){for(var n,e,t=0,i="";t<arguments.length;)(n=arguments[t++])&&(e=a(n))&&(i&&(i+=" "),i+=e);return i}},240:function(n,e,t){"use strict";var a=t(0),i=t(241);e.a=function(){const n=Object(a.useContext)(i.a);if(null==n)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return n}},241:function(n,e,t){"use strict";var a=t(0);const i=Object(a.createContext)(void 0);e.a=i},242:function(n,e,t){"use strict";var a=t(0),i=t.n(a),r=t(240),l=t(234),b=t(56),c=t.n(b);const D=37,o=39;e.a=function(n){const{lazy:e,block:t,defaultValue:b,values:d,groupId:s,className:P}=n,{tabGroupChoices:I,setTabGroupChoices:O}=Object(r.a)(),[U,m]=Object(a.useState)(b),p=a.Children.toArray(n.children);if(null!=s){const n=I[s];null!=n&&n!==U&&d.some((e=>e.value===n))&&m(n)}const G=n=>{m(n),null!=s&&O(s,n)},u=[];return i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":t},P)},d.map((({value:n,label:e})=>i.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":U===n,className:Object(l.a)("tabs__item",c.a.tabItem,{"tabs__item--active":U===n}),key:n,ref:n=>u.push(n),onKeyDown:n=>{((n,e,t)=>{switch(t.keyCode){case o:((n,e)=>{const t=n.indexOf(e)+1;n[t]?n[t].focus():n[0].focus()})(n,e);break;case D:((n,e)=>{const t=n.indexOf(e)-1;n[t]?n[t].focus():n[n.length-1].focus()})(n,e)}})(u,n.target,n)},onFocus:()=>G(n),onClick:()=>{G(n)}},e)))),e?Object(a.cloneElement)(p.filter((n=>n.props.value===U))[0],{className:"margin-vert--md"}):i.a.createElement("div",{className:"margin-vert--md"},p.map(((n,e)=>Object(a.cloneElement)(n,{key:e,hidden:n.props.value!==U})))))}},243:function(n,e,t){"use strict";var a=t(3),i=t(0),r=t.n(i);e.a=function({children:n,hidden:e,className:t}){return r.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:e,className:t}),n)}}}]);