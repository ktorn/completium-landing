(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{221:function(n,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return s})),t.d(r,"metadata",(function(){return o})),t.d(r,"toc",(function(){return d})),t.d(r,"default",(function(){return l}));var i=t(3),e=(t(0),t(235)),a=t(236),p=t(248),m=t(249);t(373);const s={id:"template10",title:"Auction",sidebar_label:"Auction",slug:"/templates/auction"},o={unversionedId:"templates/template10",id:"templates/template10",isDocsHomePage:!1,title:"Auction",description:"Introduction",source:"@site/docs/templates/template10.md",slug:"/templates/auction",permalink:"/docs/templates/auction",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template10.md",version:"current",sidebar_label:"Auction",sidebar:"templates",previous:{title:"Competition",permalink:"/docs/templates/competition"}},d=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Code",id:"code",children:[]}],c={toc:d};function l({components:n,...r}){return Object(e.b)("wrapper",Object(i.a)({},c,r,{components:n,mdxType:"MDXLayout"}),Object(e.b)("h2",{id:"introduction"},"Introduction"),Object(e.b)("p",null,"Auction process to transfer a ",Object(e.b)(a.a,{to:"/docs/templates/nft",mdxType:"Link"},"FA2 NFT")," to best bidder."),Object(e.b)("p",null,"The best bid is escrowed by the contract til ownership is claimed. Previous best bidder gets its bid back. When asset ownership claimed, it is transfered to asset owner."),Object(e.b)("p",null,"The contract calls the FA2 contract to check NFT ownership, and transfer ownership when auction is over."),Object(e.b)("p",null,"The benefit of splitting the auction process from the FA2 ledger is that it makes it possible to change or select the appropriate auction process, while keeping the ledger intact."),Object(e.b)("h2",{id:"api"},"API"),Object(e.b)("h3",{id:"storage"},"Storage"),Object(e.b)("table",null,Object(e.b)("thead",{parentName:"table"},Object(e.b)("tr",{parentName:"thead"},Object(e.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Name"),Object(e.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Type"),Object(e.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Description"))),Object(e.b)("tbody",{parentName:"table"},Object(e.b)("tr",{parentName:"tbody"},Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(e.b)("inlineCode",{parentName:"td"},"assetid")),Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(e.b)("inlineCode",{parentName:"td"},"bytes")),Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Id of sold item.")),Object(e.b)("tr",{parentName:"tbody"},Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(e.b)("inlineCode",{parentName:"td"},"owner")),Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(e.b)("inlineCode",{parentName:"td"},"address")),Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Address to collect best bid.")),Object(e.b)("tr",{parentName:"tbody"},Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(e.b)("inlineCode",{parentName:"td"},"auction_dur")),Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(e.b)("inlineCode",{parentName:"td"},"duration")),Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Auction duration.")),Object(e.b)("tr",{parentName:"tbody"},Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(e.b)("inlineCode",{parentName:"td"},"dur_incr")),Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(e.b)("inlineCode",{parentName:"td"},"duration")),Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Increment of auction duration when a bid is placed.")),Object(e.b)("tr",{parentName:"tbody"},Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(e.b)("inlineCode",{parentName:"td"},"nft")),Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(e.b)("inlineCode",{parentName:"td"},"collection")),Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"An NFT auction is defined by:",Object(e.b)("ul",null,Object(e.b)("li",null,"nft id"),Object(e.b)("li",null,Object(e.b)("inlineCode",{parentName:"td"},"owner")," of the NFT"),Object(e.b)("li",null,Object(e.b)("inlineCode",{parentName:"td"},"bestbidder")," option of address of best bidder"),Object(e.b)("li",null,Object(e.b)("inlineCode",{parentName:"td"},"best")," best bid amount"),Object(e.b)("li",null,Object(e.b)("inlineCode",{parentName:"td"},"endofbid")," date of the end of bid")))))),Object(e.b)("h3",{id:"entrypoints"},"Entrypoints"),Object(e.b)("p",null,"The transfer of ownership performed by ",Object(e.b)("inlineCode",{parentName:"p"},"calim")," supposes that the NFT owner calls the ",Object(e.b)("inlineCode",{parentName:"p"},"update_operators")," entrypoint of the ",Object(e.b)(a.a,{to:"/docs/templates/nft",mdxType:"Link"},"FA2 contract"),"."),Object(e.b)("table",null,Object(e.b)("thead",{parentName:"table"},Object(e.b)("tr",{parentName:"thead"},Object(e.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Name"),Object(e.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Parameters"),Object(e.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Description"))),Object(e.b)("tbody",{parentName:"table"},Object(e.b)("tr",{parentName:"tbody"},Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(e.b)("inlineCode",{parentName:"td"},"upforsale")),Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(e.b)("inlineCode",{parentName:"td"},"id"),", ",Object(e.b)("inlineCode",{parentName:"td"},"price")),Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Owner sets the NFT ",Object(e.b)("inlineCode",{parentName:"td"},"id")," up for sale. ",Object(e.b)("p",null),"Sets date of end of bid to ",Object(e.b)("inlineCode",{parentName:"td"},"now + auction_dur"),". ",Object(e.b)("p",null),"FA2 NFT contract entrypoint ",Object(e.b)("inlineCode",{parentName:"td"},"balance_of")," is called to check that caller is the owner of NFT ",Object(e.b)("inlineCode",{parentName:"td"},"id"),".")),Object(e.b)("tr",{parentName:"tbody"},Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(e.b)("inlineCode",{parentName:"td"},"bid")),Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(e.b)("inlineCode",{parentName:"td"},"id")),Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Places a bid for NFT ",Object(e.b)("inlineCode",{parentName:"td"},"id"),". Bid amount is transferred. ",Object(e.b)("p",null),"If this is best bid, previous best bid amount is transferred back to previous bet bidder.")),Object(e.b)("tr",{parentName:"tbody"},Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(e.b)("inlineCode",{parentName:"td"},"claim")),Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(e.b)("inlineCode",{parentName:"td"},"id")),Object(e.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Transfers escrowed bid amount to ",Object(e.b)("inlineCode",{parentName:"td"},"owner")," if auction is over for NFT ",Object(e.b)("inlineCode",{parentName:"td"},"id"),". New ",Object(e.b)("inlineCode",{parentName:"td"},"owner")," value is set to ",Object(e.b)("inlineCode",{parentName:"td"},"bestbidder"),".",Object(e.b)("p",null),"FA2 NFT contract entrypoint ",Object(e.b)("inlineCode",{parentName:"td"},"transfer")," is called to transfer ownership to best bidder.")))),Object(e.b)("h2",{id:"code"},"Code"),Object(e.b)(p.a,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"}],mdxType:"Tabs"},Object(e.b)(m.a,{value:"archetype",mdxType:"TabItem"},Object(e.b)("pre",null,Object(e.b)("code",Object(i.a)({parentName:"pre"},{className:"language-archetype",metastring:'title="auction.arl"',title:'"auction.arl"'}),'\narchetype auction(\n  nftoken     : address,\n  auction_dur : duration,\n  dur_incr    : duration\n)\n\nasset nft {\n  nftid      : nat;\n  owner      : address;\n  bestbidder : option<address>;\n  best       : tez;\n  endofbid   : date;\n}\n\nrecord operator_param {\n  opp_owner    : address;\n  opp_operator : address;\n  opp_token_id : nat\n} as ((owner, (operator, token_id)))\n\nrecord balance_of_request {\n  bo_owner : address;\n  btoken_id : nat;\n} as ((owner, token_id))\n\nrecord balance_of_response {\n  request : balance_of_request;\n  balance_ : nat;\n} as ((request, balance))\n\nfunction get_addop_param(\n  powner : address,\n  popp   : address,\n  pid    : nat\n) : list<or<operator_param, operator_param>> {\n  return ([\n    left<operator_param>({\n      opp_owner    = powner;\n      opp_operator = popp;\n      opp_token_id = pid\n    })\n  ])\n}\n\nentry check_ownership(brl : list<balance_of_response>) {\n  called by nftoken\n  effect {\n    match brl with\n    | hd::tl -> begin\n      dorequire(hd.balance_ = 1, "Caller Is Not Owner");\n      transfer 0tz to nftoken\n        call update_operators<list<or<operator_param, operator_param>>>(\n          get_addop_param(hd.request.bo_owner, selfaddress, hd.request.btoken_id));\n    end\n    | []     -> fail("Empty Response")\n    end\n  }\n}\n\nentry upforsale (id : nat, price : tez) {\n  require {\n    r1: if nft.contains(id) then nft[id].endofbid < now else true\n  }\n  effect {\n    nft.addupdate(id, {\n      owner      = caller;\n      bestbidder = none;\n      best       = price;\n      endofbid   = (now + auction_dur)\n    });\n    (* check ownership with FA2 balance_of *)\n    transfer 0tz to nftoken\n       call balance_of<\n              list<balance_of_request> *\n              contract<list<balance_of_response>>\n       >(([ { bo_owner = caller; btoken_id = id } ], self.check_ownership));\n  }\n}\n\nentry bid (id : nat) {\n  require {\n    r2 otherwise "No Auction"   : now < nft[id].endofbid;\n    r3 otherwise "Not Best Bid" :\n      if issome(nft[id].bestbidder)\n      then transferred >  nft[id].best\n      else transferred >= nft[id].best;\n  }\n  effect {\n    match nft[id].bestbidder with\n    | none -> ()\n    | some bidder -> transfer nft[id].best to bidder\n    end;\n    nft.update(id, {\n      bestbidder = some(caller);\n      best       = transferred;\n      endofbid  +=\n        (if nft[id].endofbid - now < dur_incr\n         then dur_incr\n         else 0s)\n    })\n  }\n}\n\nrecord transfer_destination {\n  to_dest           : address;\n  token_id_dest     : nat;\n  token_amount_dest : nat\n} as ((to_, (token_id, amount)))\n\nfunction get_transfer_param(\n  %from : address,\n  %to   : address,\n  id    : nat) : list<address * list<transfer_destination>> {\n  return ([\n    (%from, [{\n      to_dest           = %to;\n      token_id_dest     = id;\n      token_amount_dest = 1\n    }])\n  ])\n}\n\nfunction get_rmop_param(\n  powner : address,\n  popp   : address,\n  pid    : nat\n) : list<or<operator_param, operator_param>> {\n  return ([\n    right<operator_param>({\n      opp_owner    = powner;\n      opp_operator = popp;\n      opp_token_id = pid\n    })\n  ])\n}\n\nentry claim (id : nat) {\n  require {\n    r4 otherwise "Auction Is Still On" : nft[id].endofbid < now\n  }\n  effect {\n    transfer 0tz to nftoken\n      call update_operators<list<or<operator_param, operator_param>>>(\n        get_rmop_param(nft[id].owner, selfaddress, id));\n    match nft[id].bestbidder with\n    | none -> ()\n    | some bidder -> begin\n        transfer 0tz to nftoken\n          call %transfer<list<address * list<transfer_destination>>>(\n            get_transfer_param(nft[id].owner, bidder, id));\n        transfer nft[id].best to nft[id].owner;\n      end\n    end;\n    nft.remove(id);\n  }\n}\n'))),Object(e.b)(m.a,{value:"michelson",mdxType:"TabItem"},Object(e.b)("pre",null,Object(e.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),'# (Pair nftoken (Pair auction_dur (Pair dur_incr {  })))\n{\n  storage (pair (address %nftoken) (pair (int %auction_dur) (pair (int %dur_incr) (map %nft nat (pair (address %owner) (pair (option %bestbidder address) (pair (mutez %best) (timestamp %endofbid))))))));\n  parameter (or (list %check_ownership (pair (pair (address %owner) (nat %token_id)) (nat %balance))) (or (pair %upforsale (nat %id) (mutez %price)) (or (nat %bid) (nat %claim))));\n  code { LAMBDA\n           (pair address (pair address nat))\n           (list (or (pair (address %owner) (pair (address %operator) (nat %token_id))) (pair (address %owner) (pair (address %operator) (nat %token_id)))))\n           { UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             PUSH unit Unit;\n             NIL (or (pair (address %owner) (pair (address %operator) (nat %token_id))) (pair (address %owner) (pair (address %operator) (nat %token_id))));\n             DIG 2;\n             DUP;\n             DUG 3;\n             DIG 4;\n             DUP;\n             DUG 5;\n             PAIR;\n             DIG 5;\n             DUP;\n             DUG 6;\n             PAIR;\n             LEFT (pair address (pair address nat));\n             CONS;\n             SWAP;\n             DROP;\n             DUG 3;\n             DROP 3 };\n         LAMBDA\n           (pair address (pair address nat))\n           (list (pair address (list (pair (address %to_) (pair (nat %token_id) (nat %amount))))))\n           { UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             PUSH unit Unit;\n             NIL (pair address (list (pair (address %to_) (pair (nat %token_id) (nat %amount)))));\n             NIL (pair (address %to_) (pair (nat %token_id) (nat %amount)));\n             PUSH nat 1;\n             DIG 4;\n             DUP;\n             DUG 5;\n             PAIR;\n             DIG 5;\n             DUP;\n             DUG 6;\n             PAIR;\n             CONS;\n             DIG 5;\n             DUP;\n             DUG 6;\n             PAIR;\n             CONS;\n             SWAP;\n             DROP;\n             DUG 3;\n             DROP 3 };\n         LAMBDA\n           (pair address (pair address nat))\n           (list (or (pair (address %owner) (pair (address %operator) (nat %token_id))) (pair (address %owner) (pair (address %operator) (nat %token_id)))))\n           { UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             PUSH unit Unit;\n             NIL (or (pair (address %owner) (pair (address %operator) (nat %token_id))) (pair (address %owner) (pair (address %operator) (nat %token_id))));\n             DIG 2;\n             DUP;\n             DUG 3;\n             DIG 4;\n             DUP;\n             DUG 5;\n             PAIR;\n             DIG 5;\n             DUP;\n             DUG 6;\n             PAIR;\n             RIGHT (pair address (pair address nat));\n             CONS;\n             SWAP;\n             DROP;\n             DUG 3;\n             DROP 3 };\n         NIL operation;\n         DIG 4;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { DIG 4;\n             DUP;\n             DUG 5;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             DUP;\n             IF_CONS\n               { PUSH nat 1;\n                 DIG 1;\n                 DUP;\n                 DUG 2;\n                 CDR;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "Caller Is Not Owner";\n                     FAILWITH }\n                   {  };\n                 DIG 7;\n                 DUP;\n                 DUG 8;\n                 DIG 7;\n                 DUP;\n                 DUG 8;\n                 CONTRACT %update_operators (list (or (pair address (pair address nat)) (pair address (pair address nat))));\n                 IF_NONE\n                   { PUSH string "BadContract";\n                     FAILWITH }\n                   {  };\n                 PUSH mutez 0;\n                 DIG 13;\n                 DUP;\n                 DUG 14;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 CAR;\n                 CDR;\n                 SELF;\n                 ADDRESS;\n                 PAIR;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 CAR;\n                 CAR;\n                 PAIR;\n                 EXEC;\n                 TRANSFER_TOKENS;\n                 CONS;\n                 DIP { DIG 7; DROP };\n                 DUG 7;\n                 DROP 2 }\n               { PUSH string "Empty Response";\n                 FAILWITH };\n             DROP;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { UNPAIR;\n                 SWAP;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 MEM;\n                 IF\n                   { NOW;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CDR;\n                     CDR;\n                     CDR;\n                     COMPARE;\n                     LT }\n                   { PUSH bool True };\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCondition: r1";\n                     FAILWITH }\n                   {  };\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 NOW;\n                 ADD;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 PAIR;\n                 NONE address;\n                 PAIR;\n                 SENDER;\n                 PAIR;\n                 SOME;\n                 DIG 3;\n                 DUP;\n                 DUG 4;\n                 UPDATE;\n                 DIP { DIG 2; DROP };\n                 DUG 2;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 CONTRACT %balance_of (pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))));\n                 IF_NONE\n                   { PUSH string "BadContract";\n                     FAILWITH }\n                   {  };\n                 PUSH mutez 0;\n                 SELF;\n                 ADDRESS;\n                 CONTRACT %check_ownership (list (pair (pair address nat) nat));\n                 IF_NONE\n                   { PUSH string "BadContract";\n                     FAILWITH }\n                   {  };\n                 NIL (pair (address %owner) (nat %token_id));\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 SENDER;\n                 PAIR;\n                 CONS;\n                 PAIR;\n                 TRANSFER_TOKENS;\n                 CONS;\n                 DIP { DIG 6; DROP };\n                 DUG 6;\n                 DROP 2;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { IF_LEFT\n                   { DIG 1;\n                     DUP;\n                     DUG 2;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CDR;\n                     CDR;\n                     CDR;\n                     NOW;\n                     COMPARE;\n                     LT;\n                     NOT;\n                     IF\n                       { PUSH string "No Auction";\n                         FAILWITH }\n                       {  };\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CDR;\n                     CAR;\n                     IF_NONE\n                       { PUSH bool False }\n                       { PUSH bool True;\n                         SWAP;\n                         DROP };\n                     IF\n                       { DIG 1;\n                         DUP;\n                         DUG 2;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CAR;\n                         AMOUNT;\n                         COMPARE;\n                         GT }\n                       { DIG 1;\n                         DUP;\n                         DUG 2;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CAR;\n                         AMOUNT;\n                         COMPARE;\n                         GE };\n                     NOT;\n                     IF\n                       { PUSH string "Not Best Bid";\n                         FAILWITH }\n                       {  };\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CDR;\n                     CAR;\n                     IF_NONE\n                       {  }\n                       { DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CAR;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 6; DROP };\n                         DUG 6;\n                         DROP };\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     UNPAIR;\n                     SWAP;\n                     UNPAIR;\n                     DROP;\n                     SENDER;\n                     SOME;\n                     SWAP;\n                     UNPAIR;\n                     DROP;\n                     AMOUNT;\n                     SWAP;\n                     DROP;\n                     DIG 7;\n                     DUP;\n                     DUG 8;\n                     NOW;\n                     DIG 8;\n                     DUP;\n                     DUG 9;\n                     DIG 8;\n                     DUP;\n                     DUG 9;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CDR;\n                     CDR;\n                     CDR;\n                     SUB;\n                     COMPARE;\n                     LT;\n                     IF\n                       { DIG 7;\n                         DUP;\n                         DUG 8 }\n                       { PUSH int 0 };\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     CDR;\n                     CDR;\n                     CDR;\n                     ADD;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SOME;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     UPDATE;\n                     DIP { DIG 2; DROP };\n                     DUG 2;\n                     DROP 2;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR }\n                   { NOW;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CDR;\n                     CDR;\n                     CDR;\n                     COMPARE;\n                     LT;\n                     NOT;\n                     IF\n                       { PUSH string "Auction Is Still On";\n                         FAILWITH }\n                       {  };\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     CONTRACT %update_operators (list (or (pair address (pair address nat)) (pair address (pair address nat))));\n                     IF_NONE\n                       { PUSH string "BadContract";\n                         FAILWITH }\n                       {  };\n                     PUSH mutez 0;\n                     DIG 9;\n                     DUP;\n                     DUG 10;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     SELF;\n                     ADDRESS;\n                     PAIR;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CAR;\n                     PAIR;\n                     EXEC;\n                     TRANSFER_TOKENS;\n                     CONS;\n                     DIP { DIG 5; DROP };\n                     DUG 5;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     CDR;\n                     CAR;\n                     IF_NONE\n                       {  }\n                       { DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         CONTRACT %transfer (list (pair address (list (pair address (pair nat nat)))));\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         PUSH mutez 0;\n                         DIG 11;\n                         DUP;\n                         DUG 12;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         PAIR;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         PAIR;\n                         EXEC;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 6; DROP };\n                         DUG 6;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CAR;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 6; DROP };\n                         DUG 6;\n                         DROP };\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     NONE (pair address (pair (option address) (pair mutez timestamp)));\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     UPDATE;\n                     DIP { DIG 1; DROP };\n                     DUG 1;\n                     DROP;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR } } };\n         DIP { DROP 3 } };\n}\n')))))}l.isMDXComponent=!0},261:function(n,r,t){"use strict";t.d(r,"a",(function(){return m})),t.d(r,"f",(function(){return s})),t.d(r,"e",(function(){return o})),t.d(r,"b",(function(){return d})),t.d(r,"d",(function(){return c})),t.d(r,"c",(function(){return l}));var i=t(0),e=t.n(i),a=t(270),p=t(331);const[m,s,o,d,c,l]=Object(a.a)((function({appName:n}){const[{wallet:r,tezos:t,accountPkh:i},a]=e.a.useState((()=>({wallet:null,tezos:null,accountPkh:null}))),m=Boolean(t);e.a.useEffect((()=>p.a.onAvailabilityChange((r=>{a({wallet:r?new p.a(n):null,tezos:null,accountPkh:null})}))),[a,n]);const s=e.a.useCallback((async(n,t)=>{try{if(!r)throw new Error("Thanos Wallet not available");await r.connect(n,t);const i=r.toTezos(),e=await i.wallet.pkh();a({wallet:r,tezos:i,accountPkh:e})}catch(i){alert(`Failed to connect ThanosWallet: ${i.message}`)}}),[a,r]);return{wallet:r,tezos:t,accountPkh:i,ready:m,connect:s}}),(n=>n.wallet),(n=>n.tezos),(n=>n.accountPkh),(n=>n.ready),(n=>n.connect))},262:function(n,r,t){"use strict";t.d(r,"a",(function(){return a})),t.d(r,"b",(function(){return p}));var i=t(0),e=t(270);const[a,p]=Object(e.a)((function(){const[n,r]=Object(i.useState)({show:!1,severity:"info",msg:""});return{snackState:n,setInfoSnack:n=>{r({show:!0,severity:"info",msg:n})},setErrorSnack:n=>{r({show:!0,severity:"error",msg:n})},hideSnack:()=>{r((n=>({...n,show:!1})))}}}))},287:function(n,r,t){"use strict";var i=t(3),e=t(0),a=t.n(e),p=t(616),m=t(613),s=t(330),o=t(262);function d(n){return a.a.createElement(m.a,Object(i.a)({elevation:6,variant:"filled"},n))}r.a=()=>{const{snackState:n}=Object(o.b)();Object(s.a)();return a.a.createElement(p.a,{open:n.show},a.a.createElement(d,{severity:n.severity},n.msg))}},291:function(n,r,t){"use strict";var i=t(0),e=t.n(i),a=t(261);var p=t(598),m=t(604),s=t(330);r.a=n=>{const r=Object(s.a)(),t=Object(a.d)(),i=Object(a.f)(),o=Object(a.c)(),d=e.a.useCallback((n=>async()=>{try{await o(n?"mainnet":"edo2net")}catch(r){alert(r.message)}}),[o]);return t?e.a.createElement("div",null):i?e.a.createElement(p.a,{variant:"outlined",color:r.palette.text.primary,onClick:d(n.main)},"connect to wallet"):e.a.createElement(m.a,{href:"https://templewallet.com/",rel:"noopener",underline:"none"},e.a.createElement(p.a,{variant:"contained",disableElevation:!0,style:{backgroundColor:"#ed8936",color:"white",fontWeight:"bold"}},"install Temple"))}},321:function(n,r){},322:function(n,r){},326:function(n,r){},327:function(n,r){},328:function(n,r){},329:function(n,r){},371:function(n,r){var t,i;Fraction=function(n,r){if(void 0!==n&&r)"number"==typeof n&&"number"==typeof r?(this.numerator=n,this.denominator=r):"string"==typeof n&&"string"==typeof r&&(this.numerator=parseInt(n),this.denominator=parseInt(r));else if(void 0===r)if(num=n,"number"==typeof num)this.numerator=num,this.denominator=1;else if("string"==typeof num){var t,i,e=num.split(" ");if(e[0]&&(t=e[0]),e[1]&&(i=e[1]),t%1==0&&i&&i.match("/"))return new Fraction(t).add(new Fraction(i));if(!t||i)return;if("string"==typeof t&&t.match("/")){var a=t.split("/");this.numerator=a[0],this.denominator=a[1]}else{if("string"==typeof t&&t.match("."))return new Fraction(parseFloat(t));this.numerator=parseInt(t),this.denominator=1}}this.normalize()},Fraction.prototype.clone=function(){return new Fraction(this.numerator,this.denominator)},Fraction.prototype.toString=function(){if("NaN"===this.denominator)return"NaN";var n=this.numerator/this.denominator>0?Math.floor(this.numerator/this.denominator):Math.ceil(this.numerator/this.denominator),r=this.numerator%this.denominator,t=this.denominator,i=[];return 0!=n&&i.push(n),0!=r&&i.push((0===n?r:Math.abs(r))+"/"+t),i.length>0?i.join(" "):0},Fraction.prototype.rescale=function(n){return this.numerator*=n,this.denominator*=n,this},Fraction.prototype.add=function(n){var r=this.clone();return n=n instanceof Fraction?n.clone():new Fraction(n),td=r.denominator,r.rescale(n.denominator),n.rescale(td),r.numerator+=n.numerator,r.normalize()},Fraction.prototype.subtract=function(n){var r=this.clone();return n=n instanceof Fraction?n.clone():new Fraction(n),td=r.denominator,r.rescale(n.denominator),n.rescale(td),r.numerator-=n.numerator,r.normalize()},Fraction.prototype.multiply=function(n){var r=this.clone();if(n instanceof Fraction)r.numerator*=n.numerator,r.denominator*=n.denominator;else{if("number"!=typeof n)return r.multiply(new Fraction(n));r.numerator*=n}return r.normalize()},Fraction.prototype.divide=function(n){var r=this.clone();if(n instanceof Fraction)r.numerator*=n.denominator,r.denominator*=n.numerator;else{if("number"!=typeof n)return r.divide(new Fraction(n));r.denominator*=n}return r.normalize()},Fraction.prototype.equals=function(n){n instanceof Fraction||(n=new Fraction(n));var r=this.clone().normalize();n=n.clone().normalize();return r.numerator===n.numerator&&r.denominator===n.denominator},Fraction.prototype.normalize=(t=function(n){return"number"==typeof n&&(n>0&&n%1>0&&n%1<1||n<0&&n%-1<0&&n%-1>-1)},i=function(n,r){if(r){var t=Math.pow(10,r);return Math.round(n*t)/t}return Math.round(n)},function(){if(t(this.denominator)){var n=i(this.denominator,9),r=Math.pow(10,n.toString().split(".")[1].length);this.denominator=Math.round(this.denominator*r),this.numerator*=r}t(this.numerator)&&(n=i(this.numerator,9),r=Math.pow(10,n.toString().split(".")[1].length),this.numerator=Math.round(this.numerator*r),this.denominator*=r);var e=Fraction.gcf(this.numerator,this.denominator);return this.numerator/=e,this.denominator/=e,(this.numerator<0&&this.denominator<0||this.numerator>0&&this.denominator<0)&&(this.numerator*=-1,this.denominator*=-1),this}),Fraction.gcf=function(n,r){var t=[],i=Fraction.primeFactors(n),e=Fraction.primeFactors(r);return i.forEach((function(n){var r=e.indexOf(n);r>=0&&(t.push(n),e.splice(r,1))})),0===t.length?1:function(){var n,r=t[0];for(n=1;n<t.length;n++)r*=t[n];return r}()},Fraction.primeFactors=function(n){for(var r=Math.abs(n),t=[],i=2;i*i<=r;)r%i==0?(t.push(i),r/=i):i++;return 1!=r&&t.push(r),t},n.exports.Fraction=Fraction},373:function(n,r,t){"use strict";var i=t(0),e=t.n(i),a=t(395),p=t(397),m=t(611),s=t(398),o=t(598),d=t(558),c=t(596),l=t(261),D=t(287),P=t(262),I=t(291);const b=[{prim:"storage",args:[{prim:"pair",args:[{prim:"address",annots:["%owner"]},{prim:"pair",args:[{prim:"pair",args:[{prim:"int"},{prim:"nat"}],annots:["%rate"]},{prim:"pair",args:[{prim:"timestamp",annots:["%endofservice"]},{prim:"pair",args:[{prim:"timestamp",annots:["%startofservice"]},{prim:"pair",args:[{prim:"int",annots:["%time_unit"]},{prim:"pair",args:[{prim:"mutez",annots:["%tez_unit"]},{prim:"pair",args:[{prim:"option",args:[{prim:"address"}],annots:["%user"]},{prim:"int",annots:["%read_interval"]}]}]}]}]}]}]}]}]},{prim:"parameter",args:[{prim:"or",args:[{prim:"unit",annots:["%start"]},{prim:"or",args:[{prim:"unit",annots:["%interrupt"]},{prim:"or",args:[{prim:"unit",annots:["%collect"]},{prim:"pair",args:[{prim:"int",annots:["%dunit"]},{prim:"mutez",annots:["%tunit"]}],annots:["%setunits"]}]}]}]}]},{prim:"code",args:[[{prim:"LAMBDA",args:[{prim:"pair",args:[{prim:"pair",args:[{prim:"int"},{prim:"nat"}]},{prim:"pair",args:[{prim:"mutez"},{prim:"int"}]}]},{prim:"pair",args:[{prim:"int"},{prim:"nat"}]},[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"PUSH",args:[{prim:"unit"},{prim:"Unit"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"PUSH",args:[{prim:"mutez"},{int:"1"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"EDIV"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"DivByZero"}]},{prim:"FAILWITH"}],[{prim:"DUP"},{prim:"CAR"},{prim:"SWAP"},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"INT"},{prim:"PAIR"},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"PAIR"},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"}]]},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"SWAP"}]]},{prim:"MUL"},{prim:"DIP",args:[{int:"1"},[{prim:"MUL"}]]},{prim:"PAIR"},{prim:"PAIR"},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"}]]},{prim:"UNPAIR"},{prim:"DIG",args:[{int:"3"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"INT"}],[{prim:"NEG"}]]},{prim:"MUL"},{prim:"DIP",args:[{int:"1"},[{prim:"MUL"},{prim:"ABS"}]]},{prim:"PAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"2"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"2"}]},{prim:"DROP",args:[{int:"2"}]},{prim:"DUG",args:[{int:"3"}]},{prim:"DROP",args:[{int:"3"}]}]]},{prim:"LAMBDA",args:[{prim:"pair",args:[{prim:"timestamp"},{prim:"pair",args:[{prim:"pair",args:[{prim:"int"},{prim:"nat"}]},{prim:"pair",args:[{prim:"mutez"},{prim:"pair",args:[{prim:"int"},{prim:"lambda",args:[{prim:"pair",args:[{prim:"pair",args:[{prim:"int"},{prim:"nat"}]},{prim:"pair",args:[{prim:"mutez"},{prim:"int"}]}]},{prim:"pair",args:[{prim:"int"},{prim:"nat"}]}]}]}]}]}]},{prim:"mutez"},[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"PUSH",args:[{prim:"unit"},{prim:"Unit"}]},{prim:"NOW"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"SUB"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"PAIR"},{prim:"EXEC"},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"INT"},{prim:"PAIR"},{prim:"PAIR"},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"}]]},{prim:"UNPAIR"},{prim:"DIG",args:[{int:"3"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"INT"}],[{prim:"NEG"}]]},{prim:"MUL"},{prim:"DIP",args:[{int:"1"},[{prim:"MUL"},{prim:"ABS"}]]},{prim:"PAIR"},{prim:"PAIR"},{prim:"UNPAIR"},{prim:"UNPAIR"},{prim:"DIG",args:[{int:"2"}]},{prim:"MUL"},{prim:"EDIV"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"DivByZero"}]},{prim:"FAILWITH"}],[]]},{prim:"CAR"},{prim:"PUSH",args:[{prim:"mutez"},{int:"1"}]},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"PAIR"},{prim:"PAIR"},{prim:"UNPAIR"},{prim:"UNPAIR"},{prim:"ABS"},{prim:"DIG",args:[{int:"2"}]},{prim:"MUL"},{prim:"EDIV"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"DivByZero"}]},{prim:"FAILWITH"}],[]]},{prim:"CAR"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"5"}]}]]},{prim:"NIL",args:[{prim:"operation"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"}]]},{prim:"IF_LEFT",args:[[{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"NOW"},{prim:"COMPARE"},{prim:"GT"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r1"}]},{prim:"FAILWITH"}],[]]},{prim:"PUSH",args:[{prim:"mutez"},{int:"1"}]},{prim:"AMOUNT"},{prim:"EDIV"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"DivByZero"}]},{prim:"FAILWITH"}],[{prim:"DUP"},{prim:"CAR"},{prim:"SWAP"},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"PUSH",args:[{prim:"int"},{int:"1"}]},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"INT"},{prim:"PAIR"},{prim:"DIG",args:[{int:"13"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"14"}]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"11"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"12"}]},{prim:"PAIR"},{prim:"EXEC"},{prim:"PAIR"},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"}]]},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"SWAP"}]]},{prim:"MUL"},{prim:"DIP",args:[{int:"1"},[{prim:"MUL"}]]},{prim:"PAIR"},{prim:"PAIR"},{prim:"UNPAIR"},{prim:"UNPAIR"},{prim:"DIG",args:[{int:"2"}]},{prim:"MUL"},{prim:"EDIV"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"DivByZero"}]},{prim:"FAILWITH"}],[]]},{prim:"CAR"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"COMPARE"},{prim:"GT"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"NOW"},{prim:"ADD"},{prim:"ADD"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"7"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"7"}]},{prim:"NOW"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"6"}]},{prim:"SENDER"},{prim:"SOME"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"3"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"3"}]}],[]]},{prim:"DROP",args:[{int:"2"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"NOW"},{prim:"COMPARE"},{prim:"LT"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"NoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"SENDER"},{prim:"COMPARE"},{prim:"EQ"},{prim:"AND"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r2"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"8"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"9"}]},{prim:"SENDER"},{prim:"CONTRACT",args:[{prim:"unit"}]},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"BadContract"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"11"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"12"}]},{prim:"DIG",args:[{int:"13"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"14"}]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"10"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"11"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"9"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"10"}]},{prim:"PAIR"},{prim:"EXEC"},{prim:"UNIT"},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"8"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"8"}]},{prim:"DUP"},{prim:"NOW"},{prim:"SUB"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DUP"},{prim:"NOW"},{prim:"SUB"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"SENDER"},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCaller"}]},{prim:"FAILWITH"}],[]]},{prim:"PUSH",args:[{prim:"mutez"},{int:"0"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"NOW"},{prim:"COMPARE"},{prim:"LT"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"10"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"11"}]},{prim:"DIG",args:[{int:"12"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"13"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"9"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"10"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"8"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"9"}]},{prim:"PAIR"},{prim:"EXEC"},{prim:"SWAP"},{prim:"DROP",args:[{int:"1"}]}],[]]},{prim:"PUSH",args:[{prim:"mutez"},{int:"0"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"BALANCE"},{prim:"SUB"},{prim:"COMPARE"},{prim:"GT"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"9"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"10"}]},{prim:"DIG",args:[{int:"9"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"10"}]},{prim:"CONTRACT",args:[{prim:"unit"}]},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"BadContract"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"BALANCE"},{prim:"SUB"},{prim:"UNIT"},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"9"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"9"}]}],[]]},{prim:"DROP",args:[{int:"1"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DIG",args:[{int:"9"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"10"}]},{prim:"SENDER"},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCaller"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"2"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}]]}]]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"2"}]}]]}]]}],g=(n,r)=>({prim:"Pair",args:[{string:n},{prim:"Pair",args:[r,{prim:"Pair",args:[{int:"1618169559"},{prim:"Pair",args:[{int:"1618169559"},{prim:"Pair",args:[{int:"60"},{prim:"Pair",args:[{int:"1000000"},{prim:"Pair",args:[{prim:"None"},{int:"5"}]}]}]}]}]}]}]});var u=t(236),U=t(618);const A=n=>{const r=r=>{n.setMain(r.target.checked)};if(Object(l.d)()){const n=Object(l.b)();return e.a.createElement(p.a,{container:!0,direction:"column",justify:"center",alignItems:"center"},e.a.createElement(s.a,{variant:"subtitle2"},"Connected with:"),e.a.createElement(s.a,{variant:"subtitle2",style:{fontFamily:"Courier Prime, monospace"}},n))}return e.a.createElement(p.a,{container:!0},e.a.createElement(p.a,{item:!0,xs:8},e.a.createElement(I.a,{main:n.main})),e.a.createElement(p.a,{item:!0,xs:2},e.a.createElement(U.a,{checked:n.main,onChange:r,name:"checkedB",color:"primary"})),e.a.createElement(p.a,{item:!0,xs:2},e.a.createElement(s.a,{variant:"subtitle2",style:{marginTop:"8px"}},"Mainnet")))};const G=n=>e.a.createElement(p.a,{container:!0,direction:"column",justify:"center",alignItems:"center"},e.a.createElement(s.a,{variant:"subtitle2"},"Contract available at:"),e.a.createElement(s.a,{component:u.a,to:"https://better-call.dev/"+(n.main?"mainnet":"edo2net")+"/"+n.contract+"/operations",variant:"subtitle2",style:{fontFamily:"Courier Prime, monospace"}},n.contract)),N=()=>{const[n,r]=e.a.useState(""),[i,s]=e.a.useState(1.5),[d,c]=e.a.useState(""),[D,I]=e.a.useState(!1),{setInfoSnack:u,setErrorSnack:U,hideSnack:N}=Object(P.b)(),O=Object(l.e)(),R=Object(l.d)(),f=()=>{return n.length>0&(36!==(r=n).length|!r.startsWith("tz1"));var r},S=()=>!(i>0);return e.a.createElement(a.a,{style:{backgroundColor:"transparent",border:"1px solid #606770",marginTop:"20px",marginBottom:"20px"},raised:!1},e.a.createElement(p.a,{container:!0,style:{padding:22},spacing:3},e.a.createElement(p.a,{item:!0,xs:6},e.a.createElement(m.a,{onChange:n=>{r(n.target.value)},value:n,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"initalholder",label:"Owner",error:f(),helperText:f()?"Invalid address format":""})),e.a.createElement(p.a,{item:!0,xs:6,style:{textAlign:"center",marginTop:"10px"}},e.a.createElement(A,{main:D,setMain:I})),e.a.createElement(p.a,{item:!0,xs:6},e.a.createElement(m.a,{type:"number",onChange:n=>{s(n.target.value)},error:S(),helperText:S()?"Invalid Number":"",value:i,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"totalsupply",label:"Rate"})),e.a.createElement(p.a,{item:!0,xs:6,style:{textAlign:"center",marginTop:"10px"}},""!==d?e.a.createElement(G,{contract:d,main:D}):e.a.createElement(o.a,{variant:"contained",color:"primary",disableElevation:!0,disabled:!R|S()|f()|0==n.length,onClick:async()=>{try{const r=new(0,t(371).Fraction)(i),e={prim:"Pair",args:[{int:r.numerator.toString()},{int:r.denominator.toString()}]},a=await O.wallet.originate({code:b,init:g(n,e)}).send(),p=a.opHash.substring(0,10)+"...";u(`waiting for ${p} to be confirmed ...`);const m=await a.contract();N(),console.log(`Origination completed for ${m.address}.`),setTimeout((()=>c(m.address)),5e3)}catch(r){console.log(r),U(r.message),setTimeout(N,4e3)}}},"originate"))))};r.a=n=>{const r=e.a.useMemo((()=>Object(d.a)({palette:{type:"dark",primary:{light:"#1dc5ff",main:"#00ACE7",dark:"#0a90bf",contrastText:"#fff"}}})),[!0]);return e.a.createElement(l.a,{appName:"Completium IOT"},e.a.createElement(P.a,null,e.a.createElement(c.a,{theme:r},e.a.createElement(N,null),e.a.createElement(D.a,null))))}}}]);