(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{222:function(n,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return C})),t.d(r,"metadata",(function(){return T})),t.d(r,"toc",(function(){return W})),t.d(r,"default",(function(){return F}));var i=t(3),e=t(7),a=t(0),m=t.n(a),p=t(228),s=t(229),o=t(243),c=t(244),D=t(346),l=t.n(D),g=t(348),P=t(388),I=t(390),d=t(604),b=t(391),u=t(591),U=t(551),G=t(589),O=t(254),A=t(280),h=t(255),R=t(284),N=[{prim:"storage",args:[{prim:"pair",args:[{prim:"address",annots:["%chairman"]},{prim:"pair",args:[{prim:"nat",annots:["%maxvotes"]},{prim:"pair",args:[{prim:"nat",annots:["%_state"]},{prim:"pair",args:[{prim:"map",args:[{prim:"nat"},{prim:"pair",args:[{prim:"bytes",annots:["%title"]},{prim:"pair",args:[{prim:"bytes",annots:["%desc"]},{prim:"pair",args:[{prim:"nat",annots:["%nbvotes"]},{prim:"pair",args:[{prim:"timestamp",annots:["%creation"]},{prim:"address",annots:["%author"]}]}]}]}]}],annots:["%idea"]},{prim:"pair",args:[{prim:"map",args:[{prim:"address"},{prim:"nat"}],annots:["%voter"]},{prim:"set",args:[{prim:"nat"}],annots:["%selected"]}]}]}]}]}]}]},{prim:"parameter",args:[{prim:"or",args:[{prim:"address",annots:["%register"]},{prim:"or",args:[{prim:"pair",args:[{prim:"bytes",annots:["%ititle"]},{prim:"bytes",annots:["%description"]}],annots:["%add_idea"]},{prim:"or",args:[{prim:"pair",args:[{prim:"nat",annots:["%n"]},{prim:"nat",annots:["%weight"]}],annots:["%vote"]},{prim:"unit",annots:["%terminate"]}]}]}]}]},{prim:"code",args:[[{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"}]]},{prim:"IF_LEFT",args:[[{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"SENDER"},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCaller"}]},{prim:"FAILWITH"}],[]]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r0"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"KeyAlreadyExists"}]},{prim:"FAILWITH"}],[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"SOME"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"2"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"2"}]}]]},{prim:"DROP",args:[{int:"1"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"NIL",args:[{prim:"operation"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r1"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"SIZE"},{prim:"MEM"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"KeyAlreadyExists"}]},{prim:"FAILWITH"}],[{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"SENDER"},{prim:"NOW"},{prim:"PAIR"},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"PAIR"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"PAIR"},{prim:"SOME"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"SIZE"},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]}]]},{prim:"DROP",args:[{int:"2"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"NIL",args:[{prim:"operation"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SENDER"},{prim:"MEM"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r2"}]},{prim:"FAILWITH"}],[]]},{prim:"DUP"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"SENDER"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"COMPARE"},{prim:"GE"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r3"}]},{prim:"FAILWITH"}],[]]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCondition: r4"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SENDER"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"INT"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SUB"},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"INT"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SUB"},{prim:"ABS"}],[{prim:"PUSH",args:[{prim:"string"},{string:"AssignNat"}]},{prim:"FAILWITH"}]]},{prim:"SOME"},{prim:"SENDER"},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"CDR"},{prim:"CDR"},{prim:"CAR"},{prim:"ADD"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SOME"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"NIL",args:[{prim:"operation"}]},{prim:"PAIR"}],[{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"SENDER"},{prim:"COMPARE"},{prim:"EQ"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidCaller"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"DUP"},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"COMPARE"},{prim:"EQ"},{prim:"IF",args:[[{prim:"NIL",args:[{prim:"nat"}]},{prim:"NIL",args:[{prim:"nat"}]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"PAIR"},{prim:"NIL",args:[{prim:"nat"}]},{prim:"NIL",args:[{prim:"nat"}]},{prim:"NIL",args:[{prim:"nat"}]},{prim:"DIG",args:[{int:"8"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"9"}]},{prim:"ITER",args:[[{prim:"UNPAIR"},{prim:"DIG",args:[{int:"12"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"13"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"CDR"},{prim:"CDR"},{prim:"CAR"},{prim:"COMPARE"},{prim:"GT"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CONS"}],[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"2"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"2"}]},{prim:"DROP",args:[{int:"2"}]}]]},{prim:"ITER",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"ITER",args:[[{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"NIL",args:[{prim:"nat"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SOME"},{prim:"PAIR"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"ITER",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CAR"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"CDR"},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"IF_NONE",args:[[{prim:"DUP"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"CONS"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"PAIR"}],[{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"14"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"15"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"CDR"},{prim:"CDR"},{prim:"CAR"},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CDR"},{prim:"CDR"},{prim:"CAR"},{prim:"COMPARE"},{prim:"LT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"int"},{int:"1"}]}],[{prim:"PUSH",args:[{prim:"int"},{int:"0"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"COMPARE"},{prim:"GT"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"CONS"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"CONS"},{prim:"NONE",args:[{prim:"nat"}]},{prim:"PAIR"}],[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"CONS"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"PAIR"}]]},{prim:"SWAP"},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUP"},{prim:"CAR"},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CDR"},{prim:"NIL",args:[{prim:"nat"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"IF_NONE",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]}],[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"CONS"},{prim:"SWAP"},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"ITER",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"ITER",args:[[{prim:"PUSH",args:[{prim:"nat"},{int:"3"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"CAR"},{prim:"COMPARE"},{prim:"LT"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CDR"},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CONS"},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"CAR"},{prim:"ADD"},{prim:"PAIR"}],[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CDR"},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"CAR"},{prim:"ADD"},{prim:"PAIR"}]]},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"CDR"},{prim:"ITER",args:[[{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"1"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"ITER",args:[[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"KeyAlreadyExists"}]},{prim:"FAILWITH"}],[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"PUSH",args:[{prim:"bool"},{prim:"True"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"2"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"2"}]}]]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"PUSH",args:[{prim:"nat"},{int:"1"}]},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]}],[{prim:"PUSH",args:[{prim:"string"},{string:"InvalidState"}]},{prim:"FAILWITH"}]]},{prim:"DROP",args:[{int:"1"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"NIL",args:[{prim:"operation"}]},{prim:"PAIR"}]]}]]}]]}]]}],f=function(n,r){return{prim:"Pair",args:[{string:n},{prim:"Pair",args:[{int:r.toString()},{prim:"Pair",args:[{int:"0"},{prim:"Pair",args:[[],{prim:"Pair",args:[[],[]]}]}]}]}]}},E=t(611),v=function(n){if(Object(O.d)()){var r=Object(O.b)();return m.a.createElement(I.a,{container:!0,direction:"column",justify:"center",alignItems:"center"},m.a.createElement(b.a,{variant:"subtitle2"},"Connected with:"),m.a.createElement(b.a,{variant:"subtitle2",style:{fontFamily:"Courier Prime, monospace"}},r))}return m.a.createElement(I.a,{container:!0},m.a.createElement(I.a,{item:!0,xs:8},m.a.createElement(R.a,{main:n.main})),m.a.createElement(I.a,{item:!0,xs:2},m.a.createElement(E.a,{checked:n.main,onChange:function(r){n.setMain(r.target.checked)},name:"checkedB",color:"primary"})),m.a.createElement(I.a,{item:!0,xs:2},m.a.createElement(b.a,{variant:"subtitle2",style:{marginTop:"8px"}},"Mainnet")))};var S=function(n){return m.a.createElement(I.a,{container:!0,direction:"column",justify:"center",alignItems:"center"},m.a.createElement(b.a,{variant:"subtitle2"},"Contract available at:"),m.a.createElement(b.a,{component:s.a,to:"https://better-call.dev/"+(n.main?"mainnet":"edo2net")+"/"+n.contract+"/operations",variant:"subtitle2",style:{fontFamily:"Courier Prime, monospace"}},n.contract))},j=function(){var n=m.a.useState(""),r=n[0],t=n[1],i=m.a.useState(5),e=i[0],a=i[1],p=m.a.useState(""),s=p[0],o=p[1],c=m.a.useState(!1),D=c[0],b=c[1],U=Object(h.b)(),G=U.setInfoSnack,A=U.setErrorSnack,R=U.hideSnack,E=Object(O.e)(),j=Object(O.d)(),y=function(){return r.length>0&(36!==(n=r).length|!n.startsWith("tz1"));var n},C=function(){return!(Math.round(e)==e&e>0)},T=function(){var n=Object(g.a)(l.a.mark((function n(){var t,i,a;return l.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,E.wallet.originate({code:N,init:f(r,e)}).send();case 3:return t=n.sent,i=t.opHash.substring(0,10)+"...",G("waiting for "+i+" to be confirmed ..."),n.next=8,t.contract();case 8:a=n.sent,R(),console.log("Origination completed for "+a.address+"."),setTimeout((function(){return o(a.address)}),5e3),n.next=19;break;case 14:n.prev=14,n.t0=n.catch(0),console.log(n.t0),A(n.t0.message),setTimeout(R,4e3);case 19:case"end":return n.stop()}}),n,null,[[0,14]])})));return function(){return n.apply(this,arguments)}}();return m.a.createElement(P.a,{style:{backgroundColor:"transparent",border:"1px solid #606770",marginTop:"20px",marginBottom:"20px"},raised:!1},m.a.createElement(I.a,{container:!0,style:{padding:22},spacing:3},m.a.createElement(I.a,{item:!0,xs:6},m.a.createElement(d.a,{onChange:function(n){t(n.target.value)},value:r,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"chairmain",label:"Chairman",error:y(),helperText:y()?"Invalid address format":""})),m.a.createElement(I.a,{item:!0,xs:6,style:{textAlign:"center",marginTop:"10px"}},m.a.createElement(v,{main:D,setMain:b})),m.a.createElement(I.a,{item:!0,xs:6},m.a.createElement(d.a,{type:"number",onChange:function(n){a(n.target.value)},error:C(),helperText:C()?"Invalid Integer Number":"",value:e,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"maxvotes",label:"Max. nb. votes"})),m.a.createElement(I.a,{item:!0,xs:6,style:{textAlign:"center",marginTop:"10px"}},""!==s?m.a.createElement(S,{contract:s,main:D}):m.a.createElement(u.a,{variant:"contained",color:"primary",disableElevation:!0,disabled:!j|C()|y()|0==r.length,onClick:T},"originate"))))},y=function(n){var r=m.a.useMemo((function(){return Object(U.a)({palette:{type:"dark",primary:{light:"#1dc5ff",main:"#00ACE7",dark:"#0a90bf",contrastText:"#fff"}}})}),[!0]);return m.a.createElement(O.a,{appName:"Completium IOT"},m.a.createElement(h.a,null,m.a.createElement(G.a,{theme:r},m.a.createElement(j,null),m.a.createElement(A.a,null))))},C={id:"template8",title:"Idea box",sidebar_label:"Idea box",slug:"/templates/ideabox"},T={unversionedId:"templates/template8",id:"templates/template8",isDocsHomePage:!1,title:"Idea box",description:"Introduction",source:"@site/docs/templates/template8.md",slug:"/templates/ideabox",permalink:"/docs/templates/ideabox",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template8.md",version:"current",sidebar_label:"Idea box",sidebar:"templates",previous:{title:"Health care",permalink:"/docs/templates/healthcare"},next:{title:"Competition",permalink:"/docs/templates/competition"}},W=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Originate",id:"originate",children:[{value:"Command line",id:"command-line",children:[]}]},{value:"Code",id:"code",children:[]}],L={toc:W};function F(n){var r=n.components,t=Object(e.a)(n,["components"]);return Object(p.b)("wrapper",Object(i.a)({},L,t,{components:r,mdxType:"MDXLayout"}),Object(p.b)("h2",{id:"introduction"},"Introduction"),Object(p.b)("p",null,"This contract is a process to propose ideas and to select the best ones. You can see this contract in action in the ",Object(p.b)(s.a,{to:"/docs/dapp-ideabox/",mdxType:"Link"},"Idea Box")," DApp example."),Object(p.b)("h2",{id:"api"},"API"),Object(p.b)("h3",{id:"storage"},"Storage"),Object(p.b)("p",null,"Ideas data (title and description) are stored as ",Object(p.b)("inlineCode",{parentName:"p"},"bytes"),"."),Object(p.b)("table",null,Object(p.b)("thead",{parentName:"table"},Object(p.b)("tr",{parentName:"thead"},Object(p.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Name"),Object(p.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Type"),Object(p.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Description"))),Object(p.b)("tbody",{parentName:"table"},Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"chairman")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"address")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Address of the box's chairman")),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"maxvotes")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"nat")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Maximum number of votes per voter.")),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"idea")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"collection")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"An idea is defined by:",Object(p.b)("ul",null,Object(p.b)("li",null,"an identifier (key)"),Object(p.b)("li",null,"a title"),Object(p.b)("li",null,"a description"),Object(p.b)("li",null,"a number of votes"),Object(p.b)("li",null,"a creation date"),Object(p.b)("li",null,"the author's address")))),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"voter")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"collection")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"A voter is defined by:",Object(p.b)("ul",null,Object(p.b)("li",null,"an address (key)"),Object(p.b)("li",null,"a number of remaining votes")))),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"selected")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"collecter")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"This is the collection of selected ideas.")),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"_state")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"states")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Box state, one of ",Object(p.b)("inlineCode",{parentName:"td"},"Activated"),", ",Object(p.b)("inlineCode",{parentName:"td"},"Terminated"),".")))),Object(p.b)("h3",{id:"entrypoints"},"Entrypoints"),Object(p.b)("table",null,Object(p.b)("thead",{parentName:"table"},Object(p.b)("tr",{parentName:"thead"},Object(p.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Name"),Object(p.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Parameters"),Object(p.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Description"))),Object(p.b)("tbody",{parentName:"table"},Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"register")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"a")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Called by ",Object(p.b)("inlineCode",{parentName:"td"},"chairman")," to register a new voter at address ",Object(p.b)("inlineCode",{parentName:"td"},"a")," and remaining votes at ",Object(p.b)("inlineCode",{parentName:"td"},"maxvotes"),".")),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"add_idea")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"ititle"),", ",Object(p.b)("inlineCode",{parentName:"td"},"description")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Adds an idea in the box if box not terminated (",Object(p.b)("em",{parentName:"td"},"anyone")," can add an idea).")),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"vote")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"n"),", ",Object(p.b)("inlineCode",{parentName:"td"},"weight")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Called by a voter to increment by ",Object(p.b)("inlineCode",{parentName:"td"},"weight")," the number of votes of idea ",Object(p.b)("inlineCode",{parentName:"td"},"n"),". It fails if box is terminated.")),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"terminate")),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null})),Object(p.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Called by ",Object(p.b)("inlineCode",{parentName:"td"},"chairman")," to close the box and select the top 3 best ideas with numbers of votes above ",Object(p.b)("inlineCode",{parentName:"td"},"maxvotes"),".")))),Object(p.b)("h2",{id:"originate"},"Originate"),Object(p.b)("p",null,"Originate a switch contract with the widget below."),Object(p.b)("p",null,'Click "Connect to Wallet" button, fill the fields "Owner" and "Rate", and click "Originate".'),Object(p.b)(y,{mdxType:"DeployIdeaBox"}),Object(p.b)("h3",{id:"command-line"},"Command line"),Object(p.b)("p",null,"Originate the contract from ",Object(p.b)("a",{href:"https://archetype-lang.org/"},"Archetype")," code below with the following ",Object(p.b)(s.a,{to:"/docs/cli",mdxType:"Link"},"Completium CLI")," example command:"),Object(p.b)("pre",null,Object(p.b)("code",Object(i.a)({parentName:"pre"},{}),"completium-cli deploy ideabox.arl --init '(@tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG, 5)'\n")),Object(p.b)("p",null,"The command sets:"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"chairman")," variable to ",Object(p.b)("inlineCode",{parentName:"li"},"tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"maxvotes")," variable to 2.5")),Object(p.b)("h2",{id:"code"},"Code"),Object(p.b)(o.a,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"},{label:"Specification",value:"specification"}],mdxType:"Tabs"},Object(p.b)(c.a,{value:"archetype",mdxType:"TabItem"},Object(p.b)("pre",null,Object(p.b)("code",Object(i.a)({parentName:"pre"},{className:"language-archetype",metastring:'title="ideabox.arl"',title:'"ideabox.arl"'}),"archetype ideasbox(chairman : address, maxvotes : nat)\n\nstates =\n| Activated initial\n| Terminated\n\nasset idea {\n  id       : nat;\n  title    : bytes;\n  desc     : bytes;\n  nbvotes  : nat = 0;\n  creation : date;\n  author   : address;\n}\n\nasset voter {\n  addr      : address;\n  remaining : nat = maxvotes;\n}\n\nasset selected {\n  sid : nat;\n}\n\nentry register (a_voter : address) {\n  called by chairman\n  require {\n    r0 : state = Activated;\n  }\n  effect { voter.add({ addr = a_voter }) }\n}\n\nentry add_idea(ititle : bytes, description : bytes) {\n  require {\n    r1 : state = Activated;\n  }\n  effect {\n    idea.add({\n            id = idea.count();\n      title = ititle;\n            desc = description;\n            creation = now;\n            author = caller\n        })\n  }\n}\n\nentry vote(n : nat, weight : nat) {\n  require {\n    r2 : voter.contains(caller);\n    r3 : voter[caller].remaining >= weight;\n    r4 : state = Activated;\n  }\n  effect {\n    voter[caller].remaining -= weight;\n    idea[n].nbvotes += weight;\n  }\n}\n\ntransition terminate () {\n  called by chairman\n  from Activated\n  to Terminated\n  with effect {\n    for i in idea.select(the.nbvotes > maxvotes).sort(desc(nbvotes)).head(3) do\n        selected.add({i})\n    done\n  }\n}\n"))),Object(p.b)(c.a,{value:"michelson",mdxType:"TabItem"},Object(p.b)("pre",null,Object(p.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),'# (Pair chairman (Pair maxvotes (Pair 0 (Pair {  } (Pair {  } {  })))))\n{\n  storage (pair (address %chairman) (pair (nat %maxvotes) (pair (nat %_state) (pair (map %idea nat (pair (bytes %title) (pair (bytes %desc) (pair (nat %nbvotes) (pair (timestamp %creation) (address %author)))))) (pair (map %voter address nat) (set %selected nat))))));\n  parameter (or (address %register) (or (pair %add_idea (bytes %ititle) (bytes %description)) (or (pair %vote (nat %n) (nat %weight)) (unit %terminate))));\n  code { UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { DIG 6;\n             DUP;\n             DUG 7;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             PUSH nat 0;\n             DIG 5;\n             DUP;\n             DUG 6;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCondition: r0";\n                 FAILWITH }\n               {  };\n             DIG 2;\n             DUP;\n             DUG 3;\n             DIG 1;\n             DUP;\n             DUG 2;\n             MEM;\n             IF\n               { PUSH string "KeyAlreadyExists";\n                 FAILWITH }\n               { DIG 2;\n                 DUP;\n                 DUG 3;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 SOME;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 UPDATE;\n                 DIP { DIG 2; DROP };\n                 DUG 2 };\n             DROP;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             NIL operation;\n             PAIR }\n           { IF_LEFT\n               { UNPAIR;\n                 SWAP;\n                 PUSH nat 0;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCondition: r1";\n                     FAILWITH }\n                   {  };\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 SIZE;\n                 MEM;\n                 IF\n                   { PUSH string "KeyAlreadyExists";\n                     FAILWITH }\n                   { DIG 4;\n                     DUP;\n                     DUG 5;\n                     SENDER;\n                     NOW;\n                     PAIR;\n                     PUSH nat 0;\n                     PAIR;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     PAIR;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     PAIR;\n                     SOME;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     SIZE;\n                     UPDATE;\n                     DIP { DIG 4; DROP };\n                     DUG 4 };\n                 DROP 2;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 NIL operation;\n                 PAIR }\n               { IF_LEFT\n                   { UNPAIR;\n                     SWAP;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     SENDER;\n                     MEM;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCondition: r2";\n                         FAILWITH }\n                       {  };\n                     DUP;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     SENDER;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     COMPARE;\n                     GE;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCondition: r3";\n                         FAILWITH }\n                       {  };\n                     PUSH nat 0;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCondition: r4";\n                         FAILWITH }\n                       {  };\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     SENDER;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     PUSH int 0;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     INT;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     SUB;\n                     COMPARE;\n                     GE;\n                     IF\n                       { DIG 2;\n                         DUP;\n                         DUG 3;\n                         INT;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         SUB;\n                         ABS }\n                       { PUSH string "AssignNat";\n                         FAILWITH };\n                     SOME;\n                     SENDER;\n                     UPDATE;\n                     DIP { DIG 4; DROP };\n                     DUG 4;\n                     DROP;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  };\n                     UNPAIR;\n                     SWAP;\n                     UNPAIR;\n                     SWAP;\n                     UNPAIR;\n                     DROP;\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     CDR;\n                     CDR;\n                     CAR;\n                     ADD;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SOME;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     UPDATE;\n                     DIP { DIG 5; DROP };\n                     DUG 5;\n                     DROP 3;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     NIL operation;\n                     PAIR }\n                   { DROP;\n                     DIG 5;\n                     DUP;\n                     DUG 6;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCaller";\n                         FAILWITH }\n                       {  };\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     DUP;\n                     PUSH nat 0;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { NIL nat;\n                         NIL nat;\n                         PUSH nat 0;\n                         PAIR;\n                         NIL nat;\n                         NIL nat;\n                         NIL nat;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         ITER { UNPAIR;\n                                DIG 12;\n                                DUP;\n                                DUG 13;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                CDR;\n                                CDR;\n                                CAR;\n                                COMPARE;\n                                GT;\n                                IF\n                                  { DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CONS }\n                                  { DIG 2;\n                                    DUP;\n                                    DUG 3 };\n                                DIP { DIG 2; DROP };\n                                DUG 2;\n                                DROP 2 };\n                         ITER { DIG 1;\n                                DUP;\n                                DUG 2;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                CONS;\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         ITER { DIG 7;\n                                DUP;\n                                DUG 8;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                GET;\n                                IF_NONE\n                                  { PUSH string "GetNoneValue";\n                                    FAILWITH }\n                                  {  };\n                                NIL nat;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                SOME;\n                                PAIR;\n                                DIG 3;\n                                DUP;\n                                DUG 4;\n                                ITER { DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       CAR;\n                                       DIG 2;\n                                       DUP;\n                                       DUG 3;\n                                       CDR;\n                                       DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       IF_NONE\n                                         { DUP;\n                                           DIG 3;\n                                           DUP;\n                                           DUG 4;\n                                           CONS;\n                                           DIG 2;\n                                           DUP;\n                                           DUG 3;\n                                           PAIR }\n                                         { PUSH int 0;\n                                           DIG 14;\n                                           DUP;\n                                           DUG 15;\n                                           DIG 5;\n                                           DUP;\n                                           DUG 6;\n                                           GET;\n                                           IF_NONE\n                                             { PUSH string "GetNoneValue";\n                                               FAILWITH }\n                                             {  };\n                                           DIG 7;\n                                           DUP;\n                                           DUG 8;\n                                           CDR;\n                                           CDR;\n                                           CAR;\n                                           DIG 1;\n                                           DUP;\n                                           DUG 2;\n                                           CDR;\n                                           CDR;\n                                           CAR;\n                                           COMPARE;\n                                           LT;\n                                           IF\n                                             { PUSH int 1 }\n                                             { PUSH int 0 };\n                                           DIP { DROP };\n                                           COMPARE;\n                                           GT;\n                                           IF\n                                             { DIG 1;\n                                               DUP;\n                                               DUG 2;\n                                               DIG 7;\n                                               DUP;\n                                               DUG 8;\n                                               CONS;\n                                               DIG 4;\n                                               DUP;\n                                               DUG 5;\n                                               CONS;\n                                               NONE nat;\n                                               PAIR }\n                                             { DIG 1;\n                                               DUP;\n                                               DUG 2;\n                                               DIG 4;\n                                               DUP;\n                                               DUG 5;\n                                               CONS;\n                                               DIG 3;\n                                               DUP;\n                                               DUG 4;\n                                               PAIR };\n                                           SWAP;\n                                           DROP };\n                                       DIP { DROP };\n                                       DIP { DROP };\n                                       DIP { DIG 1; DROP };\n                                       DUG 1;\n                                       DROP };\n                                DUP;\n                                CAR;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                CDR;\n                                NIL nat;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                IF_NONE\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2 }\n                                  { DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    DIG 7;\n                                    DUP;\n                                    DUG 8;\n                                    CONS;\n                                    SWAP;\n                                    DROP };\n                                ITER { DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       CONS;\n                                       DIP { DIG 1; DROP };\n                                       DUG 1;\n                                       DROP };\n                                DIP { DROP };\n                                DIP { DROP };\n                                DIP { DROP };\n                                DIP { DROP };\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         ITER { PUSH nat 3;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                CAR;\n                                COMPARE;\n                                LT;\n                                IF\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CDR;\n                                    DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CONS;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR }\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CDR;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR };\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         CDR;\n                         ITER { DIG 1;\n                                DUP;\n                                DUG 2;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                CONS;\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         ITER { DIG 2;\n                                DUP;\n                                DUG 3;\n                                DIG 1;\n                                DUP;\n                                DUG 2;\n                                MEM;\n                                IF\n                                  { PUSH string "KeyAlreadyExists";\n                                    FAILWITH }\n                                  { DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    PUSH bool True;\n                                    DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    UPDATE;\n                                    DIP { DIG 2; DROP };\n                                    DUG 2 };\n                                DROP };\n                         PUSH nat 1;\n                         DIP { DIG 4; DROP };\n                         DUG 4 }\n                       { PUSH string "InvalidState";\n                         FAILWITH };\n                     DROP;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     NIL operation;\n                     PAIR } } } };\n}\n'))),Object(p.b)(c.a,{value:"specification",mdxType:"TabItem"},Object(p.b)("pre",null,Object(p.b)("code",Object(i.a)({parentName:"pre"},{className:"language-archetype"}),"specification entry vote (n : nat, weight : nat) {\n  postcondition p1 {\n    let some v = voter[caller] in\n    let some bv = before.voter[caller] in\n      v.remaining = bv.remaining - weight\n    otherwise true otherwise true\n  }\n}\n\nspecification {\n  i1 : 5 * voter.count() = idea.sum(nbvotes) + voter.sum(remaining)\n}\n")))))}F.isMDXComponent=!0},254:function(n,r,t){"use strict";t.d(r,"a",(function(){return p})),t.d(r,"f",(function(){return s})),t.d(r,"e",(function(){return o})),t.d(r,"b",(function(){return c})),t.d(r,"d",(function(){return D})),t.d(r,"c",(function(){return l}));var i=t(0),e=t.n(i),a=t(263),m=t(324);const[p,s,o,c,D,l]=Object(a.a)((function({appName:n}){const[{wallet:r,tezos:t,accountPkh:i},a]=e.a.useState((()=>({wallet:null,tezos:null,accountPkh:null}))),p=Boolean(t);e.a.useEffect((()=>m.a.onAvailabilityChange((r=>{a({wallet:r?new m.a(n):null,tezos:null,accountPkh:null})}))),[a,n]);const s=e.a.useCallback((async(n,t)=>{try{if(!r)throw new Error("Thanos Wallet not available");await r.connect(n,t);const i=r.toTezos(),e=await i.wallet.pkh();a({wallet:r,tezos:i,accountPkh:e})}catch(i){alert(`Failed to connect ThanosWallet: ${i.message}`)}}),[a,r]);return{wallet:r,tezos:t,accountPkh:i,ready:p,connect:s}}),(n=>n.wallet),(n=>n.tezos),(n=>n.accountPkh),(n=>n.ready),(n=>n.connect))},255:function(n,r,t){"use strict";t.d(r,"a",(function(){return a})),t.d(r,"b",(function(){return m}));var i=t(0),e=t(263);const[a,m]=Object(e.a)((function(){const[n,r]=Object(i.useState)({show:!1,severity:"info",msg:""});return{snackState:n,setInfoSnack:n=>{r({show:!0,severity:"info",msg:n})},setErrorSnack:n=>{r({show:!0,severity:"error",msg:n})},hideSnack:()=>{r((n=>({...n,show:!1})))}}}))},280:function(n,r,t){"use strict";var i=t(3),e=t(0),a=t.n(e),m=t(609),p=t(606),s=t(323),o=t(255);function c(n){return a.a.createElement(p.a,Object(i.a)({elevation:6,variant:"filled"},n))}r.a=()=>{const{snackState:n}=Object(o.b)();Object(s.a)();return a.a.createElement(m.a,{open:n.show},a.a.createElement(c,{severity:n.severity},n.msg))}},284:function(n,r,t){"use strict";var i=t(0),e=t.n(i),a=t(254);var m=t(591),p=t(597),s=t(323);r.a=n=>{const r=Object(s.a)(),t=Object(a.d)(),i=Object(a.f)(),o=Object(a.c)(),c=e.a.useCallback((n=>async()=>{try{await o(n?"mainnet":"edo2net")}catch(r){alert(r.message)}}),[o]);return t?e.a.createElement("div",null):i?e.a.createElement(m.a,{variant:"outlined",color:r.palette.text.primary,onClick:c(n.main)},"connect to wallet"):e.a.createElement(p.a,{href:"https://templewallet.com/",rel:"noopener",underline:"none"},e.a.createElement(m.a,{variant:"contained",disableElevation:!0,style:{backgroundColor:"#ed8936",color:"white",fontWeight:"bold"}},"install Temple"))}},314:function(n,r){},315:function(n,r){},319:function(n,r){},320:function(n,r){},321:function(n,r){},322:function(n,r){},346:function(n,r,t){n.exports=t(347)},347:function(n,r,t){var i=function(n){"use strict";var r,t=Object.prototype,i=t.hasOwnProperty,e="function"==typeof Symbol?Symbol:{},a=e.iterator||"@@iterator",m=e.asyncIterator||"@@asyncIterator",p=e.toStringTag||"@@toStringTag";function s(n,r,t){return Object.defineProperty(n,r,{value:t,enumerable:!0,configurable:!0,writable:!0}),n[r]}try{s({},"")}catch(y){s=function(n,r,t){return n[r]=t}}function o(n,r,t,i){var e=r&&r.prototype instanceof d?r:d,a=Object.create(e.prototype),m=new v(i||[]);return a._invoke=function(n,r,t){var i=D;return function(e,a){if(i===g)throw new Error("Generator is already running");if(i===P){if("throw"===e)throw a;return j()}for(t.method=e,t.arg=a;;){var m=t.delegate;if(m){var p=N(m,t);if(p){if(p===I)continue;return p}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if(i===D)throw i=P,t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);i=g;var s=c(n,r,t);if("normal"===s.type){if(i=t.done?P:l,s.arg===I)continue;return{value:s.arg,done:t.done}}"throw"===s.type&&(i=P,t.method="throw",t.arg=s.arg)}}}(n,t,m),a}function c(n,r,t){try{return{type:"normal",arg:n.call(r,t)}}catch(y){return{type:"throw",arg:y}}}n.wrap=o;var D="suspendedStart",l="suspendedYield",g="executing",P="completed",I={};function d(){}function b(){}function u(){}var U={};U[a]=function(){return this};var G=Object.getPrototypeOf,O=G&&G(G(S([])));O&&O!==t&&i.call(O,a)&&(U=O);var A=u.prototype=d.prototype=Object.create(U);function h(n){["next","throw","return"].forEach((function(r){s(n,r,(function(n){return this._invoke(r,n)}))}))}function R(n,r){function t(e,a,m,p){var s=c(n[e],n,a);if("throw"!==s.type){var o=s.arg,D=o.value;return D&&"object"==typeof D&&i.call(D,"__await")?r.resolve(D.__await).then((function(n){t("next",n,m,p)}),(function(n){t("throw",n,m,p)})):r.resolve(D).then((function(n){o.value=n,m(o)}),(function(n){return t("throw",n,m,p)}))}p(s.arg)}var e;this._invoke=function(n,i){function a(){return new r((function(r,e){t(n,i,r,e)}))}return e=e?e.then(a,a):a()}}function N(n,t){var i=n.iterator[t.method];if(i===r){if(t.delegate=null,"throw"===t.method){if(n.iterator.return&&(t.method="return",t.arg=r,N(n,t),"throw"===t.method))return I;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return I}var e=c(i,n.iterator,t.arg);if("throw"===e.type)return t.method="throw",t.arg=e.arg,t.delegate=null,I;var a=e.arg;return a?a.done?(t[n.resultName]=a.value,t.next=n.nextLoc,"return"!==t.method&&(t.method="next",t.arg=r),t.delegate=null,I):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,I)}function f(n){var r={tryLoc:n[0]};1 in n&&(r.catchLoc=n[1]),2 in n&&(r.finallyLoc=n[2],r.afterLoc=n[3]),this.tryEntries.push(r)}function E(n){var r=n.completion||{};r.type="normal",delete r.arg,n.completion=r}function v(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(f,this),this.reset(!0)}function S(n){if(n){var t=n[a];if(t)return t.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var e=-1,m=function t(){for(;++e<n.length;)if(i.call(n,e))return t.value=n[e],t.done=!1,t;return t.value=r,t.done=!0,t};return m.next=m}}return{next:j}}function j(){return{value:r,done:!0}}return b.prototype=A.constructor=u,u.constructor=b,b.displayName=s(u,p,"GeneratorFunction"),n.isGeneratorFunction=function(n){var r="function"==typeof n&&n.constructor;return!!r&&(r===b||"GeneratorFunction"===(r.displayName||r.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,u):(n.__proto__=u,s(n,p,"GeneratorFunction")),n.prototype=Object.create(A),n},n.awrap=function(n){return{__await:n}},h(R.prototype),R.prototype[m]=function(){return this},n.AsyncIterator=R,n.async=function(r,t,i,e,a){void 0===a&&(a=Promise);var m=new R(o(r,t,i,e),a);return n.isGeneratorFunction(t)?m:m.next().then((function(n){return n.done?n.value:m.next()}))},h(A),s(A,p,"Generator"),A[a]=function(){return this},A.toString=function(){return"[object Generator]"},n.keys=function(n){var r=[];for(var t in n)r.push(t);return r.reverse(),function t(){for(;r.length;){var i=r.pop();if(i in n)return t.value=i,t.done=!1,t}return t.done=!0,t}},n.values=S,v.prototype={constructor:v,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(E),!n)for(var t in this)"t"===t.charAt(0)&&i.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=r)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var t=this;function e(i,e){return p.type="throw",p.arg=n,t.next=i,e&&(t.method="next",t.arg=r),!!e}for(var a=this.tryEntries.length-1;a>=0;--a){var m=this.tryEntries[a],p=m.completion;if("root"===m.tryLoc)return e("end");if(m.tryLoc<=this.prev){var s=i.call(m,"catchLoc"),o=i.call(m,"finallyLoc");if(s&&o){if(this.prev<m.catchLoc)return e(m.catchLoc,!0);if(this.prev<m.finallyLoc)return e(m.finallyLoc)}else if(s){if(this.prev<m.catchLoc)return e(m.catchLoc,!0)}else{if(!o)throw new Error("try statement without catch or finally");if(this.prev<m.finallyLoc)return e(m.finallyLoc)}}}},abrupt:function(n,r){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.tryLoc<=this.prev&&i.call(e,"finallyLoc")&&this.prev<e.finallyLoc){var a=e;break}}a&&("break"===n||"continue"===n)&&a.tryLoc<=r&&r<=a.finallyLoc&&(a=null);var m=a?a.completion:{};return m.type=n,m.arg=r,a?(this.method="next",this.next=a.finallyLoc,I):this.complete(m)},complete:function(n,r){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&r&&(this.next=r),I},finish:function(n){for(var r=this.tryEntries.length-1;r>=0;--r){var t=this.tryEntries[r];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),E(t),I}},catch:function(n){for(var r=this.tryEntries.length-1;r>=0;--r){var t=this.tryEntries[r];if(t.tryLoc===n){var i=t.completion;if("throw"===i.type){var e=i.arg;E(t)}return e}}throw new Error("illegal catch attempt")},delegateYield:function(n,t,i){return this.delegate={iterator:S(n),resultName:t,nextLoc:i},"next"===this.method&&(this.arg=r),I}},n}(n.exports);try{regeneratorRuntime=i}catch(e){Function("r","regeneratorRuntime = r")(i)}},348:function(n,r,t){"use strict";function i(n,r,t,i,e,a,m){try{var p=n[a](m),s=p.value}catch(o){return void t(o)}p.done?r(s):Promise.resolve(s).then(i,e)}function e(n){return function(){var r=this,t=arguments;return new Promise((function(e,a){var m=n.apply(r,t);function p(n){i(m,e,a,p,s,"next",n)}function s(n){i(m,e,a,p,s,"throw",n)}p(void 0)}))}}t.d(r,"a",(function(){return e}))}}]);