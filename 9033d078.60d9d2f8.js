(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{162:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return d})),t.d(n,"default",(function(){return l}));var a=t(3),o=t(7),c=(t(0),t(236)),r=(t(238),t(239),t(240),{id:"dex7",title:"Interactions",sidebar_label:"Interactions",slug:"/dapp-dex/interactions"}),i={unversionedId:"dapp-dex/dex7",id:"dapp-dex/dex7",isDocsHomePage:!1,title:"Interactions",description:"Exchange",source:"@site/docs/dapp-dex/dex7.md",slug:"/dapp-dex/interactions",permalink:"/docs/dapp-dex/interactions",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/dapp-dex/dex7.md",version:"current",sidebar_label:"Interactions",sidebar:"dapps",previous:{title:"Contract Origination",permalink:"/docs/dapp-dex/origination"},next:{title:"Zero Coupon Bond",permalink:"/docs/dapp-zcb/"}},d=[{value:"Exchange",id:"exchange",children:[{value:"from city coin",id:"from-city-coin",children:[]},{value:"from XTZ",id:"from-xtz",children:[]}]},{value:"Provide liquidity",id:"provide-liquidity",children:[]},{value:"Redeem liquidity",id:"redeem-liquidity",children:[]}],s={toc:d};function l(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"exchange"},"Exchange"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"src/components/Dex.js")," line 230"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"if (lcoin === 'XTZ') {\n    ///////////////////////////////////////////////////////////////////////////\n    // FIX ME\n    // call 'approve' & tranfer entry points\n    ///////////////////////////////////////////////////////////////////////////\n  } else {\n    ///////////////////////////////////////////////////////////////////////////\n    // FIX ME\n    // call 'exchange' entry point\n    ///////////////////////////////////////////////////////////////////////////\n  }\n}\n")),Object(c.b)("h3",{id:"from-city-coin"},"from city coin"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const dex = await tezos.wallet.at(dexContract);\nconst op = await dex.methods.exchange(\n  dexState.left.coin,\n  dexState.left.amount * 1000000,\n  dexState.right.coin,\n  dexState.right.amount).send({ amount: dexState.left.amount });\nprops.openSnack();\nresetDexCoins();\nop.receipt().then(() => {\n  props.closeSnack();\n  loadDexTokens();\n  forceRetrieveTokenBalance(rcoin);\n  Tezos.tz\n  .getBalance(account)\n  .then((balance) => { setBalance(balance / 1000000) })\n  .catch((error) => console.log(JSON.stringify(error)));\n})\n")),Object(c.b)("h3",{id:"from-xtz"},"from XTZ"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const fa12 = await tezos.wallet.at(dexState.token[lcoin].addr);\nconst fa12params = fa12.methods.approve(dexContract,dexState.left.amount).toTransferParams();\nfa12params.kind = OpKind.TRANSACTION;\nconst dexparams = dex.methods.exchange(\n  dexState.left.coin,\n  dexState.left.amount,\n  dexState.right.coin,\n  dexState.right.amount).toTransferParams();\ndexparams.kind = OpKind.TRANSACTION;\nconst batch = await tezos.wallet.batch([fa12params, dexparams]);\nconst op = await batch.send();\nprops.openSnack();\nresetDexCoins();\nop.receipt().then(() => {\n  props.closeSnack();\n  loadDexTokens();\n  forceRetrieveTokenBalance(lcoin);\n  if (rcoin != 'XTZ') {\n    forceRetrieveTokenBalance(rcoin);\n  }\n  Tezos.tz\n  .getBalance(account)\n  .then((balance) => { setBalance(balance / 1000000) })\n  .catch((error) => console.log(JSON.stringify(error)));\n})\n")),Object(c.b)("h2",{id:"provide-liquidity"},"Provide liquidity"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"src/components/Provider.js")," line 191"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"async function handleProvide() {\n    const fa12 = await tezos.wallet.at(dexState.token[coin].addr);\n    const dex = await tezos.wallet.at(dexContract);\n    ///////////////////////////////////////////////////////////////////////////\n    // FIX ME\n    // call 'approve' & 'addLiquidity' entry points\n    ///////////////////////////////////////////////////////////////////////////\n};\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const fa12params = fa12.methods.approve(dexContract,dexState.provider.amount).toTransferParams();\nfa12params.kind = OpKind.TRANSACTION;\nconst dexparams = dex.methods.addLiquidity(coin,dexState.provider.amount).toTransferParams();\ndexparams.kind = OpKind.TRANSACTION;\ndexparams.amount = dexState.provider.xtzamount;\nconst batch = await tezos.wallet.batch([fa12params, dexparams]);\nconst op = await batch.send();\nprops.openSnack();\nresetProvider();\nop.receipt().then(() => {\n    props.closeSnack();\n    loadDexTokens();\n    loadLiquidity();\n    Tezos.tz\n    .getBalance(account)\n    .then((balance) => { setBalance(balance / 1000000) })\n    .catch((error) => console.log(JSON.stringify(error)));\n})\n")),Object(c.b)("h2",{id:"redeem-liquidity"},"Redeem liquidity"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"src/components/Redeemer.js")," line 165"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"async function handleRedeem() {\n    ///////////////////////////////////////////////////////////////////////////\n    // FIX ME\n    // call 'removeLiquidity' entry point\n    ///////////////////////////////////////////////////////////////////////////\n};\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const dex = await tezos.wallet.at(dexContract);\nconst op = await dex.methods.removeLiquidity(coin,dexState.redeemer.amount).send();\nprops.openSnack();\nresetRedeemer();\nop.receipt().then(() => {\n    props.closeSnack();\n    loadDexTokens();\n    loadLiquidity();\n    Tezos.tz\n    .getBalance(account)\n    .then((balance) => { setBalance(balance / 1000000) })\n    .catch((error) => console.log(JSON.stringify(error)));\n})\n")))}l.isMDXComponent=!0},238:function(e,n,t){"use strict";t(0),t(243)}}]);