(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{120:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return d})),t.d(n,"metadata",(function(){return b})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return m}));var a=t(3),r=t(7),o=(t(0),t(228)),i=t(229),l=t(243),c=t(244),d={id:"template3",title:"FA 2",sidebar_label:"FA 2",slug:"/templates/nft"},b={unversionedId:"templates/template3",id:"templates/template3",isDocsHomePage:!1,title:"FA 2",description:"Introduction",source:"@site/docs/templates/template3.md",slug:"/templates/nft",permalink:"/docs/templates/nft",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template3.md",version:"current",sidebar_label:"FA 2",sidebar:"templates",previous:{title:"ERC20",permalink:"/docs/templates/erc20"},next:{title:"Zero-Coupon bond",permalink:"/docs/templates/zcb"}},s=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Originate",id:"originate",children:[]},{value:"Code",id:"code",children:[]}],p={toc:s};function m(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"introduction"},"Introduction"),Object(o.b)("p",null,"This contract follows the Financial Asset 2 (FA 2) ",Object(o.b)("a",{href:"https://gitlab.com/tzip/tzip/-/blob/master/proposals/tzip-12/tzip-12.md"},"TZIP 12")," specification for non-fungible token on Tezos."),Object(o.b)("p",null,"You can observe the contract in action in the ",Object(o.b)(i.a,{to:"/docs/dapp-nonfungible/",mdxType:"Link"},"Collectible cards")," DApp example."),Object(o.b)("p",null,"A ",Object(o.b)(i.a,{to:"/docs/templates/auction",mdxType:"Link"},"contract template")," is available to transfer ownership of a FA 2 NFT based on an auction process."),Object(o.b)("h2",{id:"api"},"API"),Object(o.b)("p",null,"FA 2 introduces the concept of ",Object(o.b)("em",{parentName:"p"},"operator"),", which is an account that can transfer a token on behalf of the owner. The delegation is done by the owner with the ",Object(o.b)("inlineCode",{parentName:"p"},"update_operators")," entrypoint."),Object(o.b)("h3",{id:"storage"},"Storage"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"token")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"collection")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Token data, like price.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"ledger")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"collection")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Association between token id and its owner.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"operator")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"collection")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Delegation data: which operator can transfer which token owned by which owner?")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"token_metadata")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"collection")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Token metadata.")))),Object(o.b)("h3",{id:"entrypoints"},"Entrypoints"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Parameters"),Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"update_operators")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"upl")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"upl")," is a list of delegation data (named ",Object(o.b)("inlineCode",{parentName:"td"},"operator_param")," with token, owner and operator), either to add or remove an operator to a token and owner. It fails if the ",Object(o.b)("em",{parentName:"td"},"caller")," is not the declared owner in ",Object(o.b)("inlineCode",{parentName:"td"},"upl"),".")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"transfer")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"txs")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Transfers token ownerships specified in ",Object(o.b)("inlineCode",{parentName:"td"},"txs"),", a list of ",Object(o.b)("inlineCode",{parentName:"td"},"transfer_param")," (from, to, token). If ",Object(o.b)("em",{parentName:"td"},"caller")," is not the token owner, it must be declared in ",Object(o.b)("inlineCode",{parentName:"td"},"operator")," to be able to transfer, otherwise it fails.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"balance_of")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"requests")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Returns the list a token balance for each token id in ",Object(o.b)("inlineCode",{parentName:"td"},"requests"),".")))),Object(o.b)("h2",{id:"originate"},"Originate"),Object(o.b)("p",null,"Deploy the contract from ",Object(o.b)("a",{href:"https://archetype-lang.org/"},"Archetype")," code below with the following ",Object(o.b)(i.a,{to:"/docs/cli",mdxType:"Link"},"Completium CLI")," example command:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"completium-cli deploy nft.arl\n")),Object(o.b)("h2",{id:"code"},"Code"),Object(o.b)(l.a,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"}],mdxType:"Tabs"},Object(o.b)(c.a,{value:"archetype",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-archetype",metastring:'title="nft.arl"',title:'"nft.arl"'}),'archetype nft\n\nasset ledger identified by ltoken to big_map {\n  ltoken     : nat;\n  lowner     : address;\n}\n\nasset operator identified by oaddr otoken oowner {\n  oaddr       : address;\n  otoken      : nat;\n  oowner      : address;\n}\n\nasset token_metadata to big_map {\n  key_token_id   : nat;\n  token_id       : nat;\n  symbol         : string;\n  name           : string;\n  decimals       : nat;\n  extras         : map<string, string>;\n}\n\nrecord operator_param {\n  opp_owner    : address;\n  opp_operator : address;\n  opp_token_id : nat\n} as ((owner, (operator, token_id)))\n\nentry update_operators (upl : list<or<operator_param, operator_param>>) {\n  for up in upl do\n    match up with\n    | left(param)  -> (* add *)\n      dorequire(ledger[param.opp_token_id].lowner = source, "CALLER NOT OWNER");\n      operator.add({param.opp_operator; param.opp_token_id; param.opp_owner})\n    | right(param) -> (* remove *)\n      dorequire(ledger[param.opp_token_id].lowner = source, "CALLER NOT OWNER");\n      operator.remove((param.opp_operator, param.opp_token_id, param.opp_owner))\n    end;\n  done;\n}\n\nrecord transfer_destination {\n  to_dest           : address;\n  token_id_dest     : nat;\n  token_amount_dest : nat\n} as ((to_, (token_id, amount)))\n\nentry %transfer (txs : list<address * list<transfer_destination>>) {\n  for tx in txs do\n    var %from = tx[0];\n    var tds = tx[1];\n    for td in tds do begin\n      if caller <> %from then begin\n        (* check operator *)\n        dorequire(operator.contains((caller,td.token_id_dest,%from)),"FA2_NOT_OPERATOR");\n      end;\n      (* set token ownership *)\n      ledger.addupdate(td.token_id_dest,{ lowner = td.to_dest });\n    end done;\n  done\n}\n\nrecord balance_of_request {\n  bo_owner : address;\n  btoken_id : nat;\n} as ((owner, token_id))\n\nrecord balance_of_response {\n  request : balance_of_request;\n  balance_ : nat;\n} as ((request, balance))\n\ngetter balance_of (requests : list<balance_of_request>) : list<balance_of_response> {\n  return map(requests, br -> {\n    request = br;\n    balance_ = (if ledger[br.btoken_id].lowner = br.bo_owner\n                then 1\n                else 0)\n  })\n}\n\nentry token_metadata_registry (c : contract<address>) {\n  transfer 0tz to entry c(selfaddress);\n}\n'))),Object(o.b)(c.a,{value:"michelson",mdxType:"TabItem"},Object(o.b)("p",null,"The ",Object(o.b)(i.a,{to:"/docs/contract/programming-language#micheslon",mdxType:"Link"},"Michelson")," code is generated with version 1.2.3 of Archetype."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'# (Pair {  } (Pair {  } {  }))\n{\n  storage (pair (big_map %ledger nat address) (pair (set %operator (pair address (pair nat address))) (big_map %token_metadata nat (pair (nat %token_id) (pair (string %symbol) (pair (string %name) (pair (nat %decimals) (map %extras string string))))))));\n  parameter (or (pair %balance_of (list %requests (pair (address %owner) (nat %token_id))) (contract (list (pair (pair (address %owner) (nat %token_id)) (nat %balance))))) (or (list %update_operators (or (pair (address %owner) (pair (address %operator) (nat %token_id))) (pair (address %owner) (pair (address %operator) (nat %token_id))))) (or (list %transfer (pair address (list (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) (contract %token_metadata_registry address))));\n  code { NIL operation;\n         DIG 1;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { UNPAIR;\n             DIG 5;\n             DUP;\n             DUG 6;\n             DIG 2;\n             DUP;\n             DUG 3;\n             AMOUNT;\n             DIG 3;\n             DUP;\n             DUG 4;\n             MAP { DUP;\n                   CAR;\n                   DIG 9;\n                   DUP;\n                   DUG 10;\n                   DIG 2;\n                   DUP;\n                   DUG 3;\n                   CDR;\n                   GET;\n                   IF_NONE\n                     { PUSH string "GetNoneValue";\n                       FAILWITH }\n                     {  };\n                   COMPARE;\n                   EQ;\n                   IF\n                     { PUSH nat 1 }\n                     { PUSH nat 0 };\n                   DIG 1;\n                   DUP;\n                   DUG 2;\n                   PAIR;\n                   SWAP;\n                   DROP };\n             TRANSFER_TOKENS;\n             CONS;\n             DIP { DIG 5; DROP };\n             DUG 5;\n             DROP 2;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { DUP;\n                 ITER { DUP;\n                        IF_LEFT\n                          { SOURCE;\n                            DIG 6;\n                            DUP;\n                            DUG 7;\n                            DIG 2;\n                            DUP;\n                            DUG 3;\n                            CDR;\n                            CDR;\n                            GET;\n                            IF_NONE\n                              { PUSH string "GetNoneValue";\n                                FAILWITH }\n                              {  };\n                            COMPARE;\n                            EQ;\n                            NOT;\n                            IF\n                              { PUSH string "CALLER NOT OWNER";\n                                FAILWITH }\n                              {  };\n                            DIG 4;\n                            DUP;\n                            DUG 5;\n                            DIG 1;\n                            DUP;\n                            DUG 2;\n                            CAR;\n                            DIG 2;\n                            DUP;\n                            DUG 3;\n                            CDR;\n                            CDR;\n                            PAIR;\n                            DIG 2;\n                            DUP;\n                            DUG 3;\n                            CDR;\n                            CAR;\n                            PAIR;\n                            MEM;\n                            IF\n                              { PUSH string "KeyAlreadyExists";\n                                FAILWITH }\n                              { DIG 4;\n                                DUP;\n                                DUG 5;\n                                PUSH bool True;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                CAR;\n                                DIG 3;\n                                DUP;\n                                DUG 4;\n                                CDR;\n                                CDR;\n                                PAIR;\n                                DIG 3;\n                                DUP;\n                                DUG 4;\n                                CDR;\n                                CAR;\n                                PAIR;\n                                UPDATE;\n                                DIP { DIG 4; DROP };\n                                DUG 4 };\n                            DROP }\n                          { SOURCE;\n                            DIG 6;\n                            DUP;\n                            DUG 7;\n                            DIG 2;\n                            DUP;\n                            DUG 3;\n                            CDR;\n                            CDR;\n                            GET;\n                            IF_NONE\n                              { PUSH string "GetNoneValue";\n                                FAILWITH }\n                              {  };\n                            COMPARE;\n                            EQ;\n                            NOT;\n                            IF\n                              { PUSH string "CALLER NOT OWNER";\n                                FAILWITH }\n                              {  };\n                            DIG 4;\n                            DUP;\n                            DUG 5;\n                            PUSH bool False;\n                            DIG 2;\n                            DUP;\n                            DUG 3;\n                            CAR;\n                            DIG 3;\n                            DUP;\n                            DUG 4;\n                            CDR;\n                            CDR;\n                            PAIR;\n                            DIG 3;\n                            DUP;\n                            DUG 4;\n                            CDR;\n                            CAR;\n                            PAIR;\n                            UPDATE;\n                            DIP { DIG 4; DROP };\n                            DUG 4;\n                            DROP };\n                        DROP };\n                 DROP;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { IF_LEFT\n                   { DUP;\n                     ITER { DUP;\n                            CAR;\n                            DIG 1;\n                            DUP;\n                            DUG 2;\n                            CDR;\n                            DUP;\n                            ITER { DIG 2;\n                                   DUP;\n                                   DUG 3;\n                                   SENDER;\n                                   COMPARE;\n                                   NEQ;\n                                   IF\n                                     { DIG 6;\n                                       DUP;\n                                       DUG 7;\n                                       DIG 3;\n                                       DUP;\n                                       DUG 4;\n                                       DIG 2;\n                                       DUP;\n                                       DUG 3;\n                                       CDR;\n                                       CAR;\n                                       PAIR;\n                                       SENDER;\n                                       PAIR;\n                                       MEM;\n                                       NOT;\n                                       IF\n                                         { PUSH string "FA2_NOT_OPERATOR";\n                                           FAILWITH }\n                                         {  } }\n                                     {  };\n                                   DIG 7;\n                                   DUP;\n                                   DUG 8;\n                                   DIG 1;\n                                   DUP;\n                                   DUG 2;\n                                   CAR;\n                                   SOME;\n                                   DIG 2;\n                                   DUP;\n                                   DUG 3;\n                                   CDR;\n                                   CAR;\n                                   UPDATE;\n                                   DIP { DIG 7; DROP };\n                                   DUG 7;\n                                   DROP };\n                            DROP 3 };\n                     DROP;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR }\n                   { DIG 4;\n                     DUP;\n                     DUG 5;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     PUSH mutez 0;\n                     SELF;\n                     ADDRESS;\n                     TRANSFER_TOKENS;\n                     CONS;\n                     DIP { DIG 4; DROP };\n                     DUG 4;\n                     DROP;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR } } } };\n}\n')))))}m.isMDXComponent=!0},235:function(e,n,t){"use strict";function a(e){var n,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(r&&(r+=" "),r+=t);else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}n.a=function(){for(var e,n,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(r&&(r+=" "),r+=n);return r}},241:function(e,n,t){"use strict";var a=t(0),r=t(242);n.a=function(){const e=Object(a.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},242:function(e,n,t){"use strict";var a=t(0);const r=Object(a.createContext)(void 0);n.a=r},243:function(e,n,t){"use strict";var a=t(0),r=t.n(a),o=t(241),i=t(235),l=t(56),c=t.n(l);const d=37,b=39;n.a=function(e){const{lazy:n,block:t,defaultValue:l,values:s,groupId:p,className:m}=e,{tabGroupChoices:O,setTabGroupChoices:u}=Object(o.a)(),[D,j]=Object(a.useState)(l),P=a.Children.toArray(e.children);if(null!=p){const e=O[p];null!=e&&e!==D&&s.some((n=>n.value===e))&&j(e)}const I=e=>{j(e),null!=p&&u(p,e)},N=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":t},m)},s.map((({value:e,label:n})=>r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":D===e,className:Object(i.a)("tabs__item",c.a.tabItem,{"tabs__item--active":D===e}),key:e,ref:e=>N.push(e),onKeyDown:e=>{((e,n,t)=>{switch(t.keyCode){case b:((e,n)=>{const t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()})(e,n);break;case d:((e,n)=>{const t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()})(e,n)}})(N,e.target,e)},onFocus:()=>I(e),onClick:()=>{I(e)}},n)))),n?Object(a.cloneElement)(P.filter((e=>e.props.value===D))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},P.map(((e,n)=>Object(a.cloneElement)(e,{key:n,hidden:e.props.value!==D})))))}},244:function(e,n,t){"use strict";var a=t(3),r=t(0),o=t.n(r);n.a=function({children:e,hidden:n,className:t}){return o.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:n,className:t}),e)}}}]);