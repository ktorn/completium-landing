(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{235:function(n,e,t){"use strict";function a(n){var e,t,r="";if("string"==typeof n||"number"==typeof n)r+=n;else if("object"==typeof n)if(Array.isArray(n))for(e=0;e<n.length;e++)n[e]&&(t=a(n[e]))&&(r&&(r+=" "),r+=t);else for(e in n)n[e]&&(r&&(r+=" "),r+=e);return r}e.a=function(){for(var n,e,t=0,r="";t<arguments.length;)(n=arguments[t++])&&(e=a(n))&&(r&&(r+=" "),r+=e);return r}},241:function(n,e,t){"use strict";var a=t(0),r=t(242);e.a=function(){const n=Object(a.useContext)(r.a);if(null==n)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return n}},242:function(n,e,t){"use strict";var a=t(0);const r=Object(a.createContext)(void 0);e.a=r},243:function(n,e,t){"use strict";var a=t(0),r=t.n(a),l=t(241),i=t(235),b=t(56),c=t.n(b);const o=37,d=39;e.a=function(n){const{lazy:e,block:t,defaultValue:b,values:s,groupId:P,className:I}=n,{tabGroupChoices:O,setTabGroupChoices:u}=Object(l.a)(),[p,D]=Object(a.useState)(b),N=a.Children.toArray(n.children);if(null!=P){const n=O[P];null!=n&&n!==p&&s.some((e=>e.value===n))&&D(n)}const A=n=>{D(n),null!=P&&u(P,n)},m=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":t},I)},s.map((({value:n,label:e})=>r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":p===n,className:Object(i.a)("tabs__item",c.a.tabItem,{"tabs__item--active":p===n}),key:n,ref:n=>m.push(n),onKeyDown:n=>{((n,e,t)=>{switch(t.keyCode){case d:((n,e)=>{const t=n.indexOf(e)+1;n[t]?n[t].focus():n[0].focus()})(n,e);break;case o:((n,e)=>{const t=n.indexOf(e)-1;n[t]?n[t].focus():n[n.length-1].focus()})(n,e)}})(m,n.target,n)},onFocus:()=>A(n),onClick:()=>{A(n)}},e)))),e?Object(a.cloneElement)(N.filter((n=>n.props.value===p))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},N.map(((n,e)=>Object(a.cloneElement)(n,{key:e,hidden:n.props.value!==p})))))}},244:function(n,e,t){"use strict";var a=t(3),r=t(0),l=t.n(r);e.a=function({children:n,hidden:e,className:t}){return l.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:e,className:t}),n)}},91:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return c})),t.d(e,"metadata",(function(){return o})),t.d(e,"toc",(function(){return d})),t.d(e,"default",(function(){return P}));var a=t(3),r=t(7),l=(t(0),t(228)),i=(t(229),t(243)),b=t(244),c={id:"template11",title:"Escrow",sidebar_label:"Escrow",slug:"/templates/escrow"},o={unversionedId:"templates/template11",id:"templates/template11",isDocsHomePage:!1,title:"Escrow",description:"Introduction",source:"@site/docs/templates/template11.md",slug:"/templates/escrow",permalink:"/docs/templates/escrow",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template11.md",version:"current",sidebar_label:"Escrow",sidebar:"templates",previous:{title:"Autocallable note",permalink:"/docs/templates/acn"},next:{title:"Miles",permalink:"/docs/templates/miles"}},d=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Code",id:"code",children:[]}],s={toc:d};function P(n){var e=n.components,t=Object(r.a)(n,["components"]);return Object(l.b)("wrapper",Object(a.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"introduction"},"Introduction"),Object(l.b)("p",null,"The escrow smart contract establishes a decentralized purchase process between the seller and buyer. The principle is that the price amount is escrowed in the smart contract and released when the purchased item is received by buyer."),Object(l.b)("p",null,"The critical point of the process is that it requires actions from the buyer and the seller to complete the process:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"if the seller does not send the item, buyer's fund are locked in the escrow"),Object(l.b)("li",{parentName:"ul"},"if the buyer does not complete the process, even if the item is received, then the seller does not reveive payment")),Object(l.b)("p",null,"In order to motivate both the seller and the buyer to execute the process, the basic idea is that they fund the escrow with ",Object(l.b)("em",{parentName:"p"},"security deposits")," that are transferred back only if the process is complete. In the escrow presented here, security deposits are a proportion of the price of the item."),Object(l.b)("h2",{id:"api"},"API"),Object(l.b)("h3",{id:"storage"},"Storage"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"seller")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"address")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Seller's address.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"buyer")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"address")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Buyer's address.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"taxcollecter")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"address")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Tax collector's address.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"price")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"tez")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Amount of transaction.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"taxrate")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"rational")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Tax rate applied to ",Object(l.b)("inlineCode",{parentName:"td"},"price"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"securityrate")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"rational")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Security rate applied to ",Object(l.b)("inlineCode",{parentName:"td"},"price")," for security deposit.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"_state")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"states")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Escrow state, one of ",Object(l.b)("inlineCode",{parentName:"td"},"Create"),", ",Object(l.b)("inlineCode",{parentName:"td"},"Aborted"),", ",Object(l.b)("inlineCode",{parentName:"td"},"Funded"),", ",Object(l.b)("inlineCode",{parentName:"td"},"Completed"))))),Object(l.b)("h3",{id:"entrypoints"},"Entrypoints"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Parameters"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"abort")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"buyer")," and ",Object(l.b)("inlineCode",{parentName:"td"},"seller")," can abort escrow in ",Object(l.b)("inlineCode",{parentName:"td"},"Created")," state.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"toFunded")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Internally called by escrow to go to ",Object(l.b)("inlineCode",{parentName:"td"},"Funded")," state.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"fund")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called by ",Object(l.b)("inlineCode",{parentName:"td"},"buyer")," and ",Object(l.b)("inlineCode",{parentName:"td"},"seller")," to provide funds:",Object(l.b)("ul",null,Object(l.b)("li",null,Object(l.b)("inlineCode",{parentName:"td"},"buyer")," must transfer price, security deposit and taxes "),Object(l.b)("li",null,Object(l.b)("inlineCode",{parentName:"td"},"seller")," must transfer security deposit.")))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"complete")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called by ",Object(l.b)("inlineCode",{parentName:"td"},"buyer")," when purchased item is received. This transfers:",Object(l.b)("ul",null,Object(l.b)("li",null,"item price and security deposit to ",Object(l.b)("inlineCode",{parentName:"td"},"seller")),Object(l.b)("li",null,"security deposit to ",Object(l.b)("inlineCode",{parentName:"td"},"buyer")),Object(l.b)("li",null,"tax to ",Object(l.b)("inlineCode",{parentName:"td"},"taxcollector"))))))),Object(l.b)("h2",{id:"code"},"Code"),Object(l.b)(i.a,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"}],mdxType:"Tabs"},Object(l.b)(b.a,{value:"archetype",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-archetype",metastring:'title="escrow.arl"',title:'"escrow.arl"'}),'archetype escrow(\nseller       : role,\nbuyer        : role,\ntaxcollector : role,\nprice        : tez,\ntaxrate      : rational,\nsecurityrate : rational,\n)\n\nvariable buyer_funded  : bool = false\nvariable seller_funded : bool = false\n\n(* states *)\nstates =\n | Created initial\n | Aborted\n | Funded\n | Completed\n\ntransition abort () {\n  called by buyer or seller\n  from Created to Aborted\n}\n\ntransition toFunded () {\n  called by selfaddress\n  from Created to Funded\n}\n\nentry fund () {\n  called by buyer or seller\n  effect {\n    if caller = buyer then begin\n      dorequire(transferred >= (1 + taxrate + securityrate) * price, "NOT_ENOUGH_FUND");\n      buyer_funded := true\n    end else if caller = seller then begin\n      dorequire(transferred >= securityrate * price, "NOT_ENOUGH_FUND");\n      seller_funded := true\n    end;\n    if buyer_funded and seller_funded then\n      transfer 0tz to entry self.toFunded()\n  }\n}\n\ntransition complete () {\n  called by buyer\n  from Funded to Completed\n  with effect {\n    transfer ((1 + securityrate) * price) to seller;\n    transfer (securityrate * price)       to buyer;\n    if taxrate > 0 then\n      transfer (taxrate * price)          to taxcollector;\n  }\n}\n'))),Object(l.b)(b.a,{value:"michelson",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'# (Pair seller (Pair buyer (Pair taxcollector (Pair price (Pair taxrate (Pair securityrate (Pair False (Pair False 0))))))))\n{\n  storage (pair (address %seller) (pair (address %buyer) (pair (address %taxcollector) (pair (mutez %price) (pair (pair %taxrate int nat) (pair (pair %securityrate int nat) (pair (bool %buyer_funded) (pair (bool %seller_funded) (nat %_state)))))))));\n  parameter (or (unit %abort) (or (unit %toFunded) (or (unit %fund) (unit %complete))));\n  code { LAMBDA\n           (pair (pair (pair int nat) (pair int nat)) (or unit (or (or unit unit) (or unit unit))))\n           bool\n           { UNPAIR;\n             UNPAIR;\n             DIP { UNPAIR };\n             UNPAIR;\n             DUG 3;\n             MUL;\n             DIP { MUL };\n             SWAP;\n             COMPARE;\n             SWAP;\n             IF_LEFT\n               { DROP;\n                 EQ }\n               { IF_LEFT\n                   { IF_LEFT\n                       { DROP;\n                         LT }\n                       { DROP;\n                         LE } }\n                   { IF_LEFT\n                       { DROP;\n                         GT }\n                       { DROP;\n                         GE } } } };\n         NIL operation;\n         DIG 2;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { DROP;\n             DIG 8;\n             DUP;\n             DUG 9;\n             SENDER;\n             COMPARE;\n             EQ;\n             DIG 8;\n             DUP;\n             DUG 9;\n             SENDER;\n             COMPARE;\n             EQ;\n             OR;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             DUP;\n             DUP;\n             PUSH nat 0;\n             COMPARE;\n             EQ;\n             IF\n               { PUSH nat 1;\n                 DIP { DIG 1; DROP };\n                 DUG 1 }\n               { PUSH string "InvalidState";\n                 FAILWITH };\n             DROP;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { DROP;\n                 SELF;\n                 ADDRESS;\n                 SENDER;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCaller";\n                     FAILWITH }\n                   {  };\n                 DUP;\n                 DUP;\n                 PUSH nat 0;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { PUSH nat 2;\n                     DIP { DIG 1; DROP };\n                     DUG 1 }\n                   { PUSH string "InvalidState";\n                     FAILWITH };\n                 DROP;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { IF_LEFT\n                   { DROP;\n                     DIG 8;\n                     DUP;\n                     DUG 9;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     DIG 8;\n                     DUP;\n                     DUG 9;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     OR;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCaller";\n                         FAILWITH }\n                       {  };\n                     DIG 7;\n                     DUP;\n                     DUG 8;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { DIG 5;\n                         DUP;\n                         DUG 6;\n                         UNIT;\n                         LEFT unit;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         UNIT;\n                         LEFT unit;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         PUSH nat 1;\n                         PUSH nat 1;\n                         INT;\n                         PAIR;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         DIP { UNPAIR; SWAP; DUP };\n                         UNPAIR;\n                         SWAP;\n                         DUP;\n                         DIG 3;\n                         MUL;\n                         DUG 4;\n                         DIG 3;\n                         MUL;\n                         DIP { MUL };\n                         DIG 3;\n                         IF_LEFT\n                           { DROP;\n                             ADD }\n                           { DROP;\n                             SWAP;\n                             SUB };\n                         PAIR;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         DIP { UNPAIR; SWAP; DUP };\n                         UNPAIR;\n                         SWAP;\n                         DUP;\n                         DIG 3;\n                         MUL;\n                         DUG 4;\n                         DIG 3;\n                         MUL;\n                         DIP { MUL };\n                         DIG 3;\n                         IF_LEFT\n                           { DROP;\n                             ADD }\n                           { DROP;\n                             SWAP;\n                             SUB };\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         AMOUNT;\n                         COMPARE;\n                         GE;\n                         NOT;\n                         IF\n                           { PUSH string "NOT_ENOUGH_FUND";\n                             FAILWITH }\n                           {  };\n                         PUSH bool True;\n                         DIP { DIG 2; DROP };\n                         DUG 2 }\n                       { DIG 8;\n                         DUP;\n                         DUG 9;\n                         SENDER;\n                         COMPARE;\n                         EQ;\n                         IF\n                           { DIG 5;\n                             DUP;\n                             DUG 6;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             PAIR;\n                             UNPAIR;\n                             UNPAIR;\n                             ABS;\n                             DIG 2;\n                             MUL;\n                             EDIV;\n                             IF_NONE\n                               { PUSH string "DivByZero";\n                                 FAILWITH }\n                               {  };\n                             CAR;\n                             AMOUNT;\n                             COMPARE;\n                             GE;\n                             NOT;\n                             IF\n                               { PUSH string "NOT_ENOUGH_FUND";\n                                 FAILWITH }\n                               {  };\n                             PUSH bool True;\n                             DIP { DIG 1; DROP };\n                             DUG 1 }\n                           {  } };\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     DIG 3;\n                     DUP;\n                     DUG 4;\n                     AND;\n                     IF\n                       { DIG 9;\n                         DUP;\n                         DUG 10;\n                         SELF;\n                         ADDRESS;\n                         CONTRACT %toFunded unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         PUSH mutez 0;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 9; DROP };\n                         DUG 9 }\n                       {  };\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR }\n                   { DROP;\n                     DIG 7;\n                     DUP;\n                     DUG 8;\n                     SENDER;\n                     COMPARE;\n                     EQ;\n                     NOT;\n                     IF\n                       { PUSH string "InvalidCaller";\n                         FAILWITH }\n                       {  };\n                     DUP;\n                     DUP;\n                     PUSH nat 2;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { DIG 10;\n                         DUP;\n                         DUG 11;\n                         DIG 10;\n                         DUP;\n                         DUG 11;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         UNIT;\n                         LEFT unit;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         PUSH nat 1;\n                         PUSH nat 1;\n                         INT;\n                         PAIR;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         DIP { UNPAIR; SWAP; DUP };\n                         UNPAIR;\n                         SWAP;\n                         DUP;\n                         DIG 3;\n                         MUL;\n                         DUG 4;\n                         DIG 3;\n                         MUL;\n                         DIP { MUL };\n                         DIG 3;\n                         IF_LEFT\n                           { DROP;\n                             ADD }\n                           { DROP;\n                             SWAP;\n                             SUB };\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 10; DROP };\n                         DUG 10;\n                         DIG 10;\n                         DUP;\n                         DUG 11;\n                         DIG 9;\n                         DUP;\n                         DUG 10;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 10; DROP };\n                         DUG 10;\n                         DIG 11;\n                         DUP;\n                         DUG 12;\n                         UNIT;\n                         LEFT unit;\n                         RIGHT (or unit unit);\n                         RIGHT unit;\n                         PUSH nat 1;\n                         PUSH int 0;\n                         PAIR;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         PAIR;\n                         PAIR;\n                         EXEC;\n                         IF\n                           { DIG 10;\n                             DUP;\n                             DUG 11;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             CONTRACT unit;\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             PAIR;\n                             UNPAIR;\n                             UNPAIR;\n                             ABS;\n                             DIG 2;\n                             MUL;\n                             EDIV;\n                             IF_NONE\n                               { PUSH string "DivByZero";\n                                 FAILWITH }\n                               {  };\n                             CAR;\n                             UNIT;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 10; DROP };\n                             DUG 10 }\n                           {  };\n                         PUSH nat 3;\n                         DIP { DIG 1; DROP };\n                         DUG 1 }\n                       { PUSH string "InvalidState";\n                         FAILWITH };\n                     DROP;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR } } };\n         DIP { DROP } };\n}\n')))))}P.isMDXComponent=!0}}]);