(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{208:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return P})),t.d(e,"metadata",(function(){return I})),t.d(e,"toc",(function(){return U})),t.d(e,"default",(function(){return c}));var a=t(3),D=(t(0),t(235)),r=t(236),i=t(248),s=t(249);const P={id:"template9",title:"Competition",sidebar_label:"Competition",slug:"/templates/competition"},I={unversionedId:"templates/template9",id:"templates/template9",isDocsHomePage:!1,title:"Competition",description:"Introduction",source:"@site/docs/templates/template9.md",slug:"/templates/competition",permalink:"/docs/templates/competition",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template9.md",version:"current",sidebar_label:"Competition",sidebar:"templates",previous:{title:"Idea box",permalink:"/docs/templates/ideabox"},next:{title:"Auction",permalink:"/docs/templates/auction"}},U=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Code",id:"code",children:[]}],o={toc:U};function c({components:n,...e}){return Object(D.b)("wrapper",Object(a.a)({},o,e,{components:n,mdxType:"MDXLayout"}),Object(D.b)("h2",{id:"introduction"},"Introduction"),Object(D.b)("p",null,"This contract collects competitors' scores, and distribute prize to top scores. Submitted scores must be signed by an external oracle to be registered."),Object(D.b)("p",null,"You may see this contract in action in the ",Object(D.b)(r.a,{to:"/docs/dapp-game/",mdxType:"Link"},"2048 competition")," DApp example."),Object(D.b)("h2",{id:"api"},"API"),Object(D.b)("h3",{id:"storage"},"Storage"),Object(D.b)("table",null,Object(D.b)("thead",{parentName:"table"},Object(D.b)("tr",{parentName:"thead"},Object(D.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(D.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(D.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(D.b)("tbody",{parentName:"table"},Object(D.b)("tr",{parentName:"tbody"},Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(D.b)("inlineCode",{parentName:"td"},"organizer")),Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(D.b)("inlineCode",{parentName:"td"},"address")),Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Address of the organizer.")),Object(D.b)("tr",{parentName:"tbody"},Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(D.b)("inlineCode",{parentName:"td"},"prize")),Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(D.b)("inlineCode",{parentName:"td"},"tez")),Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Prize value in tez.")),Object(D.b)("tr",{parentName:"tbody"},Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(D.b)("inlineCode",{parentName:"td"},"oracle")),Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(D.b)("inlineCode",{parentName:"td"},"key")),Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Key of the score oracle.")),Object(D.b)("tr",{parentName:"tbody"},Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(D.b)("inlineCode",{parentName:"td"},"submission")),Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(D.b)("inlineCode",{parentName:"td"},"collection")),Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"A submission is defined by:",Object(D.b)("ul",null,Object(D.b)("li",null,"a competitor address"),Object(D.b)("li",null,"a score"),Object(D.b)("li",null,"a timestamp")))),Object(D.b)("tr",{parentName:"tbody"},Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(D.b)("inlineCode",{parentName:"td"},"_state")),Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(D.b)("inlineCode",{parentName:"td"},"states")),Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Contract state, one of ",Object(D.b)("inlineCode",{parentName:"td"},"Created"),", ",Object(D.b)("inlineCode",{parentName:"td"},"InProgress"),", ",Object(D.b)("inlineCode",{parentName:"td"},"Closed"),".")))),Object(D.b)("h3",{id:"entrypoints"},"Entrypoints"),Object(D.b)("table",null,Object(D.b)("thead",{parentName:"table"},Object(D.b)("tr",{parentName:"thead"},Object(D.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(D.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Parameters"),Object(D.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(D.b)("tbody",{parentName:"table"},Object(D.b)("tr",{parentName:"tbody"},Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(D.b)("inlineCode",{parentName:"td"},"confirmed")),Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called by ",Object(D.b)("inlineCode",{parentName:"td"},"organizer")," to open the competition. Prize must be transferred.")),Object(D.b)("tr",{parentName:"tbody"},Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(D.b)("inlineCode",{parentName:"td"},"submit")),Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(D.b)("inlineCode",{parentName:"td"},"packed_score"),", ",Object(D.b)("inlineCode",{parentName:"td"},"signed_score")),Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Adds a submission; ",Object(D.b)("inlineCode",{parentName:"td"},"packed_score")," is packed version of the pair ",Object(D.b)("em",{parentName:"td"},"competitor address")," and ",Object(D.b)("em",{parentName:"td"},"score"),"; ",Object(D.b)("inlineCode",{parentName:"td"},"signed_score")," is this packed data signed by ",Object(D.b)("inlineCode",{parentName:"td"},"oracle"),". ",Object(D.b)("p",null),"It fails if the data is not signed by ",Object(D.b)("inlineCode",{parentName:"td"},"oracle"),"; it updates the score of the competitor if score already exists.")),Object(D.b)("tr",{parentName:"tbody"},Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(D.b)("inlineCode",{parentName:"td"},"close")),Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(D.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Sets contract state to ",Object(D.b)("inlineCode",{parentName:"td"},"Closed")," and distribute prize to top scores: ",Object(D.b)("ul",null,Object(D.b)("li",null,Object(D.b)("em",{parentName:"td"},"50%"),", ",Object(D.b)("em",{parentName:"td"},"30%"),", ",Object(D.b)("em",{parentName:"td"},"20%")," if more than 3 submissions"),Object(D.b)("li",null,Object(D.b)("em",{parentName:"td"},"60%"),", ",Object(D.b)("em",{parentName:"td"},"40%")," if 2 submissions"),Object(D.b)("li",null,Object(D.b)("em",{parentName:"td"},"100%")," if only one submission")))))),Object(D.b)("h2",{id:"code"},"Code"),Object(D.b)(i.a,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"}],mdxType:"Tabs"},Object(D.b)(s.a,{value:"archetype",mdxType:"TabItem"},Object(D.b)("pre",null,Object(D.b)("code",Object(a.a)({parentName:"pre"},{className:"language-archetype",metastring:'title="competition.arl"',title:'"competition.arl"'}),'archetype competition(\n  organizer   : address,\n  prize       : tez,\n  oracle      : key,\n)\n\nasset submission {\n  competitor : address;\n  score      : nat;\n  timestamp  : date;\n}\n\n(* state machine *)\nstates =\n | Created     initial\n | InProgress\n | Closed\n\ntransition confirm () {\n  called by organizer\n  from Created to InProgress\n  when { transferred = prize }\n}\n\nentry submit (packed_score : bytes, signed_score : signature) {\n  require {\n    c1 : state = InProgress;\n  }\n  effect {\n    if check_signature(oracle, signed_score, packed_score) then (\n      match unpack<address * nat>(packed_score) with\n      | some(s) ->\n        submission.addupdate(s[0], {\n          score = s[1];\n          timestamp = now\n        })\n      | none -> fail("CANNOT_UNPACK_SCORE")\n      end\n    ) else fail("NOT_SIGNED_BY_ORACLE");\n  }\n}\n\ntransition close () {\n  called by organizer\n  from InProgress to Closed\n  with effect {\n    var submissions = submission.sort(desc(score), timestamp);\n    if submissions.count() >= 3 then begin\n      var first  = submissions.nth(0);\n      var second = submissions.nth(1);\n      var third  = submissions.nth(2);\n      var q1 = 50% * prize;\n      var q2 = 30% * prize;\n      var q3 = 20% * prize;\n      transfer q1 to first;\n      transfer q2 to second;\n      transfer q3 to third;\n      transfer (prize - q1 - q2 - q3) to organizer\n    end else if submissions.count() >= 2 then begin\n      var first  = submissions.nth(0);\n      var second = submissions.nth(1);\n      var q1 = 60% * prize;\n      var q2 = 40% * prize;\n      transfer q1 to first;\n      transfer q2 to second;\n      transfer (prize - q1 - q2) to organizer\n    end else if submissions.count() >= 1 then begin\n      var first = submissions.nth(0);\n      transfer prize to first\n    end else transfer prize to organizer\n  }\n}\n'))),Object(D.b)(s.a,{value:"michelson",mdxType:"TabItem"},Object(D.b)("pre",null,Object(D.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'# (Pair organizer (Pair prize (Pair oracle (Pair 0 {  }))))\n{\n  storage (pair (address %organizer) (pair (mutez %prize) (pair (key %oracle) (pair (nat %_state) (map %submission address (pair (nat %score) (timestamp %timestamp)))))));\n  parameter (or (unit %confirm) (or (pair %submit (bytes %packed_score) (signature %signed_score)) (unit %close)));\n  code { NIL operation;\n         DIG 1;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { DROP;\n             DIG 4;\n             DUP;\n             DUG 5;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             DIG 1;\n             DUP;\n             DUG 2;\n             DUP;\n             PUSH nat 0;\n             COMPARE;\n             EQ;\n             IF\n               { DIG 4;\n                 DUP;\n                 DUG 5;\n                 AMOUNT;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { PUSH nat 1;\n                     DIP { DIG 2; DROP };\n                     DUG 2 }\n                   {  } }\n               { PUSH string "InvalidState";\n                 FAILWITH };\n             DROP;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { UNPAIR;\n                 SWAP;\n                 PUSH nat 1;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCondition: c1";\n                     FAILWITH }\n                   {  };\n                 DIG 1;\n                 DUP;\n                 DUG 2;\n                 DIG 1;\n                 DUP;\n                 DUG 2;\n                 DIG 6;\n                 DUP;\n                 DUG 7;\n                 CHECK_SIGNATURE;\n                 IF\n                   { DIG 1;\n                     DUP;\n                     DUG 2;\n                     UNPACK (pair address nat);\n                     IF_NONE\n                       { PUSH string "CANNOT_UNPACK_SCORE";\n                         FAILWITH }\n                       { DIG 3;\n                         DUP;\n                         DUG 4;\n                         NOW;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         CDR;\n                         PAIR;\n                         SOME;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         CAR;\n                         UPDATE;\n                         DIP { DIG 3; DROP };\n                         DUG 3;\n                         DROP } }\n                   { PUSH string "NOT_SIGNED_BY_ORACLE";\n                     FAILWITH };\n                 DROP 2;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { DROP;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 SENDER;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCaller";\n                     FAILWITH }\n                   {  };\n                 DIG 1;\n                 DUP;\n                 DUG 2;\n                 DUP;\n                 PUSH nat 1;\n                 COMPARE;\n                 EQ;\n                 IF\n                   { NIL address;\n                     DIG 2;\n                     DUP;\n                     DUG 3;\n                     ITER { UNPAIR;\n                            NIL address;\n                            DIG 1;\n                            DUP;\n                            DUG 2;\n                            SOME;\n                            PAIR;\n                            DIG 3;\n                            DUP;\n                            DUG 4;\n                            ITER { DIG 1;\n                                   DUP;\n                                   DUG 2;\n                                   CAR;\n                                   DIG 2;\n                                   DUP;\n                                   DUG 3;\n                                   CDR;\n                                   DIG 1;\n                                   DUP;\n                                   DUG 2;\n                                   IF_NONE\n                                     { DUP;\n                                       DIG 3;\n                                       DUP;\n                                       DUG 4;\n                                       CONS;\n                                       DIG 2;\n                                       DUP;\n                                       DUG 3;\n                                       PAIR }\n                                     { PUSH int 0;\n                                       DIG 10;\n                                       DUP;\n                                       DUG 11;\n                                       DIG 5;\n                                       DUP;\n                                       DUG 6;\n                                       GET;\n                                       IF_NONE\n                                         { PUSH string "GetNoneValue";\n                                           FAILWITH }\n                                         {  };\n                                       DIG 8;\n                                       DUP;\n                                       DUG 9;\n                                       CAR;\n                                       DIG 1;\n                                       DUP;\n                                       DUG 2;\n                                       CAR;\n                                       COMPARE;\n                                       LT;\n                                       IF\n                                         { PUSH int 1 }\n                                         { DIG 8;\n                                           DUP;\n                                           DUG 9;\n                                           CDR;\n                                           DIG 1;\n                                           DUP;\n                                           DUG 2;\n                                           CDR;\n                                           COMPARE;\n                                           GT;\n                                           IF\n                                             { PUSH int 1 }\n                                             { PUSH int 0 } };\n                                       DIP { DROP };\n                                       COMPARE;\n                                       GT;\n                                       IF\n                                         { DIG 1;\n                                           DUP;\n                                           DUG 2;\n                                           DIG 6;\n                                           DUP;\n                                           DUG 7;\n                                           CONS;\n                                           DIG 4;\n                                           DUP;\n                                           DUG 5;\n                                           CONS;\n                                           NONE address;\n                                           PAIR }\n                                         { DIG 1;\n                                           DUP;\n                                           DUG 2;\n                                           DIG 4;\n                                           DUP;\n                                           DUG 5;\n                                           CONS;\n                                           DIG 3;\n                                           DUP;\n                                           DUG 4;\n                                           PAIR };\n                                       SWAP;\n                                       DROP };\n                                   DIP { DROP };\n                                   DIP { DROP };\n                                   DIP { DIG 1; DROP };\n                                   DUG 1;\n                                   DROP };\n                            DUP;\n                            CAR;\n                            DIG 1;\n                            DUP;\n                            DUG 2;\n                            CDR;\n                            NIL address;\n                            DIG 2;\n                            DUP;\n                            DUG 3;\n                            IF_NONE\n                              { DIG 1;\n                                DUP;\n                                DUG 2 }\n                              { DIG 2;\n                                DUP;\n                                DUG 3;\n                                DIG 6;\n                                DUP;\n                                DUG 7;\n                                CONS;\n                                SWAP;\n                                DROP };\n                            ITER { DIG 1;\n                                   DUP;\n                                   DUG 2;\n                                   DIG 1;\n                                   DUP;\n                                   DUG 2;\n                                   CONS;\n                                   DIP { DIG 1; DROP };\n                                   DUG 1;\n                                   DROP };\n                            DIP { DROP };\n                            DIP { DROP };\n                            DIP { DROP };\n                            DIP { DIG 2; DROP };\n                            DUG 2;\n                            DROP 2 };\n                     PUSH nat 3;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     SIZE;\n                     COMPARE;\n                     GE;\n                     IF\n                       { NONE address;\n                         PUSH nat 0;\n                         PAIR;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         ITER { PUSH nat 0;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                CAR;\n                                COMPARE;\n                                EQ;\n                                IF\n                                  { DUP;\n                                    SOME;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR }\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CDR;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR };\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         CDR;\n                         IF_NONE\n                           { PUSH string "NoneValue";\n                             FAILWITH }\n                           {  };\n                         NONE address;\n                         PUSH nat 0;\n                         PAIR;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         ITER { PUSH nat 1;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                CAR;\n                                COMPARE;\n                                EQ;\n                                IF\n                                  { DUP;\n                                    SOME;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR }\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CDR;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR };\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         CDR;\n                         IF_NONE\n                           { PUSH string "NoneValue";\n                             FAILWITH }\n                           {  };\n                         NONE address;\n                         PUSH nat 0;\n                         PAIR;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         ITER { PUSH nat 2;\n                                DIG 2;\n                                DUP;\n                                DUG 3;\n                                CAR;\n                                COMPARE;\n                                EQ;\n                                IF\n                                  { DUP;\n                                    SOME;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR }\n                                  { DIG 1;\n                                    DUP;\n                                    DUG 2;\n                                    CDR;\n                                    PUSH nat 1;\n                                    DIG 3;\n                                    DUP;\n                                    DUG 4;\n                                    CAR;\n                                    ADD;\n                                    PAIR };\n                                DIP { DIG 1; DROP };\n                                DUG 1;\n                                DROP };\n                         CDR;\n                         IF_NONE\n                           { PUSH string "NoneValue";\n                             FAILWITH }\n                           {  };\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         PUSH nat 2;\n                         PUSH int 1;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         DIG 9;\n                         DUP;\n                         DUG 10;\n                         PUSH nat 10;\n                         PUSH int 3;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         DIG 10;\n                         DUP;\n                         DUG 11;\n                         PUSH nat 5;\n                         PUSH int 1;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         DIG 13;\n                         DUP;\n                         DUG 14;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 13; DROP };\n                         DUG 13;\n                         DIG 13;\n                         DUP;\n                         DUG 14;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 13; DROP };\n                         DUG 13;\n                         DIG 13;\n                         DUP;\n                         DUG 14;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 13; DROP };\n                         DUG 13;\n                         DIG 13;\n                         DUP;\n                         DUG 14;\n                         DIG 13;\n                         DUP;\n                         DUG 14;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 16;\n                         DUP;\n                         DUG 17;\n                         SUB;\n                         SUB;\n                         SUB;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 13; DROP };\n                         DUG 13;\n                         DROP 6 }\n                       { PUSH nat 2;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         SIZE;\n                         COMPARE;\n                         GE;\n                         IF\n                           { NONE address;\n                             PUSH nat 0;\n                             PAIR;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             ITER { PUSH nat 0;\n                                    DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    CAR;\n                                    COMPARE;\n                                    EQ;\n                                    IF\n                                      { DUP;\n                                        SOME;\n                                        PUSH nat 1;\n                                        DIG 3;\n                                        DUP;\n                                        DUG 4;\n                                        CAR;\n                                        ADD;\n                                        PAIR }\n                                      { DIG 1;\n                                        DUP;\n                                        DUG 2;\n                                        CDR;\n                                        PUSH nat 1;\n                                        DIG 3;\n                                        DUP;\n                                        DUG 4;\n                                        CAR;\n                                        ADD;\n                                        PAIR };\n                                    DIP { DIG 1; DROP };\n                                    DUG 1;\n                                    DROP };\n                             CDR;\n                             IF_NONE\n                               { PUSH string "NoneValue";\n                                 FAILWITH }\n                               {  };\n                             NONE address;\n                             PUSH nat 0;\n                             PAIR;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             ITER { PUSH nat 1;\n                                    DIG 2;\n                                    DUP;\n                                    DUG 3;\n                                    CAR;\n                                    COMPARE;\n                                    EQ;\n                                    IF\n                                      { DUP;\n                                        SOME;\n                                        PUSH nat 1;\n                                        DIG 3;\n                                        DUP;\n                                        DUG 4;\n                                        CAR;\n                                        ADD;\n                                        PAIR }\n                                      { DIG 1;\n                                        DUP;\n                                        DUG 2;\n                                        CDR;\n                                        PUSH nat 1;\n                                        DIG 3;\n                                        DUP;\n                                        DUG 4;\n                                        CAR;\n                                        ADD;\n                                        PAIR };\n                                    DIP { DIG 1; DROP };\n                                    DUG 1;\n                                    DROP };\n                             CDR;\n                             IF_NONE\n                               { PUSH string "NoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             PUSH nat 5;\n                             PUSH int 3;\n                             PAIR;\n                             PAIR;\n                             UNPAIR;\n                             UNPAIR;\n                             ABS;\n                             DIG 2;\n                             MUL;\n                             EDIV;\n                             IF_NONE\n                               { PUSH string "DivByZero";\n                                 FAILWITH }\n                               {  };\n                             CAR;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             PUSH nat 5;\n                             PUSH int 2;\n                             PAIR;\n                             PAIR;\n                             UNPAIR;\n                             UNPAIR;\n                             ABS;\n                             DIG 2;\n                             MUL;\n                             EDIV;\n                             IF_NONE\n                               { PUSH string "DivByZero";\n                                 FAILWITH }\n                               {  };\n                             CAR;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             CONTRACT unit;\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             UNIT;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 11; DROP };\n                             DUG 11;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             CONTRACT unit;\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             UNIT;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 11; DROP };\n                             DUG 11;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             CONTRACT unit;\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             DIG 13;\n                             DUP;\n                             DUG 14;\n                             SUB;\n                             SUB;\n                             UNIT;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 11; DROP };\n                             DUG 11;\n                             DROP 4 }\n                           { PUSH nat 1;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             SIZE;\n                             COMPARE;\n                             GE;\n                             IF\n                               { NONE address;\n                                 PUSH nat 0;\n                                 PAIR;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 ITER { PUSH nat 0;\n                                        DIG 2;\n                                        DUP;\n                                        DUG 3;\n                                        CAR;\n                                        COMPARE;\n                                        EQ;\n                                        IF\n                                          { DUP;\n                                            SOME;\n                                            PUSH nat 1;\n                                            DIG 3;\n                                            DUP;\n                                            DUG 4;\n                                            CAR;\n                                            ADD;\n                                            PAIR }\n                                          { DIG 1;\n                                            DUP;\n                                            DUG 2;\n                                            CDR;\n                                            PUSH nat 1;\n                                            DIG 3;\n                                            DUP;\n                                            DUG 4;\n                                            CAR;\n                                            ADD;\n                                            PAIR };\n                                        DIP { DIG 1; DROP };\n                                        DUG 1;\n                                        DROP };\n                                 CDR;\n                                 IF_NONE\n                                   { PUSH string "NoneValue";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 8;\n                                 DUP;\n                                 DUG 9;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 CONTRACT unit;\n                                 IF_NONE\n                                   { PUSH string "BadContract";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 8;\n                                 DUP;\n                                 DUG 9;\n                                 UNIT;\n                                 TRANSFER_TOKENS;\n                                 CONS;\n                                 DIP { DIG 8; DROP };\n                                 DUG 8;\n                                 DROP }\n                               { DIG 7;\n                                 DUP;\n                                 DUG 8;\n                                 DIG 7;\n                                 DUP;\n                                 DUG 8;\n                                 CONTRACT unit;\n                                 IF_NONE\n                                   { PUSH string "BadContract";\n                                     FAILWITH }\n                                   {  };\n                                 DIG 7;\n                                 DUP;\n                                 DUG 8;\n                                 UNIT;\n                                 TRANSFER_TOKENS;\n                                 CONS;\n                                 DIP { DIG 7; DROP };\n                                 DUG 7 } } };\n                     DROP;\n                     PUSH nat 2;\n                     DIP { DIG 2; DROP };\n                     DUG 2 }\n                   { PUSH string "InvalidState";\n                     FAILWITH };\n                 DROP;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR } } };\n}\n')))))}c.isMDXComponent=!0},241:function(n,e,t){"use strict";function a(n){var e,t,D="";if("string"==typeof n||"number"==typeof n)D+=n;else if("object"==typeof n)if(Array.isArray(n))for(e=0;e<n.length;e++)n[e]&&(t=a(n[e]))&&(D&&(D+=" "),D+=t);else for(e in n)n[e]&&(D&&(D+=" "),D+=e);return D}e.a=function(){for(var n,e,t=0,D="";t<arguments.length;)(n=arguments[t++])&&(e=a(n))&&(D&&(D+=" "),D+=e);return D}},246:function(n,e,t){"use strict";var a=t(0),D=t(247);e.a=function(){const n=Object(a.useContext)(D.a);if(null==n)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return n}},247:function(n,e,t){"use strict";var a=t(0);const D=Object(a.createContext)(void 0);e.a=D},248:function(n,e,t){"use strict";var a=t(0),D=t.n(a),r=t(246),i=t(241),s=t(56),P=t.n(s);const I=37,U=39;e.a=function(n){const{lazy:e,block:t,defaultValue:s,values:o,groupId:c,className:b}=n,{tabGroupChoices:l,setTabGroupChoices:O}=Object(r.a)(),[d,G]=Object(a.useState)(s),N=a.Children.toArray(n.children);if(null!=c){const n=l[c];null!=n&&n!==d&&o.some((e=>e.value===n))&&G(n)}const m=n=>{G(n),null!=c&&O(c,n)},p=[];return D.a.createElement("div",null,D.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":t},b)},o.map((({value:n,label:e})=>D.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":d===n,className:Object(i.a)("tabs__item",P.a.tabItem,{"tabs__item--active":d===n}),key:n,ref:n=>p.push(n),onKeyDown:n=>{((n,e,t)=>{switch(t.keyCode){case U:((n,e)=>{const t=n.indexOf(e)+1;n[t]?n[t].focus():n[0].focus()})(n,e);break;case I:((n,e)=>{const t=n.indexOf(e)-1;n[t]?n[t].focus():n[n.length-1].focus()})(n,e)}})(p,n.target,n)},onFocus:()=>m(n),onClick:()=>{m(n)}},e)))),e?Object(a.cloneElement)(N.filter((n=>n.props.value===d))[0],{className:"margin-vert--md"}):D.a.createElement("div",{className:"margin-vert--md"},N.map(((n,e)=>Object(a.cloneElement)(n,{key:e,hidden:n.props.value!==d})))))}},249:function(n,e,t){"use strict";var a=t(3),D=t(0),r=t.n(D);e.a=function({children:n,hidden:e,className:t}){return r.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:e,className:t}),n)}}}]);