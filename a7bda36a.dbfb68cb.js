(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{170:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return d})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n(3),r=(n(0),n(224));n(226),n(227),n(228);const d={id:"dex9",title:"Implementation",sidebar_label:"Implementation",slug:"/dapp-dex/implementation"},o={unversionedId:"dapp-dex/dex9",id:"dapp-dex/dex9",isDocsHomePage:!1,title:"Implementation",description:"Add/Remove token",source:"@site/docs/dapp-dex/dex9.md",slug:"/dapp-dex/implementation",permalink:"/docs/dapp-dex/implementation",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/dapp-dex/dex9.md",version:"current",sidebar_label:"Implementation"},l=[{value:"Add/Remove token",id:"addremove-token",children:[]},{value:"Exchange",id:"exchange",children:[]},{value:"Add liquidity",id:"add-liquidity",children:[]},{value:"Remove liquidity",id:"remove-liquidity",children:[]}],i={toc:l};function s({components:e,...t}){return Object(r.b)("wrapper",Object(a.a)({},i,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"addremove-token"},"Add/Remove token"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-archetype"}),"entry registertoken (i : string, a : address, n : string, u : string) {\n  called by admin\n  effect {\n    token.addupdate(i, { addr = a; name = n; iconurl = u }); }\n}\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-archetype"}),"entry deletetoken (i : string) {\n  called by admin\n  effect { token.remove(i) }\n}\n")),Object(r.b)("h2",{id:"exchange"},"Exchange"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-archetype"}),"function compute_exchanged(aA : nat, qA : nat, qB : nat) : rational {\n  return (qB * gamma * aA / (qA + gamma * aA))\n}\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-archetype",metastring:"{6,19,31}","{6,19,31}":!0}),'entry exchange(tA : string, aA: nat, tB : string, aB : nat) {\n  require {\n    r0 otherwise "SRC_EQ_DST" : tA <> tB;\n  }\n  effect {\n    if tA = "XTZ" then begin\n      var qA = token[tB].poolvalue;\n      var qB = token[tB].totalqty;\n      var expectedB = compute_exchanged(aA,qA,qB);\n      if (abs(expectedB - aB) > epsilon) then fail(("INVALID_B_AMOUNT",expectedB));\n      var xtzin : nat = transferred;\n      if aA <> xtzin then fail(("INVALID_A_AMOUNT",xtzin));\n      match entrypoint<(address * address * nat)>("%transfer",token[tB].addr) with\n      | some(transferB) ->\n        transfer 0tz to entry transferB((selfaddress, caller, aB))\n      | none -> fail("INVALID_B_ENTRY")\n      end;\n      token.update(tB, { poolvalue += xtzin; totalqty -= aB });\n    end else if tB = "XTZ" then begin\n      var qA = token[tA].totalqty;\n      var qB = token[tA].poolvalue;\n      var expectedB = compute_exchanged(aA,qA,qB);\n      if (abs(expectedB - aB) > epsilon) then fail(("INVALID_B_AMOUNT",expectedB));\n      match entrypoint<(address * address * nat)>("%transfer",token[tA].addr) with\n      | some(transferA) ->\n        transfer 0tz to entry transferA((caller, selfaddress, aA))\n      | none -> fail("INVALID_A_ENTRY")\n      end;\n      transfer (aB * 1utz) to caller;\n      token.update(tA, { poolvalue -= aB; totalqty += aA });\n    end else begin\n      var qA  = token[tA].totalqty;\n      var qTA = token[tA].poolvalue;\n      var aT  = abs(floor(compute_exchanged(aA,qA,qTA)));\n      var qTB = token[tB].poolvalue;\n      var qB  = token[tB].totalqty;\n      var expectedB = compute_exchanged(aT,qTB,qB);\n      if (abs(expectedB - aB) > epsilon) then fail(("INVALID_B_AMOUNT",expectedB));\n      match entrypoint<(address * address * nat)>("%transfer",token[tA].addr) with\n      | some(transferA) ->\n        transfer 0tz to entry transferA((caller, selfaddress, aA))\n      | none -> fail("INVALID_A_ENTRY")\n      end;\n      match entrypoint<(address * address * nat)>("%transfer",token[tB].addr) with\n      | some(transferA) ->\n        transfer 0tz to entry transferA((selfaddress, caller, aB))\n      | none -> fail("INVALID_B_ENTRY")\n      end;\n      token.update(tA, { poolvalue -= aT; totalqty += aA });\n      token.update(tB, { poolvalue += aT; totalqty -= aB });\n    end\n  }\n}\n')),Object(r.b)("h2",{id:"add-liquidity"},"Add liquidity"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-archetype"}),'entry addLiquidity(tL : string, qL : nat) {\n  match entrypoint<(address * address * nat)>("%transfer",token[tL].addr) with\n   | some(transfer_src) ->\n     transfer 0tz to entry transfer_src((caller, selfaddress, qL))\n   | none -> fail("INVALID_DST_ENTRY")\n  end;\n  /* mint LQT tokens */\n  var xtzin : nat = transferred;\n  var mintedLTQ =\n    if token[tL].poolvalue = 0 then initialminted\n    else abs(floor(token[tL].totallqt * xtzin / token[tL].poolvalue));\n  liquidity.addupdate((tL, caller), { lqt += mintedLTQ });\n  token.update(tL, { poolvalue += xtzin; totalqty += qL; totallqt += mintedLTQ })\n}\n')),Object(r.b)("h2",{id:"remove-liquidity"},"Remove liquidity"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-archetype"}),'entry removeLiquidity(qL : nat, tA : string) {\n  require {\n    r1 otherwise "NOT_ENOUGHT_LQT": qL <= liquidity[(tA, caller)].lqt\n  }\n  effect {\n    var lqtratio = qL / token[tA].totallqt;\n    var xtzout = abs(floor(lqtratio * token[tA].poolvalue));\n    transfer (xtzout * 1utz) to caller;\n    match entrypoint<(address * address * nat)>("%transfer",token[tA].addr) with\n    | some(transfer_src) ->\n      var qty = abs(floor(lqtratio * token[tA].totalqty));\n      transfer 0tz to entry transfer_src((selfaddress, caller, qty));\n      liquidity.addupdate((tA, caller), { lqt -= qL });\n      token.update(tA, { poolvalue -= xtzout; totalqty -= qty; totallqt -= qL })\n    | none -> fail("INVALID_DST_ENTRY")\n    end;\n  }\n}\n')))}s.isMDXComponent=!0},226:function(e,t,n){"use strict";n(0),n(230)}}]);