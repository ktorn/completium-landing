(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{147:function(r,n,e){"use strict";e.r(n),e.d(n,"frontMatter",(function(){return o})),e.d(n,"metadata",(function(){return l})),e.d(n,"toc",(function(){return g})),e.d(n,"default",(function(){return c}));var i=e(3),t=(e(0),e(224)),a=e(225),p=e(245),m=e(246),s=e(418);const o={id:"template1",title:"FA 1.2",sidebar_label:"FA 1.2",slug:"/templates/fa12"},l={unversionedId:"templates/template1",id:"templates/template1",isDocsHomePage:!1,title:"FA 1.2",description:"Introduction",source:"@site/docs/templates/template1.md",slug:"/templates/fa12",permalink:"/docs/templates/fa12",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/templates/template1.md",version:"current",sidebar_label:"FA 1.2",sidebar:"templates",previous:{title:"Presentation",permalink:"/docs/templates"},next:{title:"ERC20",permalink:"/docs/templates/erc20"}},g=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Originate",id:"originate",children:[]},{value:"Code",id:"code",children:[]}],D={toc:g};function c({components:r,...n}){return Object(t.b)("wrapper",Object(i.a)({},D,n,{components:r,mdxType:"MDXLayout"}),Object(t.b)("h2",{id:"introduction"},"Introduction"),Object(t.b)("p",null,"A fungible token is basically an association table between the token owner (the account address) and the amount of tokens (a natural integer). It is possible to allow another account to transfer tokens on your behalf."),Object(t.b)("p",null,"This contract follows the ",Object(t.b)("a",{href:"https://assets.tqtezos.com/docs/token-contracts/fa12/1-fa12-intro/"},"Financial Asset 1.2")," (FA 1.2) ",Object(t.b)("a",{href:"https://gitlab.com/tzip/tzip/blob/master/proposals/tzip-7/tzip-7.md"},"TZIP 7")," specification for fungible token on Tezos."),Object(t.b)("h2",{id:"api"},"API"),Object(t.b)("h3",{id:"storage"},"Storage"),Object(t.b)("table",null,Object(t.b)("thead",{parentName:"table"},Object(t.b)("tr",{parentName:"thead"},Object(t.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Name"),Object(t.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Type"),Object(t.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Desc"))),Object(t.b)("tbody",{parentName:"table"},Object(t.b)("tr",{parentName:"tbody"},Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(t.b)("inlineCode",{parentName:"td"},"totalsupply")),Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(t.b)("inlineCode",{parentName:"td"},"nat")),Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Total number of tokens.")),Object(t.b)("tr",{parentName:"tbody"},Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(t.b)("inlineCode",{parentName:"td"},"ledger")),Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(t.b)("inlineCode",{parentName:"td"},"collection")),Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Association between token holder and number of tokens.")),Object(t.b)("tr",{parentName:"tbody"},Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(t.b)("inlineCode",{parentName:"td"},"allowance")),Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(t.b)("inlineCode",{parentName:"td"},"collection")),Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Association between the pair owner and spender and the allowed amount.")))),Object(t.b)("h3",{id:"entrypoints"},"Entrypoints"),Object(t.b)("table",null,Object(t.b)("thead",{parentName:"table"},Object(t.b)("tr",{parentName:"thead"},Object(t.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Name"),Object(t.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Parameters"),Object(t.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"Desc"))),Object(t.b)("tbody",{parentName:"table"},Object(t.b)("tr",{parentName:"tbody"},Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(t.b)("inlineCode",{parentName:"td"},"transfer")),Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(t.b)("inlineCode",{parentName:"td"},"from"),", ",Object(t.b)("inlineCode",{parentName:"td"},"to"),", ",Object(t.b)("inlineCode",{parentName:"td"},"value")),Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Transfers ",Object(t.b)("inlineCode",{parentName:"td"},"value")," tokens from ",Object(t.b)("inlineCode",{parentName:"td"},"from")," to ",Object(t.b)("inlineCode",{parentName:"td"},"to"),". If the ",Object(t.b)("em",{parentName:"td"},"caller")," is not equal to ",Object(t.b)("inlineCode",{parentName:"td"},"from"),", then ",Object(t.b)("em",{parentName:"td"},"caller")," must have been allowed by ",Object(t.b)("inlineCode",{parentName:"td"},"from")," to transfer this amount to ",Object(t.b)("inlineCode",{parentName:"td"},"to"),".")),Object(t.b)("tr",{parentName:"tbody"},Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(t.b)("inlineCode",{parentName:"td"},"approve")),Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(t.b)("inlineCode",{parentName:"td"},"spender"),", ",Object(t.b)("inlineCode",{parentName:"td"},"value")),Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Approves ",Object(t.b)("inlineCode",{parentName:"td"},"spender")," to transfer ",Object(t.b)("inlineCode",{parentName:"td"},"value")," tokens from ",Object(t.b)("em",{parentName:"td"},"caller"),".")),Object(t.b)("tr",{parentName:"tbody"},Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(t.b)("inlineCode",{parentName:"td"},"getAllowance")),Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(t.b)("inlineCode",{parentName:"td"},"owner"),", ",Object(t.b)("inlineCode",{parentName:"td"},"spender")),Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Getter for the allowed value for ",Object(t.b)("inlineCode",{parentName:"td"},"owner")," and ",Object(t.b)("inlineCode",{parentName:"td"},"spender"),".")),Object(t.b)("tr",{parentName:"tbody"},Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(t.b)("inlineCode",{parentName:"td"},"getBalance")),Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(t.b)("inlineCode",{parentName:"td"},"owner")),Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Getter for the number of tokens owned by ",Object(t.b)("inlineCode",{parentName:"td"},"owner"),".")),Object(t.b)("tr",{parentName:"tbody"},Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),Object(t.b)("inlineCode",{parentName:"td"},"getTotalSupply")),Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null})),Object(t.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Getter for ",Object(t.b)("inlineCode",{parentName:"td"},"totalsupply"))))),Object(t.b)("h2",{id:"originate"},"Originate"),Object(t.b)("p",null,"Originate a FA 1.2 contract with the widget below."),Object(t.b)("p",null,'Click "Connect to Wallet" button, fill the fields "Initial Holder" and "Total Supply", and click "Originate".'),Object(t.b)(s.a,{mdxType:"Deploy"}),Object(t.b)("p",null,"Originate the contract from ",Object(t.b)("a",{href:"https://archetype-lang.org/"},"Archetype")," code below with the following ",Object(t.b)(a.a,{to:"/docs/cli",mdxType:"Link"},"Completium CLI")," example command:"),Object(t.b)("pre",null,Object(t.b)("code",Object(i.a)({parentName:"pre"},{}),"completium-cli deploy fa12.arl --init '(@tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG, 10_000_000)'\n")),Object(t.b)("p",null,"The command sets:"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"initialholder")," constant to ",Object(t.b)("inlineCode",{parentName:"li"},"tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG")),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"totalsupply")," variable to 10 millions")),Object(t.b)("h2",{id:"code"},"Code"),Object(t.b)("p",null,"The ",Object(t.b)(a.a,{to:"/docs/contract/programming-language#micheslon",mdxType:"Link"},"Michelson")," code is generated with version 1.2.3 of Archetype."),Object(t.b)("div",{className:"admonition admonition-info alert alert--info"},Object(t.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-heading"}),Object(t.b)("h5",{parentName:"div"},Object(t.b)("span",Object(i.a)({parentName:"h5"},{className:"admonition-icon"}),Object(t.b)("svg",Object(i.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(t.b)("path",Object(i.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(t.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-content"}),Object(t.b)("p",{parentName:"div"},"The Archetype FA 1.2 code has been ",Object(t.b)(a.a,{to:"https://assets.tqtezos.com/docs/token-contracts/fa12/4-fa12-archetype/",mdxType:"Link"},"verified")," towards the formal specification presented below."))),Object(t.b)(p.a,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"},{label:"Specification",value:"specification"}],mdxType:"Tabs"},Object(t.b)(m.a,{value:"archetype",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",Object(i.a)({parentName:"pre"},{className:"language-archetype"}),'archetype fa12(const initialholder: address, totalsupply : nat)\n\nasset allowance identified by addr_owner addr_spender to big_map {\n  addr_owner       : address;\n  addr_spender     : address;\n  amount           : nat;\n}\n\nasset ledger identified by holder to big_map {\n  holder     : address;\n  tokens     : nat = 0;\n} initialized by {\n  { holder = initialholder; tokens = totalsupply }\n}\n\nentry %transfer (%from : address, %to : address, value : nat) {\n  require {\n    r1 otherwise "NotEnoughBalance" : ledger[%from].tokens >= value;\n  }\n  effect {\n    if caller <> %from then (\n      var current = allowance[(%from, caller)].amount;\n      dofailif(current < value, ("NotEnoughAllowance", ((value, current))));\n      allowance.update((%from, caller), { amount -=  value });\n    );\n    ledger.update(%from, { tokens -= value });\n    ledger.addupdate(%to, { tokens += value });\n  }\n}\n\nentry approve(spender : address, value : nat) {\n  var k = (caller, spender);\n  if allowance.contains(k) then (\n    var previous = allowance[k].amount;\n    dofailif(previous > 0 and value > 0, (("UnsafeAllowanceChange", previous)));\n  );\n  allowance.addupdate( k, { amount = value });\n}\n\ngetter getAllowance (owner : address, spender : address) : nat {\n  return (allowance[(owner, spender)].amount)\n}\n\ngetter getBalance (owner : address) : nat {\n  return (if (ledger.contains(owner)) then ledger[owner].tokens else 0)\n}\n\ngetter getTotalSupply () : nat {\n  return totalsupply\n}\n'))),Object(t.b)(m.a,{value:"michelson",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),'# (Pair 10000000 (Pair {  } { Elt "tz1LLJ3nxbpGGMLmjzcp9sTMYui87tycG6nG" 10000000 }))\n{\n  storage (pair (nat %totalsupply) (pair (big_map %allowance (pair address address) nat) (big_map %ledger address nat)));\n  parameter (or (pair %getAllowance (pair (address %owner) (address %spender)) (contract nat)) (or (pair %getBalance (address %owner) (contract nat)) (or (pair %getTotalSupply unit (contract nat)) (or (pair %transfer (address %from) (pair (address %to) (nat %value))) (pair %approve (address %spender) (nat %value))))));\n  code { NIL operation;\n         DIG 1;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { UNPAIR;\n             UNPAIR;\n             SWAP;\n             DIG 6;\n             DUP;\n             DUG 7;\n             DIG 3;\n             DUP;\n             DUG 4;\n             AMOUNT;\n             DIG 7;\n             DUP;\n             DUG 8;\n             DIG 4;\n             DUP;\n             DUG 5;\n             DIG 6;\n             DUP;\n             DUG 7;\n             PAIR;\n             GET;\n             IF_NONE\n               { PUSH string "GetNoneValue";\n                 FAILWITH }\n               {  };\n             TRANSFER_TOKENS;\n             CONS;\n             DIP { DIG 6; DROP };\n             DUG 6;\n             DROP 3;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { UNPAIR;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 AMOUNT;\n                 DIG 5;\n                 DUP;\n                 DUG 6;\n                 DIG 4;\n                 DUP;\n                 DUG 5;\n                 MEM;\n                 IF\n                   { DIG 5;\n                     DUP;\n                     DUG 6;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     GET;\n                     IF_NONE\n                       { PUSH string "GetNoneValue";\n                         FAILWITH }\n                       {  } }\n                   { PUSH nat 0 };\n                 TRANSFER_TOKENS;\n                 CONS;\n                 DIP { DIG 5; DROP };\n                 DUG 5;\n                 DROP 2;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { IF_LEFT\n                   { UNPAIR;\n                     DROP;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     AMOUNT;\n                     DIG 6;\n                     DUP;\n                     DUG 7;\n                     TRANSFER_TOKENS;\n                     CONS;\n                     DIP { DIG 4; DROP };\n                     DUG 4;\n                     DROP;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR }\n                   { IF_LEFT\n                       { UNPAIR;\n                         SWAP;\n                         UNPAIR;\n                         SWAP;\n                         DUP;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         COMPARE;\n                         GE;\n                         NOT;\n                         IF\n                           { PUSH string "NotEnoughBalance";\n                             FAILWITH }\n                           {  };\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         SENDER;\n                         COMPARE;\n                         NEQ;\n                         IF\n                           { DIG 4;\n                             DUP;\n                             DUG 5;\n                             SENDER;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             PAIR;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             COMPARE;\n                             LT;\n                             IF\n                               { DUP;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 PAIR;\n                                 PUSH string "NotEnoughAllowance";\n                                 PAIR;\n                                 FAILWITH }\n                               {  };\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             SENDER;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             PAIR;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             PUSH int 0;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             INT;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             SUB;\n                             COMPARE;\n                             GE;\n                             IF\n                               { DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 INT;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 SUB;\n                                 ABS }\n                               { PUSH string "AssignNat";\n                                 FAILWITH };\n                             SOME;\n                             SENDER;\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             PAIR;\n                             UPDATE;\n                             DIP { DIG 6; DROP };\n                             DUG 6;\n                             DROP 2 }\n                           {  };\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         PUSH int 0;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         INT;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         SUB;\n                         COMPARE;\n                         GE;\n                         IF\n                           { DIG 2;\n                             DUP;\n                             DUG 3;\n                             INT;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             SUB;\n                             ABS }\n                           { PUSH string "AssignNat";\n                             FAILWITH };\n                         SOME;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         UPDATE;\n                         DIP { DIG 4; DROP };\n                         DUG 4;\n                         DROP;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         MEM;\n                         IF\n                           { DIG 3;\n                             DUP;\n                             DUG 4;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             ADD;\n                             SOME;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             UPDATE;\n                             DIP { DIG 4; DROP };\n                             DUG 4;\n                             DROP }\n                           { DIG 3;\n                             DUP;\n                             DUG 4;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             MEM;\n                             IF\n                               { PUSH string "KeyAlreadyExists";\n                                 FAILWITH }\n                               { DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 PUSH nat 0;\n                                 ADD;\n                                 SOME;\n                                 DIG 3;\n                                 DUP;\n                                 DUG 4;\n                                 UPDATE;\n                                 DIP { DIG 3; DROP };\n                                 DUG 3 } };\n                         DROP 3;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         DIG 1;\n                         PAIR }\n                       { UNPAIR;\n                         SWAP;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         SENDER;\n                         PAIR;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         MEM;\n                         IF\n                           { DIG 4;\n                             DUP;\n                             DUG 5;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             PUSH nat 0;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             COMPARE;\n                             GT;\n                             PUSH nat 0;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             COMPARE;\n                             GT;\n                             AND;\n                             IF\n                               { DUP;\n                                 PUSH string "UnsafeAllowanceChange";\n                                 PAIR;\n                                 FAILWITH }\n                               {  };\n                             DROP }\n                           {  };\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         SOME;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         UPDATE;\n                         DIP { DIG 4; DROP };\n                         DUG 4;\n                         DROP 3;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         DIG 1;\n                         PAIR } } } } };\n}\n'))),Object(t.b)(m.a,{value:"specification",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",Object(i.a)({parentName:"pre"},{className:"language-archetype"}),'specification {\n  s1: ledger.sum(tokens) = totalsupply;\n}\n\nspecification entry %transfer (%from : address, %to : address, value : nat) {\n  fails {\n    f0 with (msg : string) :\n      let some after_ledger_from = ledger[%from] in\n        msg = "NotEnoughBalance" and\n        after_ledger_from.tokens < value\n      otherwise true;\n    f1 with (msg : string * (nat * nat)) :\n      let some after_allowance_from_caller = allowance[(%from,caller)] in\n        msg = ("NotEnoughAllowance", ((value, after_allowance_from_caller.amount))) and\n        caller <> %from and\n        after_allowance_from_caller.amount < value\n      otherwise false;\n  }\n\n  (* LEDGER ASSET *)\n  postcondition transfer_p1 { (* effect on %from nbtokens *)\n    %from <> %to ->\n    let some before_ledger_from = before.ledger[%from] in\n    let some after_ledger_from  = ledger[%from] in\n    after_ledger_from = { before_ledger_from with\n      tokens = abs (before_ledger_from.tokens - value)\n    }\n    otherwise false otherwise false\n  }\n\n  postcondition transfer_p2 { (* effect on %to nbtokens *)\n    %from <> %to ->\n    let some after_ledger_to = ledger[%to] in\n    let some before_ledger_to = before.ledger[%to] in\n      after_ledger_to = { before_ledger_to with\n        tokens = (before_ledger_to.tokens + value)\n      }\n    otherwise\n      after_ledger_to = { holder = %to; tokens = value }\n    otherwise false (* %to ledger asset exists after transfer *) r\n  }\n\n  postcondition transfer_p3 {\n    %from = %to -> ledger = before.ledger\n  }\n\n  postcondition transfer_p4 { (* other ledger assets are unchanged *)\n    forall tokenholder in ledger,\n      tokenholder.holder <> %from ->\n      tokenholder.holder <> %to ->\n      before.ledger[tokenholder.holder] = some(tokenholder)\n  }\n\n  postcondition transfer_p5 { (* no ledger asset is removed *)\n    removed.ledger.isempty()\n  }\n\n  postcondition transfer_p6 { (* number of added asset may be one *)\n    let some before_to = before.ledger[%to] in\n      added.ledger.isempty()\n    otherwise\n      added.ledger = [ { holder = %to; tokens = value } ]\n  }\n\n  (* ALLOWANCE ASSET *)\n  postcondition transfer_p7 { (* effect on allowance *)\n    caller <> %from ->\n    let some before_from_caller = before.allowance[(%from,caller)] in\n    let some after_from_caller = allowance[(%from,caller)] in\n      before_from_caller.amount > value ->\n      after_from_caller = { before_from_caller with\n        amount = abs (before_from_caller.amount - value)\n      }\n    otherwise false\n    otherwise true\n  }\n\n  postcondition transfer_p8 { (* effect on allowance *)\n    caller = %from -> allowance = before.allowance\n  }\n\n  postcondition transfer_p9 { (* other allowance assets are unchanged *)\n    forall a in allowance,\n      a.addr_owner <> %from and a.addr_spender <> caller ->\n      before.allowance[(a.addr_owner, a.addr_spender)] = some(a)\n  }\n\n  postcondition transfer_p10 { (* no allowance is added or removed *)\n    removed.allowance.isempty() and added.allowance.isempty()\n  }\n\n  postcondition transfer_p11 { (* no operation generated *)\n    length (operations) = 0\n  }\n}\n\nspecification entry approve(spender : address, value : nat) {\n  fails {\n    f2 with (msg : (string * nat)) :\n      let some allowance_caller_spender = allowance[(caller, spender)] in\n        msg = ("UnsafeAllowanceChange", allowance_caller_spender.amount) and\n        value > 0 and\n        allowance_caller_spender.amount > 0\n      otherwise false;\n  }\n\n  postcondition approve_p1 { (* effect on allowance asset *)\n    let some after_allowance_caller_spender = allowance[(caller,spender)] in\n    let some before_allowance_caller_spender = before.allowance[(caller,spender)] in\n      after_allowance_caller_spender = { before_allowance_caller_spender with\n        amount = value\n      }\n    otherwise\n      after_allowance_caller_spender = { addr_owner = caller; addr_spender = spender; amount = value }\n    otherwise false\n  }\n\n  postcondition approve_p2 { (* other allowance assets are unchanged *)\n    forall a in allowance,\n      (a.addr_owner, a.addr_spender) <> (caller, spender) ->\n      before.allowance[(a.addr_owner, a.addr_spender)] = some(a)\n  }\n\n  postcondition approve_p3 { (* added allowance *)\n    let some allowance_caller_spender = before.allowance[(caller, spender)] in\n      added.allowance.isempty()\n    otherwise\n      added.allowance = [ { addr_owner = caller; addr_spender = spender; amount = value } ]\n  }\n\n  postcondition approve_p4 { (* no allowance asset is removed *)\n    removed.allowance.isempty()\n  }\n\n  postcondition approve_p5 {\n    ledger = before.ledger\n  }\n\n  postcondition approve_p6 { (*  no operation generated *)\n    length (operations) = 0\n  }\n}\n\nspecification getter getAllowance (owner : address, spender : address) {\n  postcondition getallowance_p1 { (* creates one op *)\n    length (operations) = 1\n  }\n\n  postcondition getallowance_p2 { (* assets are unchanged *)\n    ledger = before.ledger and allowance = before.allowance\n  }\n}\n\nspecification getter getBalance (owner : address) {\n  postcondition getbalance_p1 { (* creates one op *)\n    length (operations) = 1\n  }\n\n  postcondition getbalance_p2 { (* assets are unchanged *)\n    ledger = before.ledger and allowance = before.allowance\n  }\n}\n\nspecification getter getTotalSupply () {\n  postcondition gettotalsupply_p1 { (* creates one op *)\n    length (operations) = 1\n  }\n\n  postcondition gettotalsupply_p2 { (* assets are unchanged *)\n    ledger = before.ledger and allowance = before.allowance\n  }\n}\n')))))}c.isMDXComponent=!0},364:function(r,n,e){"use strict";e.d(n,"a",(function(){return m})),e.d(n,"f",(function(){return s})),e.d(n,"e",(function(){return o})),e.d(n,"b",(function(){return l})),e.d(n,"d",(function(){return g})),e.d(n,"c",(function(){return D}));var i=e(0),t=e.n(i),a=e(395),p=e(535);const[m,s,o,l,g,D]=Object(a.a)((function({appName:r}){const[{wallet:n,tezos:e,accountPkh:i},a]=t.a.useState((()=>({wallet:null,tezos:null,accountPkh:null}))),m=Boolean(e);t.a.useEffect((()=>p.a.onAvailabilityChange((n=>{a({wallet:n?new p.a(r):null,tezos:null,accountPkh:null})}))),[a,r]);const s=t.a.useCallback((async(r,e)=>{try{if(!n)throw new Error("Thanos Wallet not available");await n.connect(r,e);const i=n.toTezos(),t=await i.wallet.pkh();a({wallet:n,tezos:i,accountPkh:t})}catch(i){alert(`Failed to connect ThanosWallet: ${i.message}`)}}),[a,n]);return{wallet:n,tezos:e,accountPkh:i,ready:m,connect:s}}),(r=>r.wallet),(r=>r.tezos),(r=>r.accountPkh),(r=>r.ready),(r=>r.connect))},396:function(r,n,e){"use strict";e.d(n,"a",(function(){return a})),e.d(n,"b",(function(){return p}));var i=e(0),t=e(395);const[a,p]=Object(t.a)((function(){const[r,n]=Object(i.useState)({show:!1,severity:"info",msg:""});return{snackState:r,setInfoSnack:r=>{n({show:!0,severity:"info",msg:r})},setErrorSnack:r=>{n({show:!0,severity:"error",msg:r})},hideSnack:()=>{n((r=>({...r,show:!1})))}}}))},418:function(r,n,e){"use strict";(function(r){var i=e(0),t=e.n(i),a=e(360),p=e(362),m=e(595),s=e(363),o=e(582),l=e(536),g=e(580),D=e(364),c=e(524),d=e(396),P=e(537),I=e(525),U=e(225),G=e(601),b=e(600),u=e(590),O=e(589),A=e(526),N=e.n(A);const f=r=>{const n=n=>{r.setMain(n.target.checked)};if(Object(D.d)()){const r=Object(D.b)();return t.a.createElement(p.a,{container:!0,direction:"column",justify:"center",alignItems:"center"},t.a.createElement(s.a,{variant:"subtitle2"},"Connected with:"),t.a.createElement(s.a,{variant:"subtitle2",style:{fontFamily:"Courier Prime, monospace"}},r))}return t.a.createElement(p.a,{container:!0},t.a.createElement(p.a,{item:!0,xs:8},t.a.createElement(P.a,{main:r.main})),t.a.createElement(p.a,{item:!0,xs:2},t.a.createElement(G.a,{checked:r.main,onChange:n,name:"checkedB",color:"primary"})),t.a.createElement(p.a,{item:!0,xs:2},t.a.createElement(s.a,{variant:"subtitle2",style:{marginTop:"8px"}},"Mainnet")))};const E=r=>t.a.createElement(p.a,{container:!0,direction:"column",justify:"center",alignItems:"center"},t.a.createElement(s.a,{variant:"subtitle2"},"Contract available at:"),t.a.createElement(s.a,{component:U.a,to:"https://better-call.dev/"+(r.main?"mainnet":"edo2net")+"/"+r.contract+"/operations",variant:"subtitle2",style:{fontFamily:"Courier Prime, monospace"}},r.contract));function S(n,e,i,t,a){const p={symbol:n,name:e,decimals:i,description:t,thumbnailUri:a};return r.from(JSON.stringify(p)).toString("hex")}const h=()=>{const[r,n]=t.a.useState(""),[e,i]=t.a.useState(1e7),[l,g]=t.a.useState(""),[c,P]=t.a.useState(!1),[U,G]=t.a.useState("CMPL"),[A,h]=t.a.useState("Completium Token"),[R,T]=t.a.useState(1),[j,w]=t.a.useState("https://completium.com/img/logo_completium_128.png"),[_,v]=t.a.useState(!1),{setInfoSnack:F,setErrorSnack:y,hideSnack:H}=Object(d.b)(),W=Object(D.e)(),C=Object(D.d)(),M=()=>{return r.length>0&(36!==(n=r).length|!n.startsWith("tz1"));var n},k=()=>!(Math.round(e)==e&e>0);return t.a.createElement(a.a,{style:{backgroundColor:"transparent",border:"1px solid #606770",marginTop:"20px",marginBottom:"20px"},raised:!1},t.a.createElement(p.a,{container:!0,style:{padding:22},spacing:3},t.a.createElement(p.a,{item:!0,xs:6},t.a.createElement(m.a,{onChange:r=>{n(r.target.value)},value:r,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"initalholder",label:"Initial Holder",error:M(),helperText:M()?"Invalid address format":""})),t.a.createElement(p.a,{item:!0,xs:6,style:{textAlign:"center",marginTop:"10px"}},t.a.createElement(f,{main:_,setMain:v})),t.a.createElement(p.a,{item:!0,xs:6},t.a.createElement(m.a,{type:"number",onChange:r=>{i(r.target.value)},error:k(),helperText:k()?"Invalid Natural Integer":"",value:e,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"totalsupply",label:"Total Supply"})),t.a.createElement(p.a,{item:!0,xs:6,style:{textAlign:"center",marginTop:"10px"}},""!==l?t.a.createElement(E,{contract:l,main:_}):t.a.createElement(o.a,{variant:"contained",color:"primary",disableElevation:!0,disabled:!C|k()|M()|0==r.length,onClick:async()=>{try{const n=await W.wallet.originate({code:c?I.b:I.a,init:c?Object(I.d)(r,e,S(U,A,R,"",j)):Object(I.c)(r,e)}).send(),i=n.opHash.substring(0,10)+"...";F(`waiting for ${i} to be confirmed ...`);const t=await n.contract();H(),console.log(`Origination completed for ${t.address}.`),setTimeout((()=>g(t.address)),5e3)}catch(n){console.log(n),y(n.message),setTimeout(H,4e3)}}},"originate"))),t.a.createElement(b.a,{expanded:c,onChange:(r,n)=>{P(n)},style:{backgroundColor:"transparent"}},t.a.createElement(O.a,{expandIcon:t.a.createElement(N.a,null),"aria-controls":"panel4bh-content",id:"panel4bh-header"},t.a.createElement(s.a,{style:{marginLeft:"10px"}},"Metadata")),t.a.createElement(u.a,null,t.a.createElement(p.a,{container:!0,spacing:3,style:{marginLeft:"0px"}},t.a.createElement(p.a,{item:!0,xs:6},t.a.createElement(m.a,{onChange:r=>{G(r.target.value)},error:!1,helperText:"Token symbol, like 'USD' for United States Dollar.",value:U,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"symbol",label:"Symbol"})),t.a.createElement(p.a,{item:!0,xs:6},t.a.createElement(m.a,{onChange:r=>{h(r.target.value)},error:!1,helperText:"Token name, like 'Bitcoin' for BTC asset.",value:A,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"name",label:"Name"})),t.a.createElement(p.a,{item:!0,xs:6},t.a.createElement(m.a,{type:"number",onChange:r=>{T(r.target.value)},error:!1,helperText:"A number of decimal places after point.",value:R,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"decimals",label:"Decimals"})),t.a.createElement(p.a,{item:!0,xs:6},t.a.createElement(m.a,{onChange:r=>{w(r.target.value)},error:!1,helperText:"Image URL for token logo.",value:j,variant:"outlined",color:"primary",fullWidth:!0,required:!0,id:"url",label:"Icon URL"}))))))};n.a=r=>{const n=t.a.useMemo((()=>Object(l.a)({palette:{type:"dark",primary:{light:"#1dc5ff",main:"#00ACE7",dark:"#0a90bf",contrastText:"#fff"}}})),[!0]);return t.a.createElement(D.a,{appName:"Completium FA 1.2"},t.a.createElement(d.a,null,t.a.createElement(g.a,{theme:n},t.a.createElement(h,null),t.a.createElement(c.a,null))))}}).call(this,e(239).Buffer)},424:function(r,n){},426:function(r,n){},495:function(r,n){},497:function(r,n){},510:function(r,n){},512:function(r,n){},524:function(r,n,e){"use strict";var i=e(3),t=e(0),a=e.n(t),p=e(599),m=e(597),s=e(301),o=e(396);function l(r){return a.a.createElement(m.a,Object(i.a)({elevation:6,variant:"filled"},r))}n.a=()=>{const{snackState:r}=Object(o.b)();Object(s.a)();return a.a.createElement(p.a,{open:r.show},a.a.createElement(l,{severity:r.severity},r.msg))}},525:function(r,n,e){"use strict";e.d(n,"a",(function(){return i})),e.d(n,"c",(function(){return t})),e.d(n,"b",(function(){return a})),e.d(n,"d",(function(){return p}));var i=[{prim:"storage",args:[{prim:"pair",args:[{prim:"nat",annots:["%totalsupply"]},{prim:"pair",args:[{prim:"big_map",args:[{prim:"pair",args:[{prim:"address"},{prim:"address"}]},{prim:"nat"}],annots:["%allowance"]},{prim:"big_map",args:[{prim:"address"},{prim:"nat"}],annots:["%ledger"]}]}]}]},{prim:"parameter",args:[{prim:"or",args:[{prim:"pair",args:[{prim:"pair",args:[{prim:"address",annots:["%owner"]},{prim:"address",annots:["%spender"]}]},{prim:"contract",args:[{prim:"nat"}]}],annots:["%getAllowance"]},{prim:"or",args:[{prim:"pair",args:[{prim:"address",annots:["%owner"]},{prim:"contract",args:[{prim:"nat"}]}],annots:["%getBalance"]},{prim:"or",args:[{prim:"pair",args:[{prim:"unit"},{prim:"contract",args:[{prim:"nat"}]}],annots:["%getTotalSupply"]},{prim:"or",args:[{prim:"pair",args:[{prim:"address",annots:["%from"]},{prim:"pair",args:[{prim:"address",annots:["%to"]},{prim:"nat",annots:["%value"]}]}],annots:["%transfer"]},{prim:"pair",args:[{prim:"address",annots:["%spender"]},{prim:"nat",annots:["%value"]}],annots:["%approve"]}]}]}]}]}]},{prim:"code",args:[[{prim:"NIL",args:[{prim:"operation"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"}]]},{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"AMOUNT"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"PAIR"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"AMOUNT"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]}],[{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]}]]},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"2"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"AMOUNT"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DUP"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"COMPARE"},{prim:"GE"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"NotEnoughBalance"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SENDER"},{prim:"COMPARE"},{prim:"NEQ"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"SENDER"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"PAIR"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"COMPARE"},{prim:"LT"},{prim:"IF",args:[[{prim:"DUP"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"PAIR"},{prim:"PUSH",args:[{prim:"string"},{string:"NotEnoughAllowance"}]},{prim:"PAIR"},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"SENDER"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"PAIR"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"INT"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SUB"},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"INT"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SUB"},{prim:"ABS"}],[{prim:"PUSH",args:[{prim:"string"},{string:"AssignNat"}]},{prim:"FAILWITH"}]]},{prim:"SOME"},{prim:"SENDER"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"PAIR"},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"2"}]}],[]]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"INT"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SUB"},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"INT"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SUB"},{prim:"ABS"}],[{prim:"PUSH",args:[{prim:"string"},{string:"AssignNat"}]},{prim:"FAILWITH"}]]},{prim:"SOME"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"ADD"},{prim:"SOME"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}],[{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"KeyAlreadyExists"}]},{prim:"FAILWITH"}],[{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"ADD"},{prim:"SOME"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"3"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"3"}]}]]}]]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"SENDER"},{prim:"PAIR"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"COMPARE"},{prim:"GT"},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"COMPARE"},{prim:"GT"},{prim:"AND"},{prim:"IF",args:[[{prim:"DUP"},{prim:"PUSH",args:[{prim:"string"},{string:"UnsafeAllowanceChange"}]},{prim:"PAIR"},{prim:"FAILWITH"}],[]]},{prim:"DROP",args:[{int:"1"}]}],[]]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SOME"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}]]}]]}]]}]]}]]}],t=function(r,n){return{prim:"Pair",args:[{int:n.toString()},{prim:"Pair",args:[[],[{prim:"Elt",args:[{string:r},{int:n.toString()}]}]]}]}},a=[{prim:"storage",args:[{prim:"pair",args:[{prim:"nat",annots:["%totalsupply"]},{prim:"pair",args:[{prim:"big_map",args:[{prim:"pair",args:[{prim:"address"},{prim:"address"}]},{prim:"nat"}],annots:["%allowance"]},{prim:"pair",args:[{prim:"big_map",args:[{prim:"address"},{prim:"nat"}],annots:["%ledger"]},{prim:"big_map",args:[{prim:"string"},{prim:"bytes"}],annots:["%metadata"]}]}]}]}]},{prim:"parameter",args:[{prim:"or",args:[{prim:"pair",args:[{prim:"pair",args:[{prim:"address",annots:["%owner"]},{prim:"address",annots:["%spender"]}]},{prim:"contract",args:[{prim:"nat"}]}],annots:["%getAllowance"]},{prim:"or",args:[{prim:"pair",args:[{prim:"address",annots:["%owner"]},{prim:"contract",args:[{prim:"nat"}]}],annots:["%getBalance"]},{prim:"or",args:[{prim:"pair",args:[{prim:"unit"},{prim:"contract",args:[{prim:"nat"}]}],annots:["%getTotalSupply"]},{prim:"or",args:[{prim:"pair",args:[{prim:"address",annots:["%from"]},{prim:"pair",args:[{prim:"address",annots:["%to"]},{prim:"nat",annots:["%value"]}]}],annots:["%transfer"]},{prim:"pair",args:[{prim:"address",annots:["%spender"]},{prim:"nat",annots:["%value"]}],annots:["%approve"]}]}]}]}]}]},{prim:"code",args:[[{prim:"NIL",args:[{prim:"operation"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"UNPAIR"},{prim:"DIP",args:[{int:"1"},[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"}]]},{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"AMOUNT"},{prim:"DIG",args:[{int:"8"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"9"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"PAIR"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"7"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"7"}]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"AMOUNT"},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]}],[{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]}]]},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"6"}]},{prim:"DROP",args:[{int:"2"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"AMOUNT"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"TRANSFER_TOKENS"},{prim:"CONS"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"IF_LEFT",args:[[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DUP"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"COMPARE"},{prim:"GE"},{prim:"NOT"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"NotEnoughBalance"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SENDER"},{prim:"COMPARE"},{prim:"NEQ"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"SENDER"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"PAIR"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"COMPARE"},{prim:"LT"},{prim:"IF",args:[[{prim:"DUP"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"PAIR"},{prim:"PUSH",args:[{prim:"string"},{string:"NotEnoughAllowance"}]},{prim:"PAIR"},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"6"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"7"}]},{prim:"SENDER"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"PAIR"},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"INT"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SUB"},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"INT"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SUB"},{prim:"ABS"}],[{prim:"PUSH",args:[{prim:"string"},{string:"AssignNat"}]},{prim:"FAILWITH"}]]},{prim:"SOME"},{prim:"SENDER"},{prim:"DIG",args:[{int:"7"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"8"}]},{prim:"PAIR"},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"7"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"7"}]},{prim:"DROP",args:[{int:"2"}]}],[]]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"PUSH",args:[{prim:"int"},{int:"0"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"INT"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"SUB"},{prim:"COMPARE"},{prim:"GE"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"INT"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SUB"},{prim:"ABS"}],[{prim:"PUSH",args:[{prim:"string"},{string:"AssignNat"}]},{prim:"FAILWITH"}]]},{prim:"SOME"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"ADD"},{prim:"SOME"},{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}],[{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"KeyAlreadyExists"}]},{prim:"FAILWITH"}],[{prim:"DIG",args:[{int:"4"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"5"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"ADD"},{prim:"SOME"},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"4"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"4"}]}]]}]]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}],[{prim:"UNPAIR"},{prim:"SWAP"},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"SENDER"},{prim:"PAIR"},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"MEM"},{prim:"IF",args:[[{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"1"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"2"}]},{prim:"GET"},{prim:"IF_NONE",args:[[{prim:"PUSH",args:[{prim:"string"},{string:"GetNoneValue"}]},{prim:"FAILWITH"}],[]]},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"3"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"4"}]},{prim:"COMPARE"},{prim:"GT"},{prim:"PUSH",args:[{prim:"nat"},{int:"0"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"COMPARE"},{prim:"GT"},{prim:"AND"},{prim:"IF",args:[[{prim:"DUP"},{prim:"PUSH",args:[{prim:"string"},{string:"UnsafeAllowanceChange"}]},{prim:"PAIR"},{prim:"FAILWITH"}],[]]},{prim:"DROP",args:[{int:"1"}]}],[]]},{prim:"DIG",args:[{int:"5"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"6"}]},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"SOME"},{prim:"DIG",args:[{int:"2"}]},{prim:"DUP"},{prim:"DUG",args:[{int:"3"}]},{prim:"UPDATE"},{prim:"DIP",args:[{int:"1"},[{prim:"DIG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"1"}]}]]},{prim:"DUG",args:[{int:"5"}]},{prim:"DROP",args:[{int:"3"}]},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"SWAP"},{prim:"PAIR"},{prim:"DIG",args:[{int:"1"}]},{prim:"PAIR"}]]}]]}]]}]]}]]}],p=function(r,n,e){return{prim:"Pair",args:[{int:n.toString()},{prim:"Pair",args:[[],{prim:"Pair",args:[[{prim:"Elt",args:[{string:r},{int:n.toString()}]}],[{prim:"Elt",args:[{string:""},{bytes:"74657a6f732d73746f726167653a68657265"}]},{prim:"Elt",args:[{string:"here"},{bytes:e}]}]]}]}]}}},537:function(r,n,e){"use strict";var i=e(0),t=e.n(i),a=e(364);var p=e(582),m=e(588),s=e(301);n.a=r=>{const n=Object(s.a)(),e=Object(a.d)(),i=Object(a.f)(),o=Object(a.c)(),l=t.a.useCallback((r=>async()=>{try{await o(r?"mainnet":"edo2net")}catch(n){alert(n.message)}}),[o]);return e?t.a.createElement("div",null):i?t.a.createElement(p.a,{variant:"outlined",color:n.palette.text.primary,onClick:l(r.main)},"connect to wallet"):t.a.createElement(m.a,{href:"https://templewallet.com/",rel:"noopener",underline:"none"},t.a.createElement(p.a,{variant:"contained",disableElevation:!0,style:{backgroundColor:"#ed8936",color:"white",fontWeight:"bold"}},"install Temple"))}}}]);