(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{147:function(t,e,a){"use strict";a.r(e),a.d(e,"frontMatter",(function(){return l})),a.d(e,"metadata",(function(){return i})),a.d(e,"toc",(function(){return p})),a.d(e,"default",(function(){return d}));var n=a(3),r=a(7),c=(a(0),a(196)),o=(a(199),a(198)),l={id:"tuto8",title:"Call another Contract",sidebar_label:"8. Call a contract",slug:"/dapp-tools/tutorials/archetype-callcontr"},i={unversionedId:"dapp-tools/tutorials/tuto8",id:"dapp-tools/tutorials/tuto8",isDocsHomePage:!1,title:"Call another Contract",description:"Can a contract read another contract's storage?",source:"@site/docs/dapp-tools/tutorials/tuto8.md",slug:"/dapp-tools/tutorials/archetype-callcontr",permalink:"/docs/dapp-tools/tutorials/archetype-callcontr",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/dapp-tools/tutorials/tuto8.md",version:"current",sidebar_label:"8. Call a contract",sidebar:"tools",previous:{title:"Assets",permalink:"/docs/dapp-tools/tutorials/archetype-assets"},next:{title:"Testing a contract",permalink:"/docs/dapp-tools/tutorials/archetype-test"}},p=[{value:"Code",id:"code",children:[]},{value:"Deploy",id:"deploy",children:[]},{value:"Call entry point",id:"call-entry-point",children:[]}],s={toc:p};function d(t){var e=t.components,a=Object(r.a)(t,["components"]);return Object(c.b)("wrapper",Object(n.a)({},s,a,{components:e,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Can a contract read another contract's storage?"),Object(c.b)("p",null,"No, not directly. However it is possible to call another contract with the ",Object(c.b)("inlineCode",{parentName:"p"},"transfer")," instruction we have seen in ",Object(c.b)(o.a,{to:"/docs/dapp-tools/tutorials/archetype-datedur",mdxType:"Link"},"previous")," examples."),Object(c.b)("p",null,"It is then possible to setup a mechanism for a smart contract to retrieve a data from another smart contracts, under certain conditions and constraints:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"the smart contract you want to retrieve data from must provide an dedicated entry point to provide the data"),Object(c.b)("li",{parentName:"ul"},"this entry point must accept an argument which is call-back to the calling contract; this call-back is an entry point to be called with the desired data as argument)"),Object(c.b)("li",{parentName:"ul"},"the calling contract must provide a call-back entry point to handle the retreived data")),Object(c.b)("p",null,"It is indeed possible in Michelson to wrap an entrypoint address in a value and send it to an entry point with the ",Object(c.b)("inlineCode",{parentName:"p"},"contract")," type."),Object(c.b)("p",null,"Archetype provides a high-level syntax for this pattern: the keyword ",Object(c.b)("inlineCode",{parentName:"p"},"getter")," generates the required entry point and arguments."),Object(c.b)("h2",{id:"code"},"Code"),Object(c.b)("p",null,"The ",Object(c.b)("em",{parentName:"p"},"called")," contract provides a ",Object(c.b)("inlineCode",{parentName:"p"},"getter")," entry point:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype",metastring:"{9}","{9}":!0}),"archetype contract_called\n\nvariable n : nat = 42\n\nentry set_n(p : nat) {\n  n := p\n}\n\ngetter get_n () : nat { return n }\n\n")),Object(c.b)("p",null,"The smart contract uses a variation of the ",Object(c.b)("inlineCode",{parentName:"p"},"transfer")," instruction to call the ",Object(c.b)("inlineCode",{parentName:"p"},"get_n")," entry point. The address of the called contract is passed as parameter:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype",metastring:"{10}","{10}":!0}),"archetype contract_caller\n\nvariable r : nat = 0\n\nentry set_r(p : nat) {\n  r := p\n}\n\nentry inspect(addr : address) {\n  transfer 0tz to addr call get_n<unit * contract<nat>>((Unit, self.set_r))\n}\n")),Object(c.b)("p",null,"A detailed presentation of the ",Object(c.b)("inlineCode",{parentName:"p"},"getter")," keyword may be found ",Object(c.b)("a",{href:"https://docs.archetype-lang.org/archetype-language/transfers#getter-and-contract",target:"_blank"},"here"),"."),Object(c.b)("h2",{id:"deploy"},"Deploy"),Object(c.b)("p",null,"The following ",Object(c.b)(o.a,{to:"/docs/dapp-tools/completium-cli",mdxType:"Link"},"Completium CLI")," commands deploy the contract on the Tezos network:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"completium-cli deploy 8-1-contract_called.arl\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"completium-cli deploy 8-2-contract_caller.arl\n")),Object(c.b)("h2",{id:"call-entry-point"},"Call entry point"),Object(c.b)("p",null,"The following command calls the unique entry point:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"completium-cli call 8-2-contract_caller.arl --entry inspect --with @`completium-cli show contract 8-1-contract_called.arl`\n")),Object(c.b)("p",null,"You can retrieve the address of the called contract with this command:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"completium-cli show contract 8-1-contract_called.arl\n")))}d.isMDXComponent=!0}}]);