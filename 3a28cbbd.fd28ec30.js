(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{109:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return l}));var a=n(3),o=(n(0),n(224)),r=(n(228),n(227),n(225));const c={id:"iot7",title:"Contract Interactions",sidebar_label:"Contract Interactions",slug:"/dapp-iot/interactions"},s={unversionedId:"dapp-iot/iot7",id:"dapp-iot/iot7",isDocsHomePage:!1,title:"Contract Interactions",description:"Connect to Thanos Wallet",source:"@site/docs/dapp-iot/iot7.md",slug:"/dapp-iot/interactions",permalink:"/docs/dapp-iot/interactions",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/dapp-iot/iot7.md",version:"current",sidebar_label:"Contract Interactions",sidebar:"dapps",previous:{title:"Contract Origination",permalink:"/docs/dapp-iot/origination"},next:{title:"Interface",permalink:"/docs/dapp-iot/interface"}},i=[{value:"Connect to Thanos Wallet",id:"connect-to-thanos-wallet",children:[]},{value:"Read Connected Object parameters",id:"read-connected-object-parameters",children:[]},{value:"Read account",id:"read-account",children:[]},{value:"Start service",id:"start-service",children:[]},{value:"Interrupt service",id:"interrupt-service",children:[]}],p={toc:i};function l({components:e,...t}){return Object(o.b)("wrapper",Object(a.a)({},p,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"connect-to-thanos-wallet"},"Connect to Thanos Wallet"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"src/dapp.js")," file defines the necessary utilities to connect the DApp to the blockchain via the Thanos wallet:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"check whether wallet is connected"),Object(o.b)("li",{parentName:"ul"},"get the Taquito's object"),Object(o.b)("li",{parentName:"ul"},"...")),Object(o.b)("p",null,"In order to make it available accross the React project, these methods are managed with a Constate storage. Constate provides a local centralized storage for React project with minimum effort."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"src/App.js")," defines a node ",Object(o.b)("inlineCode",{parentName:"p"},"DAppProvider")," that needs to be wrap the App node. The FIX ME section is to be found line 18 in 'src/DApp.js' file:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function App() {\n  return (\n    ///////////////////////////////////////////////////////////////////////////\n    // FIX ME\n    // Wrap the App's body with <DAppProvider> tag/function in order to benefit\n    // from wallet's service as defined in dapp.js\n    ///////////////////////////////////////////////////////////////////////////\n    <React.Suspense fallback={null}>\n      <PageRouter />\n    </React.Suspense>\n  );\n}\n")),Object(o.b)("p",null,"The code below shows how to declare the ",Object(o.b)("inlineCode",{parentName:"p"},"DAppProvider")," so that it makes the Thanos utilities available to the DApp:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function App() {\n    return (\n    <DAppProvider appName={appName}>\n      <React.Suspense fallback={null}>\n        <PageRouter />\n      </React.Suspense>\n    </DAppProvider>\n  );\n}\n")),Object(o.b)("h2",{id:"read-connected-object-parameters"},"Read Connected Object parameters"),Object(o.b)("p",null,"The DApp needs to read the smart contract's storage to know about the connected object data:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"price (nb. per minute)"),Object(o.b)("li",{parentName:"ul"},"date of stop service"),Object(o.b)("li",{parentName:"ul"},"...")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"loadSwitchContent")," line 66 of ",Object(o.b)("inlineCode",{parentName:"p"},"Dapp.js")," file is called to read and store the connected object parameters:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"async function loadSwitchContent () {\n    try {\n      ///////////////////////////////////////////////////////////////////////////\n      // FIX ME:\n      // Read contract storage:\n      // * rate\n      // * date of start\n      // * date of stop\n      // * user\n      ///////////////////////////////////////////////////////////////////////////\n    } catch (error) {\n      console.log(`Error: ${error}`);\n    }\n  }\n")),Object(o.b)("p",null,"The code blow reads the contract storage:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:"{2,6}","{2,6}":!0}),"    const Tezos = new TezosToolkit('https://delphinet-tezos.giganode.io');\n    var contract  = await Tezos.contract.at(contractAddress);\n    var cstorage   = await contract.storage();\n    var dateofstart = new Date(cstorage.dateofstart);\n    var dateofstop = new Date(cstorage.dateofstop);\n    var rate = parseInt(0+cstorage.rate[4])/parseInt(0+cstorage.rate[3]);\n    var user = cstorage.user;\n    setBCSwitch({\n      dateofstart: dateofstart,\n      dateofstop : dateofstop,\n      rate: rate,\n      user: user,\n    });\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"rate")," is of ",Object(o.b)("inlineCode",{parentName:"p"},"rational")," type in the contract. In ",Object(o.b)("a",{href:"https://archetype-lang.org/"},"Archetype")," language, rational are encoded as a pair of ",Object(o.b)("inlineCode",{parentName:"p"},"int")," and ",Object(o.b)("inlineCode",{parentName:"p"},"nat"),". That's why you need to retrieve numerator and denominator from Taquito's transcoded value (line 6)."),Object(o.b)("h2",{id:"read-account"},"Read account"),Object(o.b)("p",null,"Account balance is quite straightforward to retrieve."),Object(o.b)("p",null,"Implement the ",Object(o.b)("inlineCode",{parentName:"p"},"loadBalance")," function line 22 of ",Object(o.b)("inlineCode",{parentName:"p"},"src/components/Account.js")," file:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const loadBalance = React.useCallback(async () => {\n    ///////////////////////////////////////////////////////////////////////////\n    // FIX ME\n    // RETRIEVE ACCOUNT BALANCE\n    // Method props.setBalance(string) is passed the account's balance\n    ///////////////////////////////////////////////////////////////////////////\n}, [tezos, account, props.setBalance]);\n")),Object(o.b)("p",null,"The code below retrieves the balance and converts it from mutez to tz:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const loadBalance = React.useCallback(async () => {\n    const bal = await tezos.tz.getBalance(address);\n    props.setBalance(tezos.format('mutez', 'tz', bal).toString());\n}, [tezos, address, props.setBalance]);\n")),Object(o.b)("h2",{id:"start-service"},"Start service"),Object(o.b)("p",null,"The ",Object(o.b)(r.a,{to:"/docs/dapp-iot/implementation#start",mdxType:"Link"},"start")," entry point needs to be called with the current amount of tez in the ",Object(o.b)("inlineCode",{parentName:"p"},"handleStart")," method line 30 in ",Object(o.b)("inlineCode",{parentName:"p"},"src/components/Switch.js")," file:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const handleStart = (event) => {\n    ///////////////////////////////////////////////////////////////////////////\n    // FIX ME:\n    // Invode contract's 'start' entry point and provide the\n    // amount of tezos corresponding to the requested duration\n    ///////////////////////////////////////////////////////////////////////////\n}\n")),Object(o.b)("p",null,"Copy-paste the code below to implement ",Object(o.b)("inlineCode",{parentName:"p"},"handleStart"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:"{4}","{4}":!0}),"tezos.wallet.at(contractAddress).then(contract => {\n    var price = (props.switch.rate * duration).toFixed(6);\n    console.log(`calling start with ${price} XTZ`);\n    contract.methods.start(UnitValue).send({ amount : price, fee : '0.1' }).then( op => {\n      var start = Date.now();\n      console.log(`waiting for ${op.opHash} to be confirmed`);\n      setDisable(true);\n      props.openSnack();\n      op.receipt().then(() => {\n        setDisable(false);\n        props.closeSnack();\n        props.resetBalance();\n        props.loadSwitchContent();\n      });\n    })\n});\n")),Object(o.b)("p",null,"The Taquito's contract object is retrieved with the following code:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tezos.wallet.at(contractAddress).then(contract => {\n    ...\n});\n")),Object(o.b)("p",null,"The Taquito's contract's storage object is retrieved with the following code:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"contract.storage().then(storage => {\n    ...\n}\n")),Object(o.b)("h2",{id:"interrupt-service"},"Interrupt service"),Object(o.b)("p",null,"The ",Object(o.b)(r.a,{to:"/docs/dapp-iot/implementation#interrupt",mdxType:"Link"},"interrupt")," entry point needs to be called with the current amount of tez in the ",Object(o.b)("inlineCode",{parentName:"p"},"handleInterrupt")," method line 129 in ",Object(o.b)("inlineCode",{parentName:"p"},"src/components/Switch.js")," file:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const handleInterrupt = () => {\n    ///////////////////////////////////////////////////////////////////////////\n    // FIX ME:\n    // Invode contract's 'interrupt' entry point\n    ///////////////////////////////////////////////////////////////////////////\n}\n")),Object(o.b)("p",null,"Copy-paste the code below to implement ",Object(o.b)("inlineCode",{parentName:"p"},"handleInterrupt"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tezos.wallet.at(contractAddress).then(contract => {\n    contract.methods.interrupt(UnitValue).send().then( op => {\n      var d = Date.now();\n      console.log(`waiting for ${op.opHash} to be confirmed`);\n      setDisable(true);\n      props.openSnack();\n      op.receipt().then(() => {\n        setDisable(false);\n        props.closeSnack();\n        props.resetBalance();\n        props.setBCSwitch({\n          dateofstart: d,\n          dateofstop: d,\n          rate: props.switch.rate,\n          user: props.switch.user\n        });\n      });\n    })\n});\n")))}l.isMDXComponent=!0}}]);