(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{129:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return A})),t.d(e,"metadata",(function(){return l})),t.d(e,"toc",(function(){return G})),t.d(e,"default",(function(){return R}));var D=t(3),a=t(7),r=(t(0),t(228)),I=t(229),P=t(243),i=t(244),o=t(271),U=t.n(o),A={id:"template4",title:"DEX",sidebar_label:"DEX",slug:"/templates/dex"},l={unversionedId:"templates/template4",id:"templates/template4",isDocsHomePage:!1,title:"DEX",description:"Introduction",source:"@site/docs/templates/template4.md",slug:"/templates/dex",permalink:"/docs/templates/dex",editUrl:"https://github.com/edukera/completium-landing/tree/master/docs/templates/template4.md",version:"current",sidebar_label:"DEX",sidebar:"templates",previous:{title:"Zero-Coupon bond",permalink:"/docs/templates/zcb"},next:{title:"ICO",permalink:"/docs/templates/ico"}},G=[{value:"Introduction",id:"introduction",children:[]},{value:"API",id:"api",children:[{value:"Storage",id:"storage",children:[]},{value:"Entrypoints",id:"entrypoints",children:[]}]},{value:"Code",id:"code",children:[]}],s={toc:G};function R(n){var e=n.components,t=Object(a.a)(n,["components"]);return Object(r.b)("wrapper",Object(D.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"introduction"},"Introduction"),Object(r.b)("p",null,"This Decentralized Exchange (DEX) presented here is based on the Uniswap-like exchange presented in this ",Object(r.b)("a",{href:"https://web.stanford.edu/~guillean/papers/uniswap_analysis.pdf",target:"_blank"},"paper"),". The principle is the one of automated market maker (AMM), that is that the exchange rate from token A to token B is computed automatically."),Object(r.b)("p",null,"To exchange ",Object(r.b)("em",{parentName:"p"},"qA")," tokens A against ",Object(r.b)("em",{parentName:"p"},"qB")," tokens B, the DEX establishes a pool of tokens A and a pool of tokens B, from which tokens are withdrawn or credited; if ",Object(r.b)("em",{parentName:"p"},"pA")," and ",Object(r.b)("em",{parentName:"p"},"pB")," are the numbers of tokens A and B in the pools, then the quantity ",Object(r.b)("em",{parentName:"p"},"qB")," of token B received in exchange of a quantity ",Object(r.b)("em",{parentName:"p"},"qA")," of token A is given by the following formula:"),Object(r.b)(U.a.Provider,null,Object(r.b)(U.a.Node,{formula:"qB = pB * \\frac{(1-f)*qA}{pA+(1-f)*qA}"})),Object(r.b)("p",null,"This principle is explained in more detailed in the ",Object(r.b)(I.a,{to:"/docs/dapp-dex",mdxType:"Link"},"DEX DApp")," example."),Object(r.b)("h2",{id:"api"},"API"),Object(r.b)("h3",{id:"storage"},"Storage"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(D.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(D.a)({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object(D.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"admin")),Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"address")),Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),"Address that can register and unregister tokens in the DEX.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"token")),Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"collection")),Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),"Token data: ",Object(r.b)("ul",null,Object(r.b)("li",null,"token identifier (key)"),Object(r.b)("li",null,"FA 1.2 contract address"),Object(r.b)("li",null,"token name"),Object(r.b)("li",null,"XTZ value in pool"),Object(r.b)("li",null,"number of tokens in pool"),Object(r.b)("li",null,"number of liquidity tokens")))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"liquidity")),Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"collection")),Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),"Number of liquidity tokens per owner and token: ",Object(r.b)("ul",null,Object(r.b)("li",null,"token id (key)"),Object(r.b)("li",null,"owner (key)"),Object(r.b)("li",null,"number of liquidity tokens")))))),Object(r.b)("h3",{id:"entrypoints"},"Entrypoints"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(D.a)({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",Object(D.a)({parentName:"tr"},{align:null}),"Parameters"),Object(r.b)("th",Object(D.a)({parentName:"tr"},{align:null})))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"registertoken")),Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"i"),", ",Object(r.b)("inlineCode",{parentName:"td"},"a"),", ",Object(r.b)("inlineCode",{parentName:"td"},"n")),Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),"Admin adds token ",Object(r.b)("inlineCode",{parentName:"td"},"{\xa0i; a; n; 0; 0; 0 }")," to DEX.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"deletetoken")),Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"i")),Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),"Admin removes token ",Object(r.b)("inlineCode",{parentName:"td"},"i")," from DEX.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"exchange")),Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"tA"),", ",Object(r.b)("inlineCode",{parentName:"td"},"qA"),", ",Object(r.b)("inlineCode",{parentName:"td"},"tB"),", ",Object(r.b)("inlineCode",{parentName:"td"},"qB")),Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("em",{parentName:"td"},"Caller")," exchanges ",Object(r.b)("inlineCode",{parentName:"td"},"qA")," tokens ",Object(r.b)("inlineCode",{parentName:"td"},"tA")," for ",Object(r.b)("inlineCode",{parentName:"td"},"qB")," tokens ",Object(r.b)("inlineCode",{parentName:"td"},"tB"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"addLiquidity")),Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"tA"),", ",Object(r.b)("inlineCode",{parentName:"td"},"qA")),Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("em",{parentName:"td"},"Caller")," provides ",Object(r.b)("inlineCode",{parentName:"td"},"qA")," tokens ",Object(r.b)("inlineCode",{parentName:"td"},"tA")," and the corresponding amount of XTZ is transferred.",Object(r.b)("p",null),"Liquidity tokens are minted and affected to  ",Object(r.b)("em",{parentName:"td"},"caller")," so that it reflects the proportion of ",Object(r.b)("em",{parentName:"td"},"transferred")," XTZ towards the XTZ pool.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"removeLiquidity")),Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"tA"),", ",Object(r.b)("inlineCode",{parentName:"td"},"qL")),Object(r.b)("td",Object(D.a)({parentName:"tr"},{align:null}),Object(r.b)("em",{parentName:"td"},"Caller")," redeems ",Object(r.b)("inlineCode",{parentName:"td"},"qL")," liquidity token for token ",Object(r.b)("inlineCode",{parentName:"td"},"tA"),"; 2 transactions are generated : ",Object(r.b)("ul",null,Object(r.b)("li",null,"transfer of XTZ in proportion of the token XTZ pool"),Object(r.b)("li",null,"transfer of ",Object(r.b)("inlineCode",{parentName:"td"},"tA")," tokens in proportion of the token pool")))))),Object(r.b)("h2",{id:"code"},"Code"),Object(r.b)(P.a,{defaultValue:"archetype",values:[{label:"Archetype",value:"archetype"},{label:"Michelson",value:"michelson"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"archetype",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(D.a)({parentName:"pre"},{className:"language-archetype",metastring:'title="dex.arl"',title:'"dex.arl"'}),'archetype dex(admin : address, initialminted : nat)\n\nconstant fee     : rational = 0.003\nconstant epsilon : nat      = 1\n\nasset token {\n  id        : string ;\n  addr      : address;\n  name      : string ;\n  xtzpool   : nat = 0;\n  tokpool   : nat = 0;\n  liqpool   : nat = 0;\n}\n\nasset liquidity identified by tokenid owner {\n  tokenid  : string ;\n  owner    : address;\n  liqt     : nat = 0;\n}\n\nentry registertoken (i : string, a : address, n : string) {\n  called by admin\n  failif { f1: i = "XTZ" }\n  effect { token.addupdate(i, { addr = a; name = n }); }\n}\n\nentry deletetoken (i : string) {\n  called by admin\n  effect { token.remove(i) }\n}\n\nfunction compute_qB(qA : nat, pA : nat, pB : nat) : rational {\n  var feeqA = (1 - fee) * qA;\n  return (pB * feeqA / (pA + feeqA))\n}\n\nentry exchange(tA : string, qA : nat, tB : string, qB : nat) {\n  require {\n    r0 otherwise "SRC_EQ_DST" : tA <> tB;\n  }\n  effect {\n    (* DEX receives *)\n    if tA = "XTZ" then begin\n      var pA = token[tB].xtzpool;\n      var pB = token[tB].tokpool;\n      var expected_qB = compute_qB(qA, pA, pB);\n      dorequire(abs(expected_qB - qB) <= epsilon, ("INVALID_B_AMOUNT", expected_qB));\n      var xtzin : nat = transferred;\n      dorequire(qA = xtzin, ("INVALID_A_AMOUNT", xtzin));\n      transfer 0tz to token[tB].addr\n        call %transfer<address * address * nat>((selfaddress, caller, qB));\n      token.update(tB, { xtzpool += xtzin; tokpool -= qB });\n    end else if tB = "XTZ" then begin\n      var pA = token[tA].tokpool;\n      var pB = token[tA].xtzpool;\n      var expected_qB = compute_qB(qA, pA, pB);\n      dorequire(abs(expected_qB - qB) <= epsilon, ("INVALID_B_AMOUNT", expected_qB));\n      transfer 0tz to token[tA].addr\n        call %transfer<address * address * nat>((caller, selfaddress, qA));\n      transfer (qB * 1utz) to caller;\n      token.update(tA, { xtzpool -= qB; tokpool += qA });\n    end else begin\n      var pA      = token[tA].tokpool;\n      var pXTZA   = token[tA].xtzpool;\n      var qXTZ    = abs(floor(compute_qB(qA, pA, pXTZA)));\n      var pXTZB   = token[tB].xtzpool;\n      var pB      = token[tB].tokpool;\n      var expected_qB = compute_qB(qXTZ, pXTZB, pB);\n      dorequire(abs(expected_qB - qB) <= epsilon, ("INVALID_B_AMOUNT", expected_qB));\n      transfer 0tz to token[tA].addr\n        call %transfer<address * address * nat>((caller, selfaddress, qA));\n      transfer 0tz to token[tB].addr\n        call %transfer<address * address * nat>((selfaddress, caller, qB));\n      token.update(tA, { xtzpool -= qXTZ; tokpool += qA });\n      token.update(tB, { xtzpool += qXTZ; tokpool -= qB });\n    end\n  }\n}\n\nentry addLiquidity(tA : string, qA : nat) {\n  (* transfer qA tokens tA to dex contract *)\n  transfer 0tz to token[tA].addr\n    call %transfer<address * address * nat>((caller, selfaddress, qA));\n  var xtzin : nat = transferred;\n  (* does qA tokens exchange for xtzin XTZ ? *)\n  var pA = token[tA].tokpool;\n  var pB = token[tA].xtzpool;\n  var expected_qB = compute_qB(qA, pA, pB);\n  dorequire(abs(expected_qB - xtzin) <= epsilon, ("INVALID_B_AMOUNT", expected_qB));\n  var mintedLiqT =\n    if token[tA].tokpool = 0\n    then initialminted\n    else abs(floor(token[tA].liqpool * xtzin / token[tA].xtzpool));\n  liquidity.addupdate((tA, caller), { liqt += mintedLiqT });\n  token.update(tA, { xtzpool += xtzin; tokpool += qA; liqpool += mintedLiqT })\n}\n\nentry removeLiquidity(tA : string, qL : nat) {\n  require {\n    r1 otherwise "NOT_ENOUGHT_LQT": qL <= liquidity[(tA, caller)].liqt\n  }\n  effect {\n    var liqratio = qL / token[tA].liqpool;\n    var xtzout = abs(floor(liqratio * token[tA].xtzpool));\n    transfer (xtzout * 1utz) to caller;\n    var qA = abs(floor(liqratio * token[tA].tokpool));\n    transfer 0tz to token[tA].addr\n      call %transfer<address * address * nat>((selfaddress, caller, qA));\n    liquidity.addupdate((tA, caller), { liqt -= qL });\n    token.update(tA, { xtzpool -= xtzout; tokpool -= qA; liqpool -= qL })\n  }\n}\n'))),Object(r.b)(i.a,{value:"michelson",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(D.a)({parentName:"pre"},{className:"language-js"}),'# (Pair admin (Pair initialminted (Pair {  } {  })))\n{\n  storage (pair (address %admin) (pair (nat %initialminted) (pair (map %token string (pair (address %addr) (pair (string %name) (pair (nat %xtzpool) (pair (nat %tokpool) (nat %liqpool)))))) (map %liquidity (pair string address) nat))));\n  parameter (or (pair %registertoken (string %i) (pair (address %a) (string %n))) (or (string %deletetoken) (or (pair %exchange (string %tA) (pair (nat %qA) (pair (string %tB) (nat %qB)))) (or (pair %addLiquidity (string %tA) (nat %qA)) (pair %removeLiquidity (string %tA) (nat %qL))))));\n  code { LAMBDA\n           (pair (pair (pair int nat) (pair int nat)) (or unit (or (or unit unit) (or unit unit))))\n           bool\n           { UNPAIR;\n             UNPAIR;\n             DIP { UNPAIR };\n             UNPAIR;\n             DUG 3;\n             MUL;\n             DIP { MUL };\n             SWAP;\n             COMPARE;\n             SWAP;\n             IF_LEFT\n               { DROP;\n                 EQ }\n               { IF_LEFT\n                   { IF_LEFT\n                       { DROP;\n                         LT }\n                       { DROP;\n                         LE } }\n                   { IF_LEFT\n                       { DROP;\n                         GT }\n                       { DROP;\n                         GE } } } };\n         LAMBDA\n           (pair (pair int nat) (pair nat (pair nat nat)))\n           (pair int nat)\n           { UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             PUSH unit Unit;\n             PUSH nat 1;\n             DIG 4;\n             DUP;\n             DUG 5;\n             INT;\n             PAIR;\n             UNIT;\n             RIGHT unit;\n             PUSH nat 1000;\n             PUSH int 3;\n             PAIR;\n             PUSH nat 1;\n             PUSH nat 1;\n             INT;\n             PAIR;\n             PAIR;\n             PAIR;\n             UNPAIR;\n             UNPAIR;\n             DIP { UNPAIR; SWAP; DUP };\n             UNPAIR;\n             SWAP;\n             DUP;\n             DIG 3;\n             MUL;\n             DUG 4;\n             DIG 3;\n             MUL;\n             DIP { MUL };\n             DIG 3;\n             IF_LEFT\n               { DROP;\n                 ADD }\n               { DROP;\n                 SWAP;\n                 SUB };\n             PAIR;\n             PAIR;\n             UNPAIR;\n             DIP { UNPAIR };\n             UNPAIR;\n             DIP { SWAP };\n             MUL;\n             DIP { MUL };\n             PAIR;\n             UNIT;\n             LEFT unit;\n             DIG 1;\n             DUP;\n             DUG 2;\n             PUSH nat 1;\n             DIG 6;\n             DUP;\n             DUG 7;\n             INT;\n             PAIR;\n             PAIR;\n             PAIR;\n             UNPAIR;\n             UNPAIR;\n             DIP { UNPAIR; SWAP; DUP };\n             UNPAIR;\n             SWAP;\n             DUP;\n             DIG 3;\n             MUL;\n             DUG 4;\n             DIG 3;\n             MUL;\n             DIP { MUL };\n             DIG 3;\n             IF_LEFT\n               { DROP;\n                 ADD }\n               { DROP;\n                 SWAP;\n                 SUB };\n             PAIR;\n             DIG 1;\n             DUP;\n             DUG 2;\n             PUSH nat 1;\n             DIG 5;\n             DUP;\n             DUG 6;\n             INT;\n             PAIR;\n             PAIR;\n             UNPAIR;\n             DIP { UNPAIR };\n             UNPAIR;\n             DIP { SWAP };\n             MUL;\n             DIP { MUL };\n             PAIR;\n             PAIR;\n             UNPAIR;\n             DIP { UNPAIR };\n             UNPAIR;\n             DIG 3;\n             PUSH int 0;\n             DIG 4;\n             DUP;\n             DUG 5;\n             COMPARE;\n             GE;\n             IF\n               { INT }\n               { NEG };\n             MUL;\n             DIP { MUL; ABS };\n             PAIR;\n             DIP { DIG 1; DROP };\n             DUG 1;\n             DROP;\n             DUG 4;\n             DROP 4 };\n         NIL operation;\n         DIG 3;\n         UNPAIR;\n         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };\n         IF_LEFT\n           { UNPAIR;\n             SWAP;\n             UNPAIR;\n             SWAP;\n             DIG 6;\n             DUP;\n             DUG 7;\n             SENDER;\n             COMPARE;\n             EQ;\n             NOT;\n             IF\n               { PUSH string "InvalidCaller";\n                 FAILWITH }\n               {  };\n             PUSH string "XTZ";\n             DIG 3;\n             DUP;\n             DUG 4;\n             COMPARE;\n             EQ;\n             IF\n               { PUSH string "InvalidCondition: f1";\n                 FAILWITH }\n               {  };\n             DIG 4;\n             DUP;\n             DUG 5;\n             PUSH nat 0;\n             PUSH nat 0;\n             PAIR;\n             PUSH nat 0;\n             PAIR;\n             DIG 2;\n             DUP;\n             DUG 3;\n             PAIR;\n             DIG 3;\n             DUP;\n             DUG 4;\n             PAIR;\n             SOME;\n             DIG 4;\n             DUP;\n             DUG 5;\n             UPDATE;\n             DIP { DIG 4; DROP };\n             DUG 4;\n             DROP 3;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             SWAP;\n             PAIR;\n             DIG 1;\n             PAIR }\n           { IF_LEFT\n               { DIG 4;\n                 DUP;\n                 DUG 5;\n                 SENDER;\n                 COMPARE;\n                 EQ;\n                 NOT;\n                 IF\n                   { PUSH string "InvalidCaller";\n                     FAILWITH }\n                   {  };\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 NONE (pair address (pair string (pair nat (pair nat nat))));\n                 DIG 2;\n                 DUP;\n                 DUG 3;\n                 UPDATE;\n                 DIP { DIG 2; DROP };\n                 DUG 2;\n                 DROP;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 SWAP;\n                 PAIR;\n                 DIG 1;\n                 PAIR }\n               { IF_LEFT\n                   { UNPAIR;\n                     SWAP;\n                     UNPAIR;\n                     SWAP;\n                     UNPAIR;\n                     SWAP;\n                     DIG 1;\n                     DUP;\n                     DUG 2;\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     COMPARE;\n                     NEQ;\n                     NOT;\n                     IF\n                       { PUSH string "SRC_EQ_DST";\n                         FAILWITH }\n                       {  };\n                     PUSH string "XTZ";\n                     DIG 4;\n                     DUP;\n                     DUG 5;\n                     COMPARE;\n                     EQ;\n                     IF\n                       { DIG 5;\n                         DUP;\n                         DUG 6;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CAR;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CDR;\n                         CAR;\n                         DIG 11;\n                         DUP;\n                         DUG 12;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         PAIR;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         PAIR;\n                         PUSH nat 1000;\n                         PUSH int 3;\n                         PAIR;\n                         PAIR;\n                         EXEC;\n                         DIG 13;\n                         DUP;\n                         DUG 14;\n                         UNIT;\n                         RIGHT unit;\n                         LEFT (or unit unit);\n                         RIGHT unit;\n                         PUSH nat 1;\n                         PUSH nat 1;\n                         INT;\n                         PAIR;\n                         UNIT;\n                         RIGHT unit;\n                         PUSH nat 1;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         INT;\n                         PAIR;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         DIP { UNPAIR; SWAP; DUP };\n                         UNPAIR;\n                         SWAP;\n                         DUP;\n                         DIG 3;\n                         MUL;\n                         DUG 4;\n                         DIG 3;\n                         MUL;\n                         DIP { MUL };\n                         DIG 3;\n                         IF_LEFT\n                           { DROP;\n                             ADD }\n                           { DROP;\n                             SWAP;\n                             SUB };\n                         PAIR;\n                         UNPAIR;\n                         ABS;\n                         INT;\n                         PAIR;\n                         PAIR;\n                         PAIR;\n                         EXEC;\n                         NOT;\n                         IF\n                           { DUP;\n                             PUSH string "INVALID_B_AMOUNT";\n                             PAIR;\n                             FAILWITH }\n                           {  };\n                         PUSH mutez 1;\n                         AMOUNT;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           { DUP;\n                             CAR;\n                             SWAP;\n                             DROP };\n                         DUP;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         COMPARE;\n                         EQ;\n                         NOT;\n                         IF\n                           { DUP;\n                             PUSH string "INVALID_A_AMOUNT";\n                             PAIR;\n                             FAILWITH }\n                           {  };\n                         DIG 12;\n                         DUP;\n                         DUG 13;\n                         DIG 10;\n                         DUP;\n                         DUG 11;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         CONTRACT %transfer (pair address (pair address nat));\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         PUSH mutez 0;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         SENDER;\n                         PAIR;\n                         SELF;\n                         ADDRESS;\n                         PAIR;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 12; DROP };\n                         DUG 12;\n                         DIG 9;\n                         DUP;\n                         DUG 10;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         DIG 10;\n                         DUP;\n                         DUG 11;\n                         DIG 11;\n                         DUP;\n                         DUG 12;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         UNPAIR;\n                         SWAP;\n                         UNPAIR;\n                         SWAP;\n                         UNPAIR;\n                         DROP;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         CDR;\n                         CDR;\n                         CAR;\n                         ADD;\n                         SWAP;\n                         UNPAIR;\n                         DROP;\n                         PUSH int 0;\n                         DIG 11;\n                         DUP;\n                         DUG 12;\n                         INT;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         CDR;\n                         CDR;\n                         CDR;\n                         CAR;\n                         SUB;\n                         COMPARE;\n                         GE;\n                         IF\n                           { DIG 10;\n                             DUP;\n                             DUG 11;\n                             INT;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             CDR;\n                             CDR;\n                             CDR;\n                             CAR;\n                             SUB;\n                             ABS }\n                           { PUSH string "AssignNat";\n                             FAILWITH };\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SOME;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         UPDATE;\n                         DIP { DIG 10; DROP };\n                         DUG 10;\n                         DROP 5 }\n                       { PUSH string "XTZ";\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         COMPARE;\n                         EQ;\n                         IF\n                           { DIG 5;\n                             DUP;\n                             DUG 6;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CDR;\n                             CDR;\n                             CDR;\n                             CAR;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CDR;\n                             CDR;\n                             CAR;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             PAIR;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             PAIR;\n                             PUSH nat 1000;\n                             PUSH int 3;\n                             PAIR;\n                             PAIR;\n                             EXEC;\n                             DIG 13;\n                             DUP;\n                             DUG 14;\n                             UNIT;\n                             RIGHT unit;\n                             LEFT (or unit unit);\n                             RIGHT unit;\n                             PUSH nat 1;\n                             PUSH nat 1;\n                             INT;\n                             PAIR;\n                             UNIT;\n                             RIGHT unit;\n                             PUSH nat 1;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             INT;\n                             PAIR;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             PAIR;\n                             PAIR;\n                             UNPAIR;\n                             UNPAIR;\n                             DIP { UNPAIR; SWAP; DUP };\n                             UNPAIR;\n                             SWAP;\n                             DUP;\n                             DIG 3;\n                             MUL;\n                             DUG 4;\n                             DIG 3;\n                             MUL;\n                             DIP { MUL };\n                             DIG 3;\n                             IF_LEFT\n                               { DROP;\n                                 ADD }\n                               { DROP;\n                                 SWAP;\n                                 SUB };\n                             PAIR;\n                             UNPAIR;\n                             ABS;\n                             INT;\n                             PAIR;\n                             PAIR;\n                             PAIR;\n                             EXEC;\n                             NOT;\n                             IF\n                               { DUP;\n                                 PUSH string "INVALID_B_AMOUNT";\n                                 PAIR;\n                                 FAILWITH }\n                               {  };\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CAR;\n                             CONTRACT %transfer (pair address (pair address nat));\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             PUSH mutez 0;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             SELF;\n                             ADDRESS;\n                             PAIR;\n                             SENDER;\n                             PAIR;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 11; DROP };\n                             DUG 11;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             SENDER;\n                             CONTRACT unit;\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             PUSH mutez 1;\n                             PUSH nat 1;\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             INT;\n                             PAIR;\n                             PAIR;\n                             UNPAIR;\n                             UNPAIR;\n                             ABS;\n                             DIG 2;\n                             MUL;\n                             EDIV;\n                             IF_NONE\n                               { PUSH string "DivByZero";\n                                 FAILWITH }\n                               {  };\n                             CAR;\n                             UNIT;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 11; DROP };\n                             DUG 11;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             UNPAIR;\n                             SWAP;\n                             UNPAIR;\n                             SWAP;\n                             UNPAIR;\n                             DROP;\n                             PUSH int 0;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             INT;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             CDR;\n                             CDR;\n                             CAR;\n                             SUB;\n                             COMPARE;\n                             GE;\n                             IF\n                               { DIG 8;\n                                 DUP;\n                                 DUG 9;\n                                 INT;\n                                 DIG 5;\n                                 DUP;\n                                 DUG 6;\n                                 CDR;\n                                 CDR;\n                                 CAR;\n                                 SUB;\n                                 ABS }\n                               { PUSH string "AssignNat";\n                                 FAILWITH };\n                             SWAP;\n                             UNPAIR;\n                             DROP;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             CDR;\n                             CDR;\n                             CDR;\n                             CAR;\n                             ADD;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SOME;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             UPDATE;\n                             DIP { DIG 9; DROP };\n                             DUG 9;\n                             DROP 4 }\n                           { DIG 5;\n                             DUP;\n                             DUG 6;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CDR;\n                             CDR;\n                             CDR;\n                             CAR;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CDR;\n                             CDR;\n                             CAR;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             PAIR;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             PAIR;\n                             PUSH nat 1000;\n                             PUSH int 3;\n                             PAIR;\n                             PAIR;\n                             EXEC;\n                             UNPAIR;\n                             EDIV;\n                             IF_NONE\n                               { PUSH string "DivByZero";\n                                 FAILWITH }\n                               { CAR };\n                             ABS;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CDR;\n                             CDR;\n                             CAR;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CDR;\n                             CDR;\n                             CDR;\n                             CAR;\n                             DIG 14;\n                             DUP;\n                             DUG 15;\n                             DIG 1;\n                             DUP;\n                             DUG 2;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             PAIR;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             PAIR;\n                             PUSH nat 1000;\n                             PUSH int 3;\n                             PAIR;\n                             PAIR;\n                             EXEC;\n                             DIG 16;\n                             DUP;\n                             DUG 17;\n                             UNIT;\n                             RIGHT unit;\n                             LEFT (or unit unit);\n                             RIGHT unit;\n                             PUSH nat 1;\n                             PUSH nat 1;\n                             INT;\n                             PAIR;\n                             UNIT;\n                             RIGHT unit;\n                             PUSH nat 1;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             INT;\n                             PAIR;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             PAIR;\n                             PAIR;\n                             UNPAIR;\n                             UNPAIR;\n                             DIP { UNPAIR; SWAP; DUP };\n                             UNPAIR;\n                             SWAP;\n                             DUP;\n                             DIG 3;\n                             MUL;\n                             DUG 4;\n                             DIG 3;\n                             MUL;\n                             DIP { MUL };\n                             DIG 3;\n                             IF_LEFT\n                               { DROP;\n                                 ADD }\n                               { DROP;\n                                 SWAP;\n                                 SUB };\n                             PAIR;\n                             UNPAIR;\n                             ABS;\n                             INT;\n                             PAIR;\n                             PAIR;\n                             PAIR;\n                             EXEC;\n                             NOT;\n                             IF\n                               { DUP;\n                                 PUSH string "INVALID_B_AMOUNT";\n                                 PAIR;\n                                 FAILWITH }\n                               {  };\n                             DIG 14;\n                             DUP;\n                             DUG 15;\n                             DIG 12;\n                             DUP;\n                             DUG 13;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CAR;\n                             CONTRACT %transfer (pair address (pair address nat));\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             PUSH mutez 0;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             SELF;\n                             ADDRESS;\n                             PAIR;\n                             SENDER;\n                             PAIR;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 14; DROP };\n                             DUG 14;\n                             DIG 14;\n                             DUP;\n                             DUG 15;\n                             DIG 12;\n                             DUP;\n                             DUG 13;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CAR;\n                             CONTRACT %transfer (pair address (pair address nat));\n                             IF_NONE\n                               { PUSH string "BadContract";\n                                 FAILWITH }\n                               {  };\n                             PUSH mutez 0;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             SENDER;\n                             PAIR;\n                             SELF;\n                             ADDRESS;\n                             PAIR;\n                             TRANSFER_TOKENS;\n                             CONS;\n                             DIP { DIG 14; DROP };\n                             DUG 14;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 12;\n                             DUP;\n                             DUG 13;\n                             DIG 13;\n                             DUP;\n                             DUG 14;\n                             DIG 12;\n                             DUP;\n                             DUG 13;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             UNPAIR;\n                             SWAP;\n                             UNPAIR;\n                             SWAP;\n                             UNPAIR;\n                             DROP;\n                             PUSH int 0;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             INT;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             CDR;\n                             CDR;\n                             CAR;\n                             SUB;\n                             COMPARE;\n                             GE;\n                             IF\n                               { DIG 8;\n                                 DUP;\n                                 DUG 9;\n                                 INT;\n                                 DIG 5;\n                                 DUP;\n                                 DUG 6;\n                                 CDR;\n                                 CDR;\n                                 CAR;\n                                 SUB;\n                                 ABS }\n                               { PUSH string "AssignNat";\n                                 FAILWITH };\n                             SWAP;\n                             UNPAIR;\n                             DROP;\n                             DIG 14;\n                             DUP;\n                             DUG 15;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             CDR;\n                             CDR;\n                             CDR;\n                             CAR;\n                             ADD;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SOME;\n                             DIG 12;\n                             DUP;\n                             DUG 13;\n                             UPDATE;\n                             DIP { DIG 12; DROP };\n                             DUG 12;\n                             DROP;\n                             DIG 11;\n                             DUP;\n                             DUG 12;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 12;\n                             DUP;\n                             DUG 13;\n                             DIG 13;\n                             DUP;\n                             DUG 14;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             UNPAIR;\n                             SWAP;\n                             UNPAIR;\n                             SWAP;\n                             UNPAIR;\n                             DROP;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             CDR;\n                             CDR;\n                             CAR;\n                             ADD;\n                             SWAP;\n                             UNPAIR;\n                             DROP;\n                             PUSH int 0;\n                             DIG 13;\n                             DUP;\n                             DUG 14;\n                             INT;\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             CDR;\n                             CDR;\n                             CDR;\n                             CAR;\n                             SUB;\n                             COMPARE;\n                             GE;\n                             IF\n                               { DIG 12;\n                                 DUP;\n                                 DUG 13;\n                                 INT;\n                                 DIG 6;\n                                 DUP;\n                                 DUG 7;\n                                 CDR;\n                                 CDR;\n                                 CDR;\n                                 CAR;\n                                 SUB;\n                                 ABS }\n                               { PUSH string "AssignNat";\n                                 FAILWITH };\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SWAP;\n                             PAIR;\n                             SOME;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             UPDATE;\n                             DIP { DIG 12; DROP };\n                             DUG 12;\n                             DROP 7 } };\n                     DROP 4;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     SWAP;\n                     PAIR;\n                     DIG 1;\n                     PAIR }\n                   { IF_LEFT\n                       { UNPAIR;\n                         SWAP;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         CONTRACT %transfer (pair address (pair address nat));\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         PUSH mutez 0;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         SELF;\n                         ADDRESS;\n                         PAIR;\n                         SENDER;\n                         PAIR;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 6; DROP };\n                         DUG 6;\n                         PUSH mutez 1;\n                         AMOUNT;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           { DUP;\n                             CAR;\n                             SWAP;\n                             DROP };\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CDR;\n                         CAR;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CAR;\n                         DIG 10;\n                         DUP;\n                         DUG 11;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         PAIR;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         PAIR;\n                         PUSH nat 1000;\n                         PUSH int 3;\n                         PAIR;\n                         PAIR;\n                         EXEC;\n                         DIG 12;\n                         DUP;\n                         DUG 13;\n                         UNIT;\n                         RIGHT unit;\n                         LEFT (or unit unit);\n                         RIGHT unit;\n                         PUSH nat 1;\n                         PUSH nat 1;\n                         INT;\n                         PAIR;\n                         UNIT;\n                         RIGHT unit;\n                         PUSH nat 1;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         INT;\n                         PAIR;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         DIP { UNPAIR; SWAP; DUP };\n                         UNPAIR;\n                         SWAP;\n                         DUP;\n                         DIG 3;\n                         MUL;\n                         DUG 4;\n                         DIG 3;\n                         MUL;\n                         DIP { MUL };\n                         DIG 3;\n                         IF_LEFT\n                           { DROP;\n                             ADD }\n                           { DROP;\n                             SWAP;\n                             SUB };\n                         PAIR;\n                         UNPAIR;\n                         ABS;\n                         INT;\n                         PAIR;\n                         PAIR;\n                         PAIR;\n                         EXEC;\n                         NOT;\n                         IF\n                           { DUP;\n                             PUSH string "INVALID_B_AMOUNT";\n                             PAIR;\n                             FAILWITH }\n                           {  };\n                         PUSH nat 0;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CDR;\n                         CAR;\n                         COMPARE;\n                         EQ;\n                         IF\n                           { DIG 8;\n                             DUP;\n                             DUG 9 }\n                           { PUSH nat 1;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             DIG 7;\n                             DUP;\n                             DUG 8;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CDR;\n                             CDR;\n                             CAR;\n                             INT;\n                             PAIR;\n                             PUSH nat 1;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             DIG 9;\n                             DUP;\n                             DUG 10;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             CDR;\n                             CDR;\n                             CDR;\n                             CDR;\n                             MUL;\n                             INT;\n                             PAIR;\n                             PAIR;\n                             UNPAIR;\n                             DIP { UNPAIR };\n                             UNPAIR;\n                             DIG 3;\n                             PUSH int 0;\n                             DIG 4;\n                             DUP;\n                             DUG 5;\n                             COMPARE;\n                             GE;\n                             IF\n                               { INT }\n                               { NEG };\n                             MUL;\n                             DIP { MUL; ABS };\n                             PAIR;\n                             UNPAIR;\n                             EDIV;\n                             IF_NONE\n                               { PUSH string "DivByZero";\n                                 FAILWITH }\n                               { CAR };\n                             ABS };\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         SENDER;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         PAIR;\n                         MEM;\n                         IF\n                           { DIG 7;\n                             DUP;\n                             DUG 8;\n                             SENDER;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             PAIR;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             DIG 2;\n                             DUP;\n                             DUG 3;\n                             ADD;\n                             SOME;\n                             SENDER;\n                             DIG 10;\n                             DUP;\n                             DUG 11;\n                             PAIR;\n                             UPDATE;\n                             DIP { DIG 8; DROP };\n                             DUG 8;\n                             DROP }\n                           { DIG 7;\n                             DUP;\n                             DUG 8;\n                             SENDER;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             PAIR;\n                             MEM;\n                             IF\n                               { PUSH string "KeyAlreadyExists";\n                                 FAILWITH }\n                               { DIG 7;\n                                 DUP;\n                                 DUG 8;\n                                 DIG 1;\n                                 DUP;\n                                 DUG 2;\n                                 PUSH nat 0;\n                                 ADD;\n                                 SOME;\n                                 SENDER;\n                                 DIG 9;\n                                 DUP;\n                                 DUG 10;\n                                 PAIR;\n                                 UPDATE;\n                                 DIP { DIG 7; DROP };\n                                 DUG 7 } };\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         DIG 9;\n                         DUP;\n                         DUG 10;\n                         DIG 10;\n                         DUP;\n                         DUG 11;\n                         DIG 9;\n                         DUP;\n                         DUG 10;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         UNPAIR;\n                         SWAP;\n                         UNPAIR;\n                         SWAP;\n                         UNPAIR;\n                         DROP;\n                         DIG 9;\n                         DUP;\n                         DUG 10;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         CDR;\n                         CDR;\n                         CAR;\n                         ADD;\n                         SWAP;\n                         UNPAIR;\n                         DROP;\n                         DIG 11;\n                         DUP;\n                         DUG 12;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         CDR;\n                         CDR;\n                         CDR;\n                         CAR;\n                         ADD;\n                         SWAP;\n                         DROP;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         CDR;\n                         CDR;\n                         CDR;\n                         CDR;\n                         ADD;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SOME;\n                         DIG 9;\n                         DUP;\n                         DUG 10;\n                         UPDATE;\n                         DIP { DIG 9; DROP };\n                         DUG 9;\n                         DROP 8;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         DIG 1;\n                         PAIR }\n                       { UNPAIR;\n                         SWAP;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         SENDER;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         PAIR;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         COMPARE;\n                         LE;\n                         NOT;\n                         IF\n                           { PUSH string "NOT_ENOUGHT_LQT";\n                             FAILWITH }\n                           {  };\n                         PUSH nat 1;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CDR;\n                         CDR;\n                         INT;\n                         PAIR;\n                         PUSH nat 1;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         INT;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         DIP { UNPAIR };\n                         UNPAIR;\n                         DIG 3;\n                         PUSH int 0;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         COMPARE;\n                         GE;\n                         IF\n                           { INT }\n                           { NEG };\n                         MUL;\n                         DIP { MUL; ABS };\n                         PAIR;\n                         PUSH nat 1;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CAR;\n                         INT;\n                         PAIR;\n                         DIG 1;\n                         DUP;\n                         DUG 2;\n                         PAIR;\n                         UNPAIR;\n                         DIP { UNPAIR };\n                         UNPAIR;\n                         DIP { SWAP };\n                         MUL;\n                         DIP { MUL };\n                         PAIR;\n                         UNPAIR;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           { CAR };\n                         ABS;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         SENDER;\n                         CONTRACT unit;\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         PUSH mutez 1;\n                         PUSH nat 1;\n                         DIG 4;\n                         DUP;\n                         DUG 5;\n                         INT;\n                         PAIR;\n                         PAIR;\n                         UNPAIR;\n                         UNPAIR;\n                         ABS;\n                         DIG 2;\n                         MUL;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         UNIT;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 8; DROP };\n                         DUG 8;\n                         PUSH nat 1;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CDR;\n                         CDR;\n                         CDR;\n                         CAR;\n                         INT;\n                         PAIR;\n                         DIG 2;\n                         DUP;\n                         DUG 3;\n                         PAIR;\n                         UNPAIR;\n                         DIP { UNPAIR };\n                         UNPAIR;\n                         DIP { SWAP };\n                         MUL;\n                         DIP { MUL };\n                         PAIR;\n                         UNPAIR;\n                         EDIV;\n                         IF_NONE\n                           { PUSH string "DivByZero";\n                             FAILWITH }\n                           { CAR };\n                         ABS;\n                         DIG 9;\n                         DUP;\n                         DUG 10;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         CAR;\n                         CONTRACT %transfer (pair address (pair address nat));\n                         IF_NONE\n                           { PUSH string "BadContract";\n                             FAILWITH }\n                           {  };\n                         PUSH mutez 0;\n                         DIG 3;\n                         DUP;\n                         DUG 4;\n                         SENDER;\n                         PAIR;\n                         SELF;\n                         ADDRESS;\n                         PAIR;\n                         TRANSFER_TOKENS;\n                         CONS;\n                         DIP { DIG 9; DROP };\n                         DUG 9;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         SENDER;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         PAIR;\n                         MEM;\n                         IF\n                           { DIG 5;\n                             DUP;\n                             DUG 6;\n                             SENDER;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             PAIR;\n                             GET;\n                             IF_NONE\n                               { PUSH string "GetNoneValue";\n                                 FAILWITH }\n                               {  };\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             PUSH int 0;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             INT;\n                             DIG 3;\n                             DUP;\n                             DUG 4;\n                             SUB;\n                             COMPARE;\n                             GE;\n                             IF\n                               { DIG 5;\n                                 DUP;\n                                 DUG 6;\n                                 INT;\n                                 DIG 2;\n                                 DUP;\n                                 DUG 3;\n                                 SUB;\n                                 ABS }\n                               { PUSH string "AssignNat";\n                                 FAILWITH };\n                             SOME;\n                             SENDER;\n                             DIG 8;\n                             DUP;\n                             DUG 9;\n                             PAIR;\n                             UPDATE;\n                             DIP { DIG 6; DROP };\n                             DUG 6;\n                             DROP }\n                           { DIG 5;\n                             DUP;\n                             DUG 6;\n                             SENDER;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             PAIR;\n                             MEM;\n                             IF\n                               { PUSH string "KeyAlreadyExists";\n                                 FAILWITH }\n                               { DIG 5;\n                                 DUP;\n                                 DUG 6;\n                                 PUSH int 0;\n                                 DIG 5;\n                                 DUP;\n                                 DUG 6;\n                                 INT;\n                                 PUSH nat 0;\n                                 SUB;\n                                 COMPARE;\n                                 GE;\n                                 IF\n                                   { DIG 4;\n                                     DUP;\n                                     DUG 5;\n                                     INT;\n                                     PUSH nat 0;\n                                     SUB;\n                                     ABS }\n                                   { PUSH string "AssignNat";\n                                     FAILWITH };\n                                 SOME;\n                                 SENDER;\n                                 DIG 7;\n                                 DUP;\n                                 DUG 8;\n                                 PAIR;\n                                 UPDATE;\n                                 DIP { DIG 5; DROP };\n                                 DUG 5 } };\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         DIG 5;\n                         DUP;\n                         DUG 6;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         DIG 8;\n                         DUP;\n                         DUG 9;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         GET;\n                         IF_NONE\n                           { PUSH string "GetNoneValue";\n                             FAILWITH }\n                           {  };\n                         UNPAIR;\n                         SWAP;\n                         UNPAIR;\n                         SWAP;\n                         UNPAIR;\n                         DROP;\n                         PUSH int 0;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         INT;\n                         DIG 6;\n                         DUP;\n                         DUG 7;\n                         CDR;\n                         CDR;\n                         CAR;\n                         SUB;\n                         COMPARE;\n                         GE;\n                         IF\n                           { DIG 6;\n                             DUP;\n                             DUG 7;\n                             INT;\n                             DIG 5;\n                             DUP;\n                             DUG 6;\n                             CDR;\n                             CDR;\n                             CAR;\n                             SUB;\n                             ABS }\n                           { PUSH string "AssignNat";\n                             FAILWITH };\n                         SWAP;\n                         UNPAIR;\n                         DROP;\n                         PUSH int 0;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         INT;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         CDR;\n                         CDR;\n                         CDR;\n                         CAR;\n                         SUB;\n                         COMPARE;\n                         GE;\n                         IF\n                           { DIG 6;\n                             DUP;\n                             DUG 7;\n                             INT;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             CDR;\n                             CDR;\n                             CDR;\n                             CAR;\n                             SUB;\n                             ABS }\n                           { PUSH string "AssignNat";\n                             FAILWITH };\n                         SWAP;\n                         DROP;\n                         PUSH int 0;\n                         DIG 10;\n                         DUP;\n                         DUG 11;\n                         INT;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         CDR;\n                         CDR;\n                         CDR;\n                         CDR;\n                         SUB;\n                         COMPARE;\n                         GE;\n                         IF\n                           { DIG 9;\n                             DUP;\n                             DUG 10;\n                             INT;\n                             DIG 6;\n                             DUP;\n                             DUG 7;\n                             CDR;\n                             CDR;\n                             CDR;\n                             CDR;\n                             SUB;\n                             ABS }\n                           { PUSH string "AssignNat";\n                             FAILWITH };\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SOME;\n                         DIG 7;\n                         DUP;\n                         DUG 8;\n                         UPDATE;\n                         DIP { DIG 7; DROP };\n                         DUG 7;\n                         DROP 6;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         SWAP;\n                         PAIR;\n                         DIG 1;\n                         PAIR } } } };\n         DIP { DROP 2 } };\n}\n')))))}R.isMDXComponent=!0},235:function(n,e,t){"use strict";function D(n){var e,t,a="";if("string"==typeof n||"number"==typeof n)a+=n;else if("object"==typeof n)if(Array.isArray(n))for(e=0;e<n.length;e++)n[e]&&(t=D(n[e]))&&(a&&(a+=" "),a+=t);else for(e in n)n[e]&&(a&&(a+=" "),a+=e);return a}e.a=function(){for(var n,e,t=0,a="";t<arguments.length;)(n=arguments[t++])&&(e=D(n))&&(a&&(a+=" "),a+=e);return a}},241:function(n,e,t){"use strict";var D=t(0),a=t(242);e.a=function(){const n=Object(D.useContext)(a.a);if(null==n)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return n}},242:function(n,e,t){"use strict";var D=t(0);const a=Object(D.createContext)(void 0);e.a=a},243:function(n,e,t){"use strict";var D=t(0),a=t.n(D),r=t(241),I=t(235),P=t(56),i=t.n(P);const o=37,U=39;e.a=function(n){const{lazy:e,block:t,defaultValue:P,values:A,groupId:l,className:G}=n,{tabGroupChoices:s,setTabGroupChoices:R}=Object(r.a)(),[c,d]=Object(D.useState)(P),u=D.Children.toArray(n.children);if(null!=l){const n=s[l];null!=n&&n!==c&&A.some((e=>e.value===n))&&d(n)}const N=n=>{d(n),null!=l&&R(l,n)},p=[];return a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(I.a)("tabs",{"tabs--block":t},G)},A.map((({value:n,label:e})=>a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":c===n,className:Object(I.a)("tabs__item",i.a.tabItem,{"tabs__item--active":c===n}),key:n,ref:n=>p.push(n),onKeyDown:n=>{((n,e,t)=>{switch(t.keyCode){case U:((n,e)=>{const t=n.indexOf(e)+1;n[t]?n[t].focus():n[0].focus()})(n,e);break;case o:((n,e)=>{const t=n.indexOf(e)-1;n[t]?n[t].focus():n[n.length-1].focus()})(n,e)}})(p,n.target,n)},onFocus:()=>N(n),onClick:()=>{N(n)}},e)))),e?Object(D.cloneElement)(u.filter((n=>n.props.value===c))[0],{className:"margin-vert--md"}):a.a.createElement("div",{className:"margin-vert--md"},u.map(((n,e)=>Object(D.cloneElement)(n,{key:e,hidden:n.props.value!==c})))))}},244:function(n,e,t){"use strict";var D=t(3),a=t(0),r=t.n(a);e.a=function({children:n,hidden:e,className:t}){return r.a.createElement("div",Object(D.a)({role:"tabpanel"},{hidden:e,className:t}),n)}},253:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var D=function(n){if(n&&n.__esModule)return n;var e={};if(null!=n)for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t]);return e.default=n,e}(t(0)).createContext({MathJax:null,registerNode:function(){}});e.default=D},271:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var D=r(t(272)),a=r(t(274));function r(n){return n&&n.__esModule?n:{default:n}}var I={Provider:D.default,Node:a.default};e.default=I},272:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var D=function(){function n(n,e){for(var t=0;t<e.length;t++){var D=e[t];D.enumerable=D.enumerable||!1,D.configurable=!0,"value"in D&&(D.writable=!0),Object.defineProperty(n,D.key,D)}}return function(e,t,D){return t&&n(e.prototype,t),D&&n(e,D),e}}(),a=function(n){if(n&&n.__esModule)return n;var e={};if(null!=n)for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t]);return e.default=n,e}(t(0)),r=P(t(273)),I=P(t(253));function P(n){return n&&n.__esModule?n:{default:n}}var i=function(n){function e(n){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var t=function(n,e){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?n:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,n));return t.hasNodes=!1,t.loaded=!1,t.registerNode=function(){t.hasNodes=!0},t.load=function(){var n=t.props.script;!t.loaded&&t.hasNodes&&(t.loaded=!0,n?(0,r.default)(n,t.onLoad):t.onLoad(null))},t.onLoad=function(n){var e=t.props.options;MathJax.Hub.Config(e),t.setState({MathJax:MathJax})},t.state={MathJax:null,registerNode:t.registerNode},t}return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(n,e):n.__proto__=e)}(e,n),D(e,[{key:"componentDidMount",value:function(){this.load()}},{key:"componentDidUpdate",value:function(){this.load()}},{key:"render",value:function(){var n=this.props.children;return a.createElement(I.default.Provider,{value:this.state},n)}}]),e}(a.Component);i.defaultProps={script:"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML",options:{tex2jax:{inlineMath:[]},showMathMenu:!1,showMathMenuMSIE:!1}},e.default=i},273:function(n,e){function t(n,e){n.onload=function(){this.onerror=this.onload=null,e(null,n)},n.onerror=function(){this.onerror=this.onload=null,e(new Error("Failed to load "+this.src),n)}}function D(n,e){n.onreadystatechange=function(){"complete"!=this.readyState&&"loaded"!=this.readyState||(this.onreadystatechange=null,e(null,n))}}n.exports=function(n,e,a){var r=document.head||document.getElementsByTagName("head")[0],I=document.createElement("script");"function"==typeof e&&(a=e,e={}),e=e||{},a=a||function(){},I.type=e.type||"text/javascript",I.charset=e.charset||"utf8",I.async=!("async"in e)||!!e.async,I.src=n,e.attrs&&function(n,e){for(var t in e)n.setAttribute(t,e[t])}(I,e.attrs),e.text&&(I.text=""+e.text),("onload"in I?t:D)(I,a),I.onload||t(I,a),r.appendChild(I)}},274:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var D=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var D in t)Object.prototype.hasOwnProperty.call(t,D)&&(n[D]=t[D])}return n},a=function(){function n(n,e){for(var t=0;t<e.length;t++){var D=e[t];D.enumerable=D.enumerable||!1,D.configurable=!0,"value"in D&&(D.writable=!0),Object.defineProperty(n,D.key,D)}}return function(e,t,D){return t&&n(e.prototype,t),D&&n(e,D),e}}(),r=function(n){if(n&&n.__esModule)return n;var e={};if(null!=n)for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t]);return e.default=n,e}(t(0)),I=i(t(253)),P=i(t(275));function i(n){return n&&n.__esModule?n:{default:n}}function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}function U(n,e){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?n:e}function A(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(n,e):n.__proto__=e)}var l=function(n){function e(){var n,t,D;o(this,e);for(var a=arguments.length,I=Array(a),P=0;P<a;P++)I[P]=arguments[P];return t=D=U(this,(n=e.__proto__||Object.getPrototypeOf(e)).call.apply(n,[this].concat(I))),D.container=r.createRef(),U(D,t)}return A(e,n),a(e,[{key:"componentDidMount",value:function(){this.typeset()}},{key:"componentDidUpdate",value:function(n){var e=n.inline!=this.props.inline;this.typeset(e)}},{key:"componentWillUnmount",value:function(){this.clear()}},{key:"clear",value:function(){var n=this.props.MathJax;if(this.script&&n){var e=n.Hub.getJaxFor(this.script);e&&e.Remove()}}},{key:"typeset",value:function(n){var e=this,t=this.props,D=t.MathJax,a=t.formula,r=t.onRender;if(D)if(n&&this.clear(),!n&&this.script)D.Hub.Queue((function(){var n=D.Hub.getJaxFor(e.script);if(n)n.Text(a,r);else{var t=e.setScriptText(a);(0,P.default)(D,t,r)}}));else{var I=this.setScriptText(a);(0,P.default)(D,I,r)}}},{key:"setScriptText",value:function(n){var e=this.props.inline;return this.script||(this.script=document.createElement("script"),this.script.type="math/tex; "+(e?"":"mode=display"),this.container.current.appendChild(this.script)),"text"in this.script?this.script.text=n:this.script.textContent=n,this.script}},{key:"render",value:function(){var n=this.props,e=(n.MathJax,n.formula,n.inline,n.onRender,function(n,e){var t={};for(var D in n)e.indexOf(D)>=0||Object.prototype.hasOwnProperty.call(n,D)&&(t[D]=n[D]);return t}(n,["MathJax","formula","inline","onRender"]));return this.props.inline?r.createElement("span",D({ref:this.container},e)):r.createElement("div",D({ref:this.container},e))}}]),e}(r.Component);l.defaultProps={inline:!1,onRender:function(){}};var G=function(n){function e(){return o(this,e),U(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return A(e,n),a(e,[{key:"render",value:function(){var n=this;return r.createElement(I.default.Consumer,null,(function(e){var t=e.MathJax;return(0,e.registerNode)(),t?r.createElement(l,D({},n.props,{MathJax:t})):null}))}}]),e}(r.PureComponent);e.default=G},275:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var D=[],a=[],r=!1;e.default=function(n,e,t){D.push(e),a.push(t),r||(r=!0,setTimeout((function(){return function(n){n.Hub.Queue((function(){var e=n.Hub.elementScripts;n.Hub.elementScripts=function(n){return D};try{return n.Hub.Process(null,(function(){a.forEach((function(n){n()})),D=[],a=[],r=!1}))}catch(t){throw t}finally{n.Hub.elementScripts=e}}))}(n)}),0))}}}]);